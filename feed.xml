<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://subhadipmitra.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhadipmitra.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-04T16:30:52+00:00</updated><id>https://subhadipmitra.com/feed.xml</id><title type="html">blank</title><subtitle>Explore the intersection of technology and innovation with Subhadip Mitra, a technology leader at Google Cloud. Discover his insights on AI innovations, machine learning models, and data &amp; analytics. He drives digital transformation through cloud technologies and explores the future of quantum computing. Dive into his projects and musings on enterprise technology leadership and technology consulting. </subtitle><entry><title type="html">Implementing Model Context Protocol in Autonomous Multi-Agent Systems - Technical Architecture and Performance Optimization</title><link href="https://subhadipmitra.com/blog/2025/implementing-model-context-protocol/" rel="alternate" type="text/html" title="Implementing Model Context Protocol in Autonomous Multi-Agent Systems - Technical Architecture and Performance Optimization"/><published>2025-03-22T10:21:45+00:00</published><updated>2025-03-22T10:21:45+00:00</updated><id>https://subhadipmitra.com/blog/2025/implementing-model-context-protocol</id><content type="html" xml:base="https://subhadipmitra.com/blog/2025/implementing-model-context-protocol/"><![CDATA[<p>After exploring the architecture and implementation of autonomous multi-agent systems for telecom customer service in <a href="https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system/">my previous article</a>, it’s time to address an emerging standard that promises to solve many of the challenges I outlined: Model Context Protocol (MCP).</p> <blockquote> <p>An initial implementation of a framework for building autonomous multi-agent systems with standardized context management is available <a href="https://github.com/bassrehab/pycontext/">here</a>. Contributions are most welcome.</p> </blockquote> <p><br/></p> <h2 id="what-is-model-context-protocol-and-why-should-you-care">What is Model Context Protocol and Why Should You Care?</h2> <p>Model Context Protocol represents a standardized approach to managing, transmitting, and optimizing context between large language models and agent systems. While proprietary context handling mechanisms abound, MCP offers a unified framework that solves critical challenges:</p> <ol> <li><strong>Standardized context exchange</strong> between heterogeneous agent systems</li> <li><strong>Optimized context transmission</strong> with payload minimization</li> <li><strong>Semantic context tagging</strong> for intelligent routing and prioritization</li> <li><strong>Versioned context management</strong> for complex multi-step operations</li> </ol> <p>Unlike ad-hoc solutions, MCP provides a framework designed specifically for the high-throughput, context-sensitive operations required by production-grade autonomous agent systems. Let’s dig into the technical implementation.</p> <p><br/></p> <h2 id="technical-implementation">Technical Implementation</h2> <p><br/></p> <h3 id="core-protocol-definition">Core Protocol Definition</h3> <p>At its heart, MCP implements a standard protocol buffer definition that any agent system can adopt. Here’s a simplified version of the core protocol:</p> <div class="language-protobuf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">mcp</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">ContextBlock</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">uint64</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">content</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">float</span> <span class="na">relevance_score</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="n">map</span><span class="o">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="err">&gt;</span> <span class="na">metadata</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="n">ContextType</span> <span class="na">type</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
  <span class="kt">uint32</span> <span class="na">token_count</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">references</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="n">ContextType</span> <span class="p">{</span>
  <span class="na">SYSTEM</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="na">USER</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="na">AGENT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="na">MEMORY</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="na">KNOWLEDGE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="na">TOOL</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ContextPackage</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">session_id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">agent_id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="n">ContextBlock</span> <span class="na">blocks</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="n">ContextMetrics</span> <span class="na">metrics</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="kt">uint32</span> <span class="na">version</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">trace_id</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ContextMetrics</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">total_tokens</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">float</span> <span class="na">context_saturation</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="n">map</span><span class="o">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">float</span><span class="err">&gt;</span> <span class="na">type_distribution</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>This protocol definition enables serialized context transmission across agent boundaries while maintaining critical metadata that informs context utilization decisions.</p> <p><br/> <br/></p> <h3 id="python-implementation">Python Implementation</h3> <p>Let’s implement a Python client for MCP that can be used in our agent architecture:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">uuid</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Union</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>

<span class="k">class</span> <span class="nc">ContextType</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">SYSTEM</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">USER</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">AGENT</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">MEMORY</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">KNOWLEDGE</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">TOOL</span> <span class="o">=</span> <span class="mi">5</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ContextBlock</span><span class="p">:</span>
    <span class="nb">id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">content</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">relevance_score</span><span class="p">:</span> <span class="nb">float</span>
    <span class="nb">type</span><span class="p">:</span> <span class="n">ContextType</span>
    <span class="n">metadata</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">token_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">references</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">__post_init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">timestamp</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">timestamp</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">metadata</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">metadata</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">references</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">references</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">token_count</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># Approximate token count based on whitespace splitting
</span>            <span class="c1"># In production, use a proper tokenizer
</span>            <span class="n">self</span><span class="p">.</span><span class="n">token_count</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">split</span><span class="p">())</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ContextMetrics</span><span class="p">:</span>
    <span class="n">total_tokens</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">context_saturation</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">type_distribution</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ContextPackage</span><span class="p">:</span>
    <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">agent_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">blocks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ContextBlock</span><span class="p">]</span>
    <span class="n">metrics</span><span class="p">:</span> <span class="n">ContextMetrics</span>
    <span class="n">version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">trace_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">__post_init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">trace_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">trace_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>
            
    <span class="k">def</span> <span class="nf">calculate_metrics</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Calculate metrics based on current context blocks</span><span class="sh">"""</span>
        <span class="n">total_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">blocks</span><span class="p">)</span>
        
        <span class="c1"># Assuming 8K context window
</span>        <span class="n">context_saturation</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">total_tokens</span> <span class="o">/</span> <span class="mi">8192</span><span class="p">)</span>
        
        <span class="c1"># Calculate distribution of context types
</span>        <span class="n">type_counts</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="n">type_name</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="nb">type</span><span class="p">.</span><span class="n">name</span>
            <span class="k">if</span> <span class="n">type_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">type_counts</span><span class="p">:</span>
                <span class="n">type_counts</span><span class="p">[</span><span class="n">type_name</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">type_counts</span><span class="p">[</span><span class="n">type_name</span><span class="p">]</span> <span class="o">+=</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span>
        
        <span class="n">type_distribution</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="o">/</span> <span class="n">total_tokens</span> <span class="k">if</span> <span class="n">total_tokens</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span> 
            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">type_counts</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">metrics</span> <span class="o">=</span> <span class="nc">ContextMetrics</span><span class="p">(</span>
            <span class="n">total_tokens</span><span class="o">=</span><span class="n">total_tokens</span><span class="p">,</span>
            <span class="n">context_saturation</span><span class="o">=</span><span class="n">context_saturation</span><span class="p">,</span>
            <span class="n">type_distribution</span><span class="o">=</span><span class="n">type_distribution</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">to_dict</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Convert to dictionary representation for serialization</span><span class="sh">"""</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">session_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">agent_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">agent_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">blocks</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">content</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">relevance_score</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">relevance_score</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">metadata</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">metadata</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">timestamp</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">timestamp</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">token_count</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">token_count</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">references</span><span class="sh">"</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">references</span>
                <span class="p">}</span>
                <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">blocks</span>
            <span class="p">],</span>
            <span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">total_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">total_tokens</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">context_saturation</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">context_saturation</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type_distribution</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">type_distribution</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">version</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">version</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">trace_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">trace_id</span>
        <span class="p">}</span>
</code></pre></div></div> <p><br/> <br/></p> <p>Now let’s implement a <code class="language-plaintext highlighter-rouge">ContextManager</code> class that handles context operations with MCP:</p> <p><br/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">heapq</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Callable</span>

<span class="k">class</span> <span class="nc">ContextManager</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Manages context operations using Model Context Protocol</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                <span class="n">max_tokens</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8192</span><span class="p">,</span>
                <span class="n">relevance_threshold</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span> <span class="o">=</span> <span class="n">max_tokens</span>
        <span class="n">self</span><span class="p">.</span><span class="n">relevance_threshold</span> <span class="o">=</span> <span class="n">relevance_threshold</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ContextPackage</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">def</span> <span class="nf">create_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">agent_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Create a new context session</span><span class="sh">"""</span>
        <span class="n">session_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span> <span class="o">=</span> <span class="nc">ContextPackage</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">agent_id</span><span class="p">,</span>
            <span class="n">blocks</span><span class="o">=</span><span class="p">[],</span>
            <span class="n">metrics</span><span class="o">=</span><span class="nc">ContextMetrics</span><span class="p">(</span>
                <span class="n">total_tokens</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                <span class="n">context_saturation</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
                <span class="n">type_distribution</span><span class="o">=</span><span class="p">{}</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">session_id</span>
    
    <span class="k">def</span> <span class="nf">add_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                   <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                   <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                   <span class="n">context_type</span><span class="p">:</span> <span class="n">ContextType</span><span class="p">,</span>
                   <span class="n">relevance_score</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span>
                   <span class="n">metadata</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Add context to an existing session</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Session </span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s"> does not exist</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="n">block_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>
        <span class="n">block</span> <span class="o">=</span> <span class="nc">ContextBlock</span><span class="p">(</span>
            <span class="nb">id</span><span class="o">=</span><span class="n">block_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="n">relevance_score</span><span class="p">,</span>
            <span class="nb">type</span><span class="o">=</span><span class="n">context_type</span><span class="p">,</span>
            <span class="n">metadata</span><span class="o">=</span><span class="n">metadata</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="n">blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="nf">calculate_metrics</span><span class="p">()</span>
        
        <span class="c1"># If we've exceeded context window, perform context pruning
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="n">metrics</span><span class="p">.</span><span class="n">context_saturation</span> <span class="o">&gt;=</span> <span class="mf">0.9</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_prune_context</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">block_id</span>
    
    <span class="k">def</span> <span class="nf">_prune_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Prune least relevant context to fit within token limits</span><span class="sh">"""</span>
        <span class="n">session</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        
        <span class="c1"># Don't prune SYSTEM context
</span>        <span class="n">system_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">]</span>
        <span class="n">other_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="o">!=</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">]</span>
        
        <span class="c1"># Sort by relevance score (ascending)
</span>        <span class="n">other_blocks</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">relevance_score</span><span class="p">)</span>
        
        <span class="c1"># Keep removing blocks until we're under target
</span>        <span class="n">system_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">system_blocks</span><span class="p">)</span>
        <span class="n">target_tokens</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_tokens</span> <span class="o">*</span> <span class="mf">0.8</span><span class="p">)</span> <span class="o">-</span> <span class="n">system_tokens</span>  <span class="c1"># Target 80% usage
</span>        
        <span class="n">current_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">other_blocks</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">current_tokens</span> <span class="o">&gt;</span> <span class="n">target_tokens</span> <span class="ow">and</span> <span class="n">other_blocks</span><span class="p">:</span>
            <span class="n">removed_block</span> <span class="o">=</span> <span class="n">other_blocks</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># Remove least relevant
</span>            <span class="n">current_tokens</span> <span class="o">-=</span> <span class="n">removed_block</span><span class="p">.</span><span class="n">token_count</span>
        
        <span class="c1"># Reconstitute the blocks list
</span>        <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="o">=</span> <span class="n">system_blocks</span> <span class="o">+</span> <span class="n">other_blocks</span>
        <span class="n">session</span><span class="p">.</span><span class="nf">calculate_metrics</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">get_formatted_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                             <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                             <span class="n">formatter</span><span class="p">:</span> <span class="n">Callable</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Get formatted context for model input</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Session </span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s"> does not exist</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="n">session</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        
        <span class="c1"># Default formatter concatenates content with block type as separator
</span>        <span class="k">if</span> <span class="n">formatter</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">relevance_threshold</span><span class="p">:</span>
                    <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">block</span><span class="p">.</span><span class="nb">type</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">]</span><span class="se">\n</span><span class="si">{</span><span class="n">block</span><span class="p">.</span><span class="n">content</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nf">formatter</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">export_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Export session as serializable dict</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Session </span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s"> does not exist</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="nf">to_dict</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">import_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Import a session from serialized data</span><span class="sh">"""</span>
        <span class="n">session_id</span> <span class="o">=</span> <span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">session_id</span><span class="sh">"</span><span class="p">]</span>
        
        <span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">block_data</span> <span class="ow">in</span> <span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">blocks</span><span class="sh">"</span><span class="p">]:</span>
            <span class="n">blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">ContextBlock</span><span class="p">(</span>
                <span class="nb">id</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">content</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">relevance_score</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">relevance_score</span><span class="sh">"</span><span class="p">],</span>
                <span class="nb">type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">[</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">]],</span>
                <span class="n">metadata</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">metadata</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">timestamp</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">timestamp</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">token_count</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">token_count</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">references</span><span class="o">=</span><span class="n">block_data</span><span class="p">[</span><span class="sh">"</span><span class="s">references</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">))</span>
        
        <span class="n">metrics</span> <span class="o">=</span> <span class="nc">ContextMetrics</span><span class="p">(</span>
            <span class="n">total_tokens</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">total_tokens</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">context_saturation</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">context_saturation</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">type_distribution</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">type_distribution</span><span class="sh">"</span><span class="p">]</span>
        <span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span> <span class="o">=</span> <span class="nc">ContextPackage</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">agent_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">blocks</span><span class="o">=</span><span class="n">blocks</span><span class="p">,</span>
            <span class="n">metrics</span><span class="o">=</span><span class="n">metrics</span><span class="p">,</span>
            <span class="n">version</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">version</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">trace_id</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sh">"</span><span class="s">trace_id</span><span class="sh">"</span><span class="p">]</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">session_id</span>
</code></pre></div></div> <p><br/></p> <h3 id="integration-with-existing-agent-systems">Integration with Existing Agent Systems</h3> <p>Now let’s implement the integration of MCP into our multi-agent telecom customer service system from the previous article:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Union</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">MCPEnabledAgent</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Base class for agents that use Model Context Protocol</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                <span class="n">llm_client</span><span class="p">,</span>
                <span class="n">agent_role</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="n">llm_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">role</span> <span class="o">=</span> <span class="n">agent_role</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span> <span class="o">=</span> <span class="n">context_manager</span> <span class="ow">or</span> <span class="nc">ContextManager</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">initialize_session</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Initialize a new context session</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">create_session</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">role</span><span class="p">)</span>
        
        <span class="c1"># Add system prompt as SYSTEM context
</span>        <span class="n">system_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_role_prompt</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">system_prompt</span><span class="p">,</span>
            <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>  <span class="c1"># System prompts always max relevance
</span>            <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system_prompt</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">role</span><span class="p">}</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_load_role_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Load role-specific prompt - implement in subclasses</span><span class="sh">"""</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">()</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">add_user_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                              <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                              <span class="n">metadata</span><span class="p">:</span> <span class="n">Dict</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Add user input to context</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">initialize_session</span><span class="p">()</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
            <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">USER</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>  <span class="c1"># User context starts with high relevance
</span>            <span class="n">metadata</span><span class="o">=</span><span class="n">metadata</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">add_memory_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                <span class="n">relevance_score</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
                                <span class="n">metadata</span><span class="p">:</span> <span class="n">Dict</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Add memory (from episodic or semantic memory) to context</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">initialize_session</span><span class="p">()</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
            <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="n">relevance_score</span><span class="p">,</span>
            <span class="n">metadata</span><span class="o">=</span><span class="n">metadata</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">add_tool_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                              <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                              <span class="n">tool_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                              <span class="n">metadata</span><span class="p">:</span> <span class="n">Dict</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Add tool usage results to context</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">initialize_session</span><span class="p">()</span>
            
        <span class="k">if</span> <span class="n">metadata</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">metadata</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">metadata</span><span class="p">[</span><span class="sh">"</span><span class="s">tool_name</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">tool_name</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
            <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">TOOL</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.8</span><span class="p">,</span>  <span class="c1"># Tool outputs generally have high relevance
</span>            <span class="n">metadata</span><span class="o">=</span><span class="n">metadata</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">process_with_llm</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                              <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Process the current context with LLM</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">initialize_session</span><span class="p">()</span>
        
        <span class="n">formatted_context</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">get_formatted_context</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">prompt</span><span class="p">:</span>
            <span class="c1"># Add additional prompt as temporary context
</span>            <span class="n">formatted_context</span> <span class="o">+=</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">[PROMPT]</span><span class="se">\n</span><span class="si">{</span><span class="n">prompt</span><span class="si">}</span><span class="sh">"</span>
        
        <span class="c1"># Call LLM with formatted context
</span>        <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="nf">generate</span><span class="p">(</span><span class="n">formatted_context</span><span class="p">)</span>
        
        <span class="c1"># Add agent response to context
</span>        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">content</span><span class="o">=</span><span class="n">response</span><span class="p">,</span>
            <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">AGENT</span><span class="p">,</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>  <span class="c1"># Agent responses are highly relevant
</span>            <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">agent_response</span><span class="sh">"</span><span class="p">}</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">response</span>
    
    <span class="k">def</span> <span class="nf">export_context</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Export current context for transfer to another agent</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">No active session</span><span class="sh">"</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">export_session</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">session_id</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">import_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Import context from another agent</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">import_session</span><span class="p">(</span><span class="n">context_data</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/> Now we can implement our specialized telecom agents with MCP integration:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MCPEnabledIntentAgent</span><span class="p">(</span><span class="n">MCPEnabledAgent</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Intent analysis agent with MCP integration</span><span class="sh">"""</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_load_role_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"""</span><span class="s">You are an Intent Analysis Agent in a telecom customer service system.
Your role is to precisely identify customer intent from queries, detect multiple or
hidden intents, assess intent confidence, and identify required context for resolution.</span><span class="sh">"""</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">analyze_intent</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Analyze customer intent using MCP for context management</span><span class="sh">"""</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">add_user_context</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">customer_query</span><span class="sh">"</span><span class="p">})</span>
        
        <span class="n">analysis_prompt</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Based on the customer query above, provide the following analysis:
1. Primary Intent: The main customer goal
2. Secondary Intents: Additional or implied needs
3. Required Information: What we need to know to resolve this
4. Confidence Score: How certain are you (0-1)

Return your analysis in JSON format.
</span><span class="sh">"""</span>
        
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">process_with_llm</span><span class="p">(</span><span class="n">analysis_prompt</span><span class="p">)</span>
        
        <span class="c1"># Parse JSON response (in production, add error handling)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">analysis</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
            <span class="c1"># Fallback: Extract manually using regex or prompt again
</span>            <span class="n">analysis</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">primary_intent</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">unknown</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">secondary_intents</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">required_information</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">confidence</span><span class="sh">"</span><span class="p">:</span> <span class="mf">0.5</span>
            <span class="p">}</span>
            
        <span class="k">return</span> <span class="n">analysis</span>

<span class="k">class</span> <span class="nc">MCPEnabledTechnicalAgent</span><span class="p">(</span><span class="n">MCPEnabledAgent</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Technical support agent with MCP integration</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">llm_client</span><span class="p">,</span> <span class="n">network_api</span><span class="p">,</span> <span class="n">context_manager</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">llm_client</span><span class="p">,</span> <span class="sh">"</span><span class="s">technical_agent</span><span class="sh">"</span><span class="p">,</span> <span class="n">context_manager</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">network_api</span> <span class="o">=</span> <span class="n">network_api</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_load_role_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"""</span><span class="s">You are a Technical Support Agent specializing in telecom issues.
Your role is to diagnose technical issues from symptoms, design step-by-step
troubleshooting plans, interpret diagnostic results, and recommend solutions.</span><span class="sh">"""</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">diagnose_issue</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">issue_description</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Diagnose technical issue with MCP context management</span><span class="sh">"""</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">add_user_context</span><span class="p">(</span><span class="n">issue_description</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">customer_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">customer_id</span><span class="p">})</span>
        
        <span class="c1"># Add relevant customer technical data from memory
</span>        <span class="n">network_data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">network_api</span><span class="p">.</span><span class="nf">get_customer_network_data</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">add_memory_context</span><span class="p">(</span>
            <span class="n">content</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">network_data</span><span class="p">),</span>
            <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.85</span><span class="p">,</span>
            <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">network_data</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">customer_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">customer_id</span><span class="p">}</span>
        <span class="p">)</span>
        
        <span class="c1"># Run network diagnostics and add results to context
</span>        <span class="n">diagnostics</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">network_api</span><span class="p">.</span><span class="nf">run_diagnostics</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">add_tool_context</span><span class="p">(</span>
            <span class="n">content</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">diagnostics</span><span class="p">),</span>
            <span class="n">tool_name</span><span class="o">=</span><span class="sh">"</span><span class="s">network_diagnostics</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">metadata</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">customer_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">customer_id</span><span class="p">}</span>
        <span class="p">)</span>
        
        <span class="n">analysis_prompt</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Based on the customer issue, network data, and diagnostic results,
provide a technical analysis with:
1. Root Cause: The most likely cause of the issue
2. Recommended Solution: Step-by-step resolution plan
3. Alternative Solutions: Other approaches if the primary solution fails
4. Confidence: How certain are you about this diagnosis (0-1)

Return your analysis in JSON format.
</span><span class="sh">"""</span>
        
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">process_with_llm</span><span class="p">(</span><span class="n">analysis_prompt</span><span class="p">)</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">analysis</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">json</span><span class="p">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
            <span class="n">analysis</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">root_cause</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">unknown</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">recommended_solution</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">alternative_solutions</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span>
                <span class="sh">"</span><span class="s">confidence</span><span class="sh">"</span><span class="p">:</span> <span class="mf">0.5</span>
            <span class="p">}</span>
            
        <span class="k">return</span> <span class="n">analysis</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="context-optimization-strategies">Context Optimization Strategies</h2> <p>Agent systems operating at scale need advanced optimization strategies to ensure efficient use of context windows. Here are key MCP-enabled optimization techniques:</p> <p><br/></p> <h3 id="context-window-management">Context Window Management</h3> <p><br/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ContextWindowOptimizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Optimizes context window usage using MCP metadata</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span> <span class="o">=</span> <span class="n">context_manager</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">optimize_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_tokens</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Optimize context window to fit within token limit</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Session </span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s"> does not exist</span><span class="sh">"</span><span class="p">)</span>
            
        <span class="n">session</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        
        <span class="c1"># Calculate current usage
</span>        <span class="n">current_tokens</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">total_tokens</span>
        <span class="k">if</span> <span class="n">current_tokens</span> <span class="o">&lt;=</span> <span class="n">max_tokens</span><span class="p">:</span>
            <span class="k">return</span>  <span class="c1"># Already within limits
</span>            
        <span class="c1"># Sort blocks by type and relevance
</span>        <span class="n">typed_blocks</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">:</span> <span class="p">[],</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">USER</span><span class="p">:</span> <span class="p">[],</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">AGENT</span><span class="p">:</span> <span class="p">[],</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">:</span> <span class="p">[],</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">KNOWLEDGE</span><span class="p">:</span> <span class="p">[],</span>
            <span class="n">ContextType</span><span class="p">.</span><span class="n">TOOL</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="n">typed_blocks</span><span class="p">[</span><span class="n">block</span><span class="p">.</span><span class="nb">type</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            
        <span class="c1"># Always keep SYSTEM blocks
</span>        <span class="n">optimized_blocks</span> <span class="o">=</span> <span class="n">typed_blocks</span><span class="p">[</span><span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>
        <span class="n">used_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">optimized_blocks</span><span class="p">)</span>
        
        <span class="c1"># Keep most recent USER and AGENT blocks
</span>        <span class="k">for</span> <span class="n">block_type</span> <span class="ow">in</span> <span class="p">[</span><span class="n">ContextType</span><span class="p">.</span><span class="n">USER</span><span class="p">,</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">AGENT</span><span class="p">]:</span>
            <span class="n">blocks</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">typed_blocks</span><span class="p">[</span><span class="n">block_type</span><span class="p">],</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">timestamp</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            
            <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">blocks</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">used_tokens</span> <span class="o">+</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="o">&lt;=</span> <span class="n">max_tokens</span> <span class="o">*</span> <span class="mf">0.7</span><span class="p">:</span>  <span class="c1"># Keep 30% for tools/memory
</span>                    <span class="n">optimized_blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
                    <span class="n">used_tokens</span> <span class="o">+=</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span>
                    
        <span class="c1"># Use remaining space for TOOL, MEMORY and KNOWLEDGE blocks by relevance
</span>        <span class="n">remaining_types</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContextType</span><span class="p">.</span><span class="n">TOOL</span><span class="p">,</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">,</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">KNOWLEDGE</span><span class="p">]</span>
        <span class="n">remaining_blocks</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">block_type</span> <span class="ow">in</span> <span class="n">remaining_types</span><span class="p">:</span>
            <span class="n">remaining_blocks</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">typed_blocks</span><span class="p">[</span><span class="n">block_type</span><span class="p">])</span>
            
        <span class="c1"># Sort by relevance score
</span>        <span class="n">remaining_blocks</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">relevance_score</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">remaining_blocks</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">used_tokens</span> <span class="o">+</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="o">&lt;=</span> <span class="n">max_tokens</span><span class="p">:</span>
                <span class="n">optimized_blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
                <span class="n">used_tokens</span> <span class="o">+=</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span>
                
        <span class="c1"># Update session with optimized blocks
</span>        <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="o">=</span> <span class="n">optimized_blocks</span>
        <span class="n">session</span><span class="p">.</span><span class="nf">calculate_metrics</span><span class="p">()</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="contextual-relevance-scoring">Contextual Relevance Scoring</h3> <p>For production systems, simple relevance scoring isn’t sufficient. Let’s implement a more sophisticated relevance calculator:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>
<span class="kn">from</span> <span class="n">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>

<span class="k">class</span> <span class="nc">ContextualRelevanceCalculator</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Calculates contextual relevance between blocks using TF-IDF</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vectorizer</span> <span class="o">=</span> <span class="nc">TfidfVectorizer</span><span class="p">(</span><span class="n">stop_words</span><span class="o">=</span><span class="sh">'</span><span class="s">english</span><span class="sh">'</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">calculate_relevance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                           <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                           <span class="n">context_blocks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ContextBlock</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">Calculate relevance scores between query and context blocks</span><span class="sh">"""</span>
        <span class="n">texts</span> <span class="o">=</span> <span class="p">[</span><span class="n">query</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">block</span><span class="p">.</span><span class="n">content</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">context_blocks</span><span class="p">]</span>
        
        <span class="c1"># Handle empty texts
</span>        <span class="n">cleaned_texts</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span> <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">empty</span><span class="sh">"</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">]</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Transform texts to TF-IDF vectors
</span>            <span class="n">tfidf_matrix</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">vectorizer</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">cleaned_texts</span><span class="p">)</span>
            
            <span class="c1"># Calculate cosine similarity between query and each block
</span>            <span class="n">query_vector</span> <span class="o">=</span> <span class="n">tfidf_matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">block_vectors</span> <span class="o">=</span> <span class="n">tfidf_matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
            
            <span class="n">similarities</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">query_vector</span><span class="p">,</span> <span class="n">block_vectors</span><span class="p">).</span><span class="nf">flatten</span><span class="p">()</span>
            
            <span class="c1"># Create mapping of block IDs to relevance scores
</span>            <span class="n">relevance_scores</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">context_blocks</span><span class="p">):</span>
                <span class="n">relevance_scores</span><span class="p">[</span><span class="n">block</span><span class="p">.</span><span class="nb">id</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">similarities</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                
            <span class="k">return</span> <span class="n">relevance_scores</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="c1"># Fallback to default scores if vectorization fails
</span>            <span class="k">return</span> <span class="p">{</span><span class="n">block</span><span class="p">.</span><span class="nb">id</span><span class="p">:</span> <span class="mf">0.5</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">context_blocks</span><span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">update_relevance_scores</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                               <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                               <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span><span class="p">,</span>
                               <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Update relevance scores for all blocks in a session</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Session </span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s"> does not exist</span><span class="sh">"</span><span class="p">)</span>
            
        <span class="n">session</span> <span class="o">=</span> <span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        <span class="n">non_system_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="o">!=</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">]</span>
        
        <span class="n">relevance_scores</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">calculate_relevance</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">non_system_blocks</span><span class="p">)</span>
        
        <span class="c1"># Update blocks with new scores
</span>        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">non_system_blocks</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="nb">id</span> <span class="ow">in</span> <span class="n">relevance_scores</span><span class="p">:</span>
                <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">=</span> <span class="n">relevance_scores</span><span class="p">[</span><span class="n">block</span><span class="p">.</span><span class="nb">id</span><span class="p">]</span>
                
        <span class="c1"># System blocks always keep max relevance
</span>        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">:</span>
                <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">=</span> <span class="mf">1.0</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="performance-benchmarking-and-optimization">Performance Benchmarking and Optimization</h2> <p>Let’s implement a benchmarking suite for MCP:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">statistics</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">BenchmarkResult</span><span class="p">:</span>
    <span class="n">operation</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">times</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span>
    <span class="n">token_counts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">mean_time</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">statistics</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">times</span><span class="p">)</span>
    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">p95_time</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">statistics</span><span class="p">.</span><span class="nf">quantiles</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">times</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">20</span><span class="p">)[</span><span class="mi">18</span><span class="p">]</span>  <span class="c1"># 95th percentile
</span>    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">tokens_per_second</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="n">total_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">token_counts</span><span class="p">)</span>
        <span class="n">total_time</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">times</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">total_tokens</span> <span class="o">/</span> <span class="n">total_time</span> <span class="k">if</span> <span class="n">total_time</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>

<span class="k">class</span> <span class="nc">MCPBenchmark</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Benchmark performance of MCP operations</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span> <span class="o">=</span> <span class="n">context_manager</span>
        <span class="n">self</span><span class="p">.</span><span class="n">results</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_add_context_benchmark</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                      <span class="n">iterations</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> 
                                      <span class="n">content_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">500</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">BenchmarkResult</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Benchmark context addition operations</span><span class="sh">"""</span>
        <span class="n">session_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">create_session</span><span class="p">(</span><span class="sh">"</span><span class="s">benchmark</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">token_counts</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
            <span class="c1"># Generate content of specified size
</span>            <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Benchmark content iteration </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">word </span><span class="sh">"</span> <span class="o">*</span> <span class="n">content_size</span>
            
            <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">block_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
                <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
                <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
                <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">,</span>
                <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.5</span>
            <span class="p">)</span>
            <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            
            <span class="n">elapsed</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
            <span class="n">times</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">elapsed</span><span class="p">)</span>
            
            <span class="c1"># Get token count
</span>            <span class="n">block</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="n">blocks</span> 
                        <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">id</span> <span class="o">==</span> <span class="n">block_id</span><span class="p">)</span>
            <span class="n">token_counts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">token_count</span><span class="p">)</span>
            
        <span class="n">result</span> <span class="o">=</span> <span class="nc">BenchmarkResult</span><span class="p">(</span>
            <span class="n">operation</span><span class="o">=</span><span class="sh">"</span><span class="s">add_context</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">times</span><span class="o">=</span><span class="n">times</span><span class="p">,</span>
            <span class="n">token_counts</span><span class="o">=</span><span class="n">token_counts</span>
        <span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">add_context</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
        <span class="k">return</span> <span class="n">result</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_format_context_benchmark</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                        <span class="n">iterations</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
                                        <span class="n">block_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">BenchmarkResult</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Benchmark context formatting operations</span><span class="sh">"""</span>
        <span class="n">session_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">create_session</span><span class="p">(</span><span class="sh">"</span><span class="s">benchmark</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Prepare session with specified number of blocks
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">block_count</span><span class="p">):</span>
            <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Benchmark content block </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">word </span><span class="sh">"</span> <span class="o">*</span> <span class="mi">100</span>
            <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
                <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
                <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
                <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">,</span>
                <span class="n">relevance_score</span><span class="o">=</span><span class="mf">0.5</span>
            <span class="p">)</span>
            
        <span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">token_counts</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
            <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">formatted</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">get_formatted_context</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
            <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            
            <span class="n">elapsed</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
            <span class="n">times</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">elapsed</span><span class="p">)</span>
            
            <span class="c1"># Approximate token count of formatted output
</span>            <span class="n">token_counts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">formatted</span><span class="p">.</span><span class="nf">split</span><span class="p">()))</span>
            
        <span class="n">result</span> <span class="o">=</span> <span class="nc">BenchmarkResult</span><span class="p">(</span>
            <span class="n">operation</span><span class="o">=</span><span class="sh">"</span><span class="s">format_context</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">times</span><span class="o">=</span><span class="n">times</span><span class="p">,</span>
            <span class="n">token_counts</span><span class="o">=</span><span class="n">token_counts</span>
        <span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">format_context</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
        <span class="k">return</span> <span class="n">result</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_prune_context_benchmark</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                       <span class="n">iterations</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
                                       <span class="n">initial_blocks</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">BenchmarkResult</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Benchmark context pruning operations</span><span class="sh">"""</span>
        <span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">token_counts</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">iterations</span><span class="p">):</span>
            <span class="c1"># Create new session for each iteration
</span>            <span class="n">session_id</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">create_session</span><span class="p">(</span><span class="sh">"</span><span class="s">benchmark</span><span class="sh">"</span><span class="p">)</span>
            
            <span class="c1"># Add initial blocks
</span>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">initial_blocks</span><span class="p">):</span>
                <span class="n">content</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Benchmark content block </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">word </span><span class="sh">"</span> <span class="o">*</span> <span class="mi">50</span>
                <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">add_context</span><span class="p">(</span>
                    <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
                    <span class="n">content</span><span class="o">=</span><span class="n">content</span><span class="p">,</span>
                    <span class="n">context_type</span><span class="o">=</span><span class="n">ContextType</span><span class="p">.</span><span class="n">MEMORY</span><span class="p">,</span>
                    <span class="n">relevance_score</span><span class="o">=</span><span class="n">j</span><span class="o">/</span><span class="n">initial_blocks</span>  <span class="c1"># Vary relevance
</span>                <span class="p">)</span>
                
            <span class="c1"># Force context saturation to trigger pruning
</span>            <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="n">metrics</span><span class="p">.</span><span class="n">context_saturation</span> <span class="o">=</span> <span class="mf">0.95</span>
            
            <span class="c1"># Measure pruning operation
</span>            <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="nf">_prune_context</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
            <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            
            <span class="n">elapsed</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
            <span class="n">times</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">elapsed</span><span class="p">)</span>
            
            <span class="c1"># Count tokens in pruned context
</span>            <span class="n">token_count</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> 
                             <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">].</span><span class="n">blocks</span><span class="p">)</span>
            <span class="n">token_counts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">token_count</span><span class="p">)</span>
            
        <span class="n">result</span> <span class="o">=</span> <span class="nc">BenchmarkResult</span><span class="p">(</span>
            <span class="n">operation</span><span class="o">=</span><span class="sh">"</span><span class="s">prune_context</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">times</span><span class="o">=</span><span class="n">times</span><span class="p">,</span>
            <span class="n">token_counts</span><span class="o">=</span><span class="n">token_counts</span>
        <span class="p">)</span>
        
        <span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">prune_context</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
        <span class="k">return</span> <span class="n">result</span>
    
    <span class="k">def</span> <span class="nf">plot_results</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">save_path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Plot benchmark results</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">No benchmark results to plot</span><span class="sh">"</span><span class="p">)</span>
            
        <span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
        
        <span class="n">operations</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
        
        <span class="c1"># Plot 1: Mean operation time
</span>        <span class="n">mean_times</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="n">op</span><span class="p">].</span><span class="n">mean_time</span> <span class="k">for</span> <span class="n">op</span> <span class="ow">in</span> <span class="n">operations</span><span class="p">]</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">bar</span><span class="p">(</span><span class="n">operations</span><span class="p">,</span> <span class="n">mean_times</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Mean Operation Time (s)</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Seconds</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># Plot 2: 95th percentile operation time
</span>        <span class="n">p95_times</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="n">op</span><span class="p">].</span><span class="n">p95_time</span> <span class="k">for</span> <span class="n">op</span> <span class="ow">in</span> <span class="n">operations</span><span class="p">]</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">bar</span><span class="p">(</span><span class="n">operations</span><span class="p">,</span> <span class="n">p95_times</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">P95 Operation Time (s)</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Seconds</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># Plot 3: Tokens per second
</span>        <span class="n">tps</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">results</span><span class="p">[</span><span class="n">op</span><span class="p">].</span><span class="n">tokens_per_second</span> <span class="k">for</span> <span class="n">op</span> <span class="ow">in</span> <span class="n">operations</span><span class="p">]</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">bar</span><span class="p">(</span><span class="n">operations</span><span class="p">,</span> <span class="n">tps</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Throughput (tokens/s)</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axs</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Tokens per Second</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">save_path</span><span class="p">:</span>
            <span class="n">plt</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="n">save_path</span><span class="p">)</span>
        
        <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="context-aware-mcp-implementation-in-production-systems">Context-Aware MCP Implementation in Production Systems</h2> <p>Implementing MCP in production requires careful consideration of scaling, memory management, and performance optimization. Here’s how to implement these features in real-world systems:</p> <p><br/></p> <h3 id="distributed-context-store">Distributed Context Store</h3> <p>For large-scale deployments, a centralized context manager won’t suffice. Here’s a distributed MCP store implementation that scales horizontally:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">redis</span>
<span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Union</span>

<span class="k">class</span> <span class="nc">DistributedContextStore</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Distributed context store using Redis</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">redis_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ttl</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3600</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="nf">from_url</span><span class="p">(</span><span class="n">redis_url</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ttl</span> <span class="o">=</span> <span class="n">ttl</span>  <span class="c1"># Default TTL in seconds
</span>    
    <span class="k">def</span> <span class="nf">_session_key</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Generate Redis key for a session</span><span class="sh">"""</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">mcp:session:</span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="sh">"</span>
    
    <span class="k">def</span> <span class="nf">_block_key</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">block_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Generate Redis key for a block</span><span class="sh">"""</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">mcp:block:</span><span class="si">{</span><span class="n">session_id</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">block_id</span><span class="si">}</span><span class="sh">"</span>
    
    <span class="k">def</span> <span class="nf">store_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Store session metadata in Redis</span><span class="sh">"""</span>
        <span class="n">session_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_session_key</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="n">session_id</span><span class="p">)</span>
        
        <span class="c1"># Store main session metadata
</span>        <span class="n">session_data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">agent_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">agent_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">version</span><span class="sh">"</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">version</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">trace_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">session</span><span class="p">.</span><span class="n">trace_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">:</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="n">metrics</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">block_ids</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">b</span><span class="p">.</span><span class="nb">id</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">]</span>
        <span class="p">}</span>
        
        <span class="c1"># Store in Redis with pipeline for performance
</span>        <span class="n">pipe</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">pipeline</span><span class="p">()</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">hmset</span><span class="p">(</span><span class="n">session_key</span><span class="p">,</span> <span class="n">session_data</span><span class="p">)</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">expire</span><span class="p">(</span><span class="n">session_key</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">ttl</span><span class="p">)</span>
        
        <span class="c1"># Store each block separately for efficient partial updates
</span>        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="n">block_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_block_key</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="n">session_id</span><span class="p">,</span> <span class="n">block</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>
            <span class="n">block_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">pipe</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">block_key</span><span class="p">,</span> <span class="n">block_data</span><span class="p">)</span>
            <span class="n">pipe</span><span class="p">.</span><span class="nf">expire</span><span class="p">(</span><span class="n">block_key</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">ttl</span><span class="p">)</span>
            
        <span class="n">pipe</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">retrieve_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ContextPackage</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">Retrieve complete session from Redis</span><span class="sh">"""</span>
        <span class="n">session_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_session_key</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
        
        <span class="c1"># Get session metadata
</span>        <span class="n">session_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">hgetall</span><span class="p">(</span><span class="n">session_key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">session_data</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
            
        <span class="c1"># Decode metrics
</span>        <span class="n">metrics</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">metrics</span><span class="sh">"</span><span class="p">])</span>
        
        <span class="c1"># Get block IDs and retrieve blocks
</span>        <span class="n">block_ids</span> <span class="o">=</span> <span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">block_ids</span><span class="sh">"</span><span class="p">].</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="n">pipe</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">pipeline</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">block_id</span> <span class="ow">in</span> <span class="n">block_ids</span><span class="p">:</span>
            <span class="n">block_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_block_key</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="n">block_id</span><span class="p">)</span>
            <span class="n">pipe</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">block_key</span><span class="p">)</span>
            
        <span class="n">block_data_list</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">block_data</span> <span class="ow">in</span> <span class="n">block_data_list</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">block_data</span><span class="p">:</span>
                <span class="n">block</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">block_data</span><span class="p">)</span>
                <span class="n">blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
                
        <span class="c1"># Reconstruct session
</span>        <span class="k">return</span> <span class="nc">ContextPackage</span><span class="p">(</span>
            <span class="n">session_id</span><span class="o">=</span><span class="n">session_id</span><span class="p">,</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">agent_id</span><span class="sh">"</span><span class="p">].</span><span class="nf">decode</span><span class="p">(),</span>
            <span class="n">blocks</span><span class="o">=</span><span class="n">blocks</span><span class="p">,</span>
            <span class="n">metrics</span><span class="o">=</span><span class="n">metrics</span><span class="p">,</span>
            <span class="n">version</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">version</span><span class="sh">"</span><span class="p">]),</span>
            <span class="n">trace_id</span><span class="o">=</span><span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">trace_id</span><span class="sh">"</span><span class="p">].</span><span class="nf">decode</span><span class="p">()</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">update_block</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="n">ContextBlock</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Update a specific block in a session</span><span class="sh">"""</span>
        <span class="n">block_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_block_key</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="n">block</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>
        <span class="n">block_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        
        <span class="n">pipe</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">pipeline</span><span class="p">()</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">block_key</span><span class="p">,</span> <span class="n">block_data</span><span class="p">)</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">expire</span><span class="p">(</span><span class="n">block_key</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">ttl</span><span class="p">)</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">delete_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Delete a session and all its blocks</span><span class="sh">"""</span>
        <span class="n">session_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_session_key</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
        
        <span class="c1"># Get block IDs
</span>        <span class="n">session_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">hgetall</span><span class="p">(</span><span class="n">session_key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">session_data</span><span class="p">:</span>
            <span class="k">return</span>
            
        <span class="n">block_ids</span> <span class="o">=</span> <span class="n">session_data</span><span class="p">[</span><span class="sa">b</span><span class="sh">"</span><span class="s">block_ids</span><span class="sh">"</span><span class="p">].</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span>
        
        <span class="c1"># Delete all blocks and session
</span>        <span class="n">pipe</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">pipeline</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">block_id</span> <span class="ow">in</span> <span class="n">block_ids</span><span class="p">:</span>
            <span class="n">block_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_block_key</span><span class="p">(</span><span class="n">session_id</span><span class="p">,</span> <span class="n">block_id</span><span class="p">)</span>
            <span class="n">pipe</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">block_key</span><span class="p">)</span>
            
        <span class="n">pipe</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">session_key</span><span class="p">)</span>
        <span class="n">pipe</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>
</code></pre></div></div> <p><br/></p> <h3 id="real-time-context-optimization">Real-time Context Optimization</h3> <p>In high-volume systems, real-time context optimization becomes critical for cost and performance reasons:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="k">class</span> <span class="nc">RealTimeContextOptimizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Real-time context optimization strategies for production systems</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span><span class="p">,</span>
                <span class="n">token_budget</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span>
                <span class="n">optimization_interval</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>  <span class="c1"># seconds
</span>                <span class="n">relevance_decay_factor</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.95</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span> <span class="o">=</span> <span class="n">context_manager</span>
        <span class="n">self</span><span class="p">.</span><span class="n">token_budget</span> <span class="o">=</span> <span class="n">token_budget</span>
        <span class="n">self</span><span class="p">.</span><span class="n">optimization_interval</span> <span class="o">=</span> <span class="n">optimization_interval</span>
        <span class="n">self</span><span class="p">.</span><span class="n">relevance_decay_factor</span> <span class="o">=</span> <span class="n">relevance_decay_factor</span>
        <span class="n">self</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">self</span><span class="p">.</span><span class="n">performance_metrics</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">(</span><span class="n">maxlen</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>  <span class="c1"># Keep last 1000 metrics
</span>    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">start_optimization_loop</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Start continuous optimization in background</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">running</span><span class="p">:</span>
                <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
                
                <span class="c1"># Perform optimization
</span>                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">optimize_session</span><span class="p">(</span><span class="n">session_id</span><span class="p">)</span>
                
                <span class="c1"># Measure performance
</span>                <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="n">performance_metrics</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>
                
                <span class="c1"># Sleep until next interval
</span>                <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">optimization_interval</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Optimization loop error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
    
    <span class="k">def</span> <span class="nf">stop_optimization_loop</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Stop background optimization</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">optimize_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Perform a single optimization cycle</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">:</span>
            <span class="k">return</span>
            
        <span class="n">session</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        
        <span class="c1"># Apply time-based relevance decay
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">_apply_relevance_decay</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        
        <span class="c1"># Update relevance based on recency
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">_update_recency_relevance</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        
        <span class="c1"># Enforce token budget
</span>        <span class="k">if</span> <span class="n">session</span><span class="p">.</span><span class="n">metrics</span><span class="p">.</span><span class="n">total_tokens</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">token_budget</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_enforce_token_budget</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
            
        <span class="c1"># Re-calculate metrics
</span>        <span class="n">session</span><span class="p">.</span><span class="nf">calculate_metrics</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">_apply_relevance_decay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Apply time-based decay to relevance scores</span><span class="sh">"""</span>
        <span class="n">current_time</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="c1"># Don't decay system blocks
</span>            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">:</span>
                <span class="k">continue</span>
                
            <span class="c1"># Calculate age in seconds
</span>            <span class="n">age_seconds</span> <span class="o">=</span> <span class="p">(</span><span class="n">current_time</span> <span class="o">-</span> <span class="n">block</span><span class="p">.</span><span class="n">timestamp</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>
            
            <span class="c1"># Apply exponential decay
</span>            <span class="n">decay</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">relevance_decay_factor</span> <span class="o">**</span> <span class="p">(</span><span class="n">age_seconds</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span>  <span class="c1"># Decay per minute
</span>            <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">*=</span> <span class="n">decay</span>
            
            <span class="c1"># Ensure minimum relevance
</span>            <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_update_recency_relevance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Boost relevance of recent conversational turns</span><span class="sh">"""</span>
        <span class="c1"># Sort blocks by timestamp
</span>        <span class="n">recent_blocks</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span>
            <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="ow">in</span> <span class="p">(</span><span class="n">ContextType</span><span class="p">.</span><span class="n">USER</span><span class="p">,</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">AGENT</span><span class="p">)],</span>
            <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">timestamp</span><span class="p">,</span>
            <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span>
        <span class="p">)</span>
        
        <span class="c1"># Boost most recent conversation turns
</span>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">recent_blocks</span><span class="p">[:</span><span class="mi">10</span><span class="p">]):</span>  <span class="c1"># Consider last 10 turns
</span>            <span class="n">recency_boost</span> <span class="o">=</span> <span class="mf">0.95</span> <span class="o">**</span> <span class="n">i</span>  <span class="c1"># Exponential decay based on recency
</span>            <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">block</span><span class="p">.</span><span class="n">relevance_score</span> <span class="o">+</span> <span class="n">recency_boost</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_enforce_token_budget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Ensure token count stays within budget</span><span class="sh">"""</span>
        <span class="c1"># Priority order: SYSTEM &gt; recent USER/AGENT &gt; TOOL &gt; MEMORY &gt; KNOWLEDGE
</span>        <span class="n">system_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">]</span>
        
        <span class="c1"># Get non-system blocks, sorted by relevance
</span>        <span class="n">non_system_blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nb">type</span> <span class="o">!=</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">]</span>
        <span class="n">non_system_blocks</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">b</span><span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">relevance_score</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="c1"># Calculate tokens in system blocks
</span>        <span class="n">system_tokens</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">token_count</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">system_blocks</span><span class="p">)</span>
        
        <span class="c1"># Calculate how many tokens we can use for non-system blocks
</span>        <span class="n">available_tokens</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">token_budget</span> <span class="o">-</span> <span class="n">system_tokens</span>
        
        <span class="c1"># Keep adding blocks until we hit the limit
</span>        <span class="n">kept_blocks</span> <span class="o">=</span> <span class="n">system_blocks</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
        <span class="n">used_tokens</span> <span class="o">=</span> <span class="n">system_tokens</span>
        
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">non_system_blocks</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">used_tokens</span> <span class="o">+</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">token_budget</span><span class="p">:</span>
                <span class="n">kept_blocks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
                <span class="n">used_tokens</span> <span class="o">+=</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span>
            <span class="c1"># else discard this block
</span>                
        <span class="c1"># Update session blocks
</span>        <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="o">=</span> <span class="n">kept_blocks</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="hypothetical-implementation-example-telecom-customer-service">Hypothetical Implementation Example: Telecom Customer Service</h2> <p>Let’s explore a hypothetical scenario showing how MCP implementation could transform a telecom customer service system handling 50,000+ customer interactions daily: (I am working on a more realistic experimental setup, the result from which I would share in the coming weeks, stay tuned!) <br/> <br/></p> <h3 id="hypothetical-baseline-before-mcp">Hypothetical Baseline (Before MCP)</h3> <p>Consider a telecom company using a conventional LLM-based customer service system with these theoretical performance characteristics:</p> <ol> <li><strong>Average completion time</strong>: 12.5 seconds per query</li> <li><strong>Context window utilization</strong>: 32% (wasted tokens)</li> <li><strong>Coherence over multi-turn conversations</strong>: 68% (measured by user satisfaction)</li> <li><strong>Agent handoff success rate</strong>: 52% (context lost during transfers)</li> <li><strong>Daily token costs</strong>: $4,200 (for 50,000 interactions)</li> </ol> <p><br/> <br/></p> <h3 id="hypothetical-mcp-implementation-approach">Hypothetical MCP Implementation Approach</h3> <p>In this scenario, we could implement MCP and optimize context management with the following approach:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">telecom_service_enhancement</span><span class="p">():</span>
    <span class="c1"># Initialize MCP components
</span>    <span class="n">redis_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">redis://redis-master.production:6379/0</span><span class="sh">"</span>
    <span class="n">context_store</span> <span class="o">=</span> <span class="nc">DistributedContextStore</span><span class="p">(</span><span class="n">redis_url</span><span class="p">)</span>
    
    <span class="c1"># Create optimized context manager
</span>    <span class="n">optimized_manager</span> <span class="o">=</span> <span class="nc">ContextManager</span><span class="p">(</span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">8192</span><span class="p">)</span>
    
    <span class="c1"># Inject relevance calculator
</span>    <span class="n">relevance_calculator</span> <span class="o">=</span> <span class="nc">ContextualRelevanceCalculator</span><span class="p">()</span>
    
    <span class="c1"># Initialize real-time optimizer
</span>    <span class="n">optimizer</span> <span class="o">=</span> <span class="nc">RealTimeContextOptimizer</span><span class="p">(</span>
        <span class="n">context_manager</span><span class="o">=</span><span class="n">optimized_manager</span><span class="p">,</span>
        <span class="n">token_budget</span><span class="o">=</span><span class="mi">4096</span><span class="p">,</span>
        <span class="n">optimization_interval</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span>
        <span class="n">relevance_decay_factor</span><span class="o">=</span><span class="mf">0.98</span>
    <span class="p">)</span>
    
    <span class="c1"># Create agents with MCP
</span>    <span class="n">intent_agent</span> <span class="o">=</span> <span class="nc">MCPEnabledIntentAgent</span><span class="p">(</span>
        <span class="n">llm_client</span><span class="o">=</span><span class="n">anthropic_client</span><span class="p">,</span>
        <span class="n">agent_role</span><span class="o">=</span><span class="sh">"</span><span class="s">intent_agent</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">context_manager</span><span class="o">=</span><span class="n">optimized_manager</span>
    <span class="p">)</span>
    
    <span class="n">technical_agent</span> <span class="o">=</span> <span class="nc">MCPEnabledTechnicalAgent</span><span class="p">(</span>
        <span class="n">llm_client</span><span class="o">=</span><span class="n">anthropic_client</span><span class="p">,</span>
        <span class="n">network_api</span><span class="o">=</span><span class="n">network_api</span><span class="p">,</span>
        <span class="n">context_manager</span><span class="o">=</span><span class="n">optimized_manager</span>
    <span class="p">)</span>
    
    <span class="c1"># Create coordinator with context transfer capabilities
</span>    <span class="n">coordinator</span> <span class="o">=</span> <span class="nc">AgentCoordinator</span><span class="p">(</span>
        <span class="n">agents</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">intent</span><span class="sh">"</span><span class="p">:</span> <span class="n">intent_agent</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">technical</span><span class="sh">"</span><span class="p">:</span> <span class="n">technical_agent</span><span class="p">,</span>
            <span class="c1"># Other specialized agents
</span>        <span class="p">},</span>
        <span class="n">context_manager</span><span class="o">=</span><span class="n">optimized_manager</span><span class="p">,</span>
        <span class="n">context_store</span><span class="o">=</span><span class="n">context_store</span>
    <span class="p">)</span>
    
    <span class="c1"># Initialize metrics collection
</span>    <span class="n">metrics_collector</span> <span class="o">=</span> <span class="nc">MetricsCollector</span><span class="p">(</span>
        <span class="n">prometheus_endpoint</span><span class="o">=</span><span class="sh">"</span><span class="s">http://prometheus.monitoring:9090/metrics</span><span class="sh">"</span>
    <span class="p">)</span>
    
    <span class="c1"># Start service
</span>    <span class="k">return</span> <span class="k">await</span> <span class="nf">start_service</span><span class="p">(</span><span class="n">coordinator</span><span class="p">,</span> <span class="n">metrics_collector</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="projected-mcp-implementation-results">Projected MCP Implementation Results</h3> <p>Based on the architecture described above, this hypothetical MCP-enabled system could potentially achieve these performance improvements:</p> <ol> <li><strong>Average completion time</strong>: Potentially reduced seconds per query</li> <li><strong>Context window utilization</strong>: Could increase to X%</li> <li><strong>Coherence over multi-turn conversations</strong>: Might improve to Y%</li> <li><strong>Agent handoff success rate</strong>: Could increase to Z%</li> <li><strong>Daily token costs</strong>: Potentially reduced to $P (Q% cost savings)</li> </ol> <p>These theoretical improvements would result from:</p> <ol> <li>Efficient context packaging and transmission between agents</li> <li>Dynamic relevance scoring to prioritize important information</li> <li>Standardized context exchange protocols enabling seamless agent handoffs</li> <li>Automatic optimization of context window utilization</li> <li>Reduced token waste through intelligent pruning</li> </ol> <p><br/> <br/></p> <h2 id="key-performance-considerations">Key Performance Considerations</h2> <p>To implement MCP in your own production system, consider these performance best practices:</p> <p><br/></p> <h3 id="memory-management">Memory Management</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MCPMemoryOptimizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Optimizes memory usage for MCP in production</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context_manager</span><span class="p">:</span> <span class="n">ContextManager</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span> <span class="o">=</span> <span class="n">context_manager</span>
        
    <span class="k">def</span> <span class="nf">optimize_memory_usage</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Optimize memory usage and return memory saved in MB</span><span class="sh">"""</span>
        <span class="n">session</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">context_manager</span><span class="p">.</span><span class="n">sessions</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
        
        <span class="c1"># Calculate current memory usage
</span>        <span class="n">initial_memory</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_estimate_memory_usage</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        
        <span class="c1"># Perform optimizations
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">_deduplicate_content</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_compress_metadata</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_truncate_long_blocks</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        
        <span class="c1"># Calculate new memory usage
</span>        <span class="n">final_memory</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_estimate_memory_usage</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
        
        <span class="c1"># Return memory saved in MB
</span>        <span class="nf">return </span><span class="p">(</span><span class="n">initial_memory</span> <span class="o">-</span> <span class="n">final_memory</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_estimate_memory_usage</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Estimate memory usage in bytes</span><span class="sh">"""</span>
        <span class="n">memory_usage</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1"># Session metadata
</span>        <span class="n">memory_usage</span> <span class="o">+=</span> <span class="nf">len</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="n">session_id</span><span class="p">)</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="n">agent_id</span><span class="p">)</span> <span class="o">+</span> <span class="mi">16</span>  <span class="c1"># Base overhead
</span>        
        <span class="c1"># Blocks
</span>        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="c1"># Content is the main memory user
</span>            <span class="n">memory_usage</span> <span class="o">+=</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">content</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>  <span class="c1"># Unicode overhead
</span>            
            <span class="c1"># Metadata
</span>            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">memory_usage</span> <span class="o">+=</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">+</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
                    
            <span class="c1"># Other fields
</span>            <span class="n">memory_usage</span> <span class="o">+=</span> <span class="mi">64</span>  <span class="c1"># Base block overhead
</span>            
        <span class="k">return</span> <span class="n">memory_usage</span>
    
    <span class="k">def</span> <span class="nf">_deduplicate_content</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Remove duplicate content in blocks</span><span class="sh">"""</span>
        <span class="n">content_set</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">blocks_to_keep</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="c1"># Always keep system blocks
</span>            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">ContextType</span><span class="p">.</span><span class="n">SYSTEM</span><span class="p">:</span>
                <span class="n">blocks_to_keep</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
                <span class="k">continue</span>
                
            <span class="c1"># Check for duplicate content
</span>            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="n">content</span> <span class="ow">in</span> <span class="n">content_set</span><span class="p">:</span>
                <span class="k">continue</span>  <span class="c1"># Skip duplicate
</span>                
            <span class="n">content_set</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
            <span class="n">blocks_to_keep</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            
        <span class="n">session</span><span class="p">.</span><span class="n">blocks</span> <span class="o">=</span> <span class="n">blocks_to_keep</span>
    
    <span class="k">def</span> <span class="nf">_compress_metadata</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Compress metadata by removing unnecessary fields</span><span class="sh">"""</span>
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">:</span>
                <span class="k">continue</span>
                
            <span class="c1"># Remove empty values
</span>            <span class="n">block</span><span class="p">.</span><span class="n">metadata</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">v</span><span class="p">}</span>
            
            <span class="c1"># Truncate long values
</span>            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
                    <span class="n">block</span><span class="p">.</span><span class="n">metadata</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">[:</span><span class="mi">97</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span>
    
    <span class="k">def</span> <span class="nf">_truncate_long_blocks</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session</span><span class="p">:</span> <span class="n">ContextPackage</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Truncate extremely long content blocks</span><span class="sh">"""</span>
        <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">session</span><span class="p">.</span><span class="n">blocks</span><span class="p">:</span>
            <span class="c1"># Truncate blocks longer than 1000 tokens (approximately)
</span>            <span class="k">if</span> <span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">:</span>
                <span class="n">words</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
                <span class="n">truncated_content</span> <span class="o">=</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">words</span><span class="p">[:</span><span class="mi">950</span><span class="p">])</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> [... content truncated ...]</span><span class="sh">"</span>
                <span class="n">block</span><span class="p">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">truncated_content</span>
                <span class="n">block</span><span class="p">.</span><span class="n">token_count</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">truncated_content</span><span class="p">.</span><span class="nf">split</span><span class="p">())</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="concurrency-management">Concurrency Management</h3> <p>For high-throughput systems, managing concurrency is critical:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">contextlib</span> <span class="kn">import</span> <span class="n">asynccontextmanager</span>

<span class="k">class</span> <span class="nc">MCPConcurrencyManager</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Manages concurrent access to MCP resources</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                <span class="n">max_concurrent_sessions</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
                <span class="n">max_concurrent_contexts</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session_semaphore</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_sessions</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">context_semaphore</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_contexts</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="nd">@asynccontextmanager</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">session_context</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Manage concurrent access to a session</span><span class="sh">"""</span>
        <span class="c1"># Create lock for this session if doesn't exist
</span>        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
            
        <span class="c1"># Acquire session semaphore and lock
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">session_semaphore</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span><span class="p">[</span><span class="n">session_id</span><span class="p">]:</span>
                <span class="k">yield</span>
                
    <span class="nd">@asynccontextmanager</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">context_operation</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Manage concurrent context operations</span><span class="sh">"""</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">context_semaphore</span><span class="p">:</span>
            <span class="k">yield</span>
            
    <span class="k">def</span> <span class="nf">cleanup_session</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">session_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Remove locks for a session when it</span><span class="sh">'</span><span class="s">s no longer needed</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">session_id</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span><span class="p">:</span>
            <span class="k">del</span> <span class="n">self</span><span class="p">.</span><span class="n">session_locks</span><span class="p">[</span><span class="n">session_id</span><span class="p">]</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="production-deployment-strategy">Production Deployment Strategy</h3> <p>To deploy MCP in production, we recommend this phased approach:</p> <ol> <li><strong>Pilot phase</strong>: Implement MCP for a single agent type with low traffic</li> <li><strong>Gradual rollout</strong>: Extend to specialized agents one by one</li> <li><strong>A/B testing</strong>: Compare performance metrics between MCP and non-MCP systems</li> <li><strong>Full deployment</strong>: Scale horizontally with distributed context stores</li> <li><strong>Continuous optimization</strong>: Implement real-time monitors to tune parameters</li> </ol> <p>The pilot deployment may look like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">pilot_deployment</span><span class="p">():</span>
    <span class="c1"># Initialize distributed components with lower capacity
</span>    <span class="n">redis_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">redis://redis-staging:6379/0</span><span class="sh">"</span>
    <span class="n">context_store</span> <span class="o">=</span> <span class="nc">DistributedContextStore</span><span class="p">(</span><span class="n">redis_url</span><span class="p">,</span> <span class="n">ttl</span><span class="o">=</span><span class="mi">1800</span><span class="p">)</span>  <span class="c1"># 30 minute TTL
</span>    
    <span class="c1"># Create context manager with conservative limits
</span>    <span class="n">context_manager</span> <span class="o">=</span> <span class="nc">ContextManager</span><span class="p">(</span><span class="n">max_tokens</span><span class="o">=</span><span class="mi">4096</span><span class="p">)</span>
    
    <span class="c1"># Configure for 5% of traffic
</span>    <span class="n">traffic_ratio</span> <span class="o">=</span> <span class="mf">0.05</span>
    
    <span class="c1"># Create MCP-enabled intent agent
</span>    <span class="n">intent_agent</span> <span class="o">=</span> <span class="nc">MCPEnabledIntentAgent</span><span class="p">(</span>
        <span class="n">llm_client</span><span class="o">=</span><span class="n">anthropic_client</span><span class="p">,</span>
        <span class="n">agent_role</span><span class="o">=</span><span class="sh">"</span><span class="s">intent_agent</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">context_manager</span><span class="o">=</span><span class="n">context_manager</span>
    <span class="p">)</span>
    
    <span class="c1"># Create monitoring
</span>    <span class="n">monitor</span> <span class="o">=</span> <span class="nc">ProductionMonitor</span><span class="p">(</span>
        <span class="n">datadog_api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">YOUR_API_KEY</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">experiment_name</span><span class="o">=</span><span class="sh">"</span><span class="s">mcp_pilot</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">sample_rate</span><span class="o">=</span><span class="mf">0.1</span>  <span class="c1"># Sample 10% of interactions for detailed analysis
</span>    <span class="p">)</span>
    
    <span class="c1"># Start pilot with traffic splitting
</span>    <span class="k">return</span> <span class="k">await</span> <span class="nf">start_pilot</span><span class="p">(</span>
        <span class="n">agent</span><span class="o">=</span><span class="n">intent_agent</span><span class="p">,</span>
        <span class="n">context_store</span><span class="o">=</span><span class="n">context_store</span><span class="p">,</span>
        <span class="n">traffic_ratio</span><span class="o">=</span><span class="n">traffic_ratio</span><span class="p">,</span>
        <span class="n">monitor</span><span class="o">=</span><span class="n">monitor</span>
    <span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="concluding-thoughts">Concluding thoughts</h2> <p>Model Context Protocol represents a significant advance in autonomous multi-agent system architecture. By standardizing context management, MCP solves critical challenges around context optimization, agent collaboration, and memory management.</p> <p>Key takeaways from our implementation:</p> <ol> <li><strong>Standardization matters</strong>: Unified context protocols enable seamless interoperability between diverse agent systems</li> <li><strong>Memory optimization is critical</strong>: Real-time context management directly impacts cost and performance</li> <li><strong>Production deployments require careful scaling</strong>: Distributed context stores and concurrency management are essential</li> <li><strong>Relevance scoring drives optimization</strong>: Dynamic scoring algorithms significantly improve context window utilization</li> </ol> <p>While this telecom example is hypothetical, the architectural patterns and implementation strategies described show how MCP could deliver tangible business benefits through reduced costs, faster responses, and improved customer satisfaction in real-world applications.</p> <p>As autonomous agent systems continue to evolve, Model Context Protocol will likely become a standard component of production agent architectures, enabling more sophisticated agent interactions and improved performance characteristics.</p> <p>Future directions for MCP development include:</p> <ol> <li><strong>Cross-modal context representation</strong>: Supporting efficient encoding of multimodal content</li> <li><strong>Federated context management</strong>: Enabling privacy-preserving context sharing across organizations</li> <li><strong>Self-optimizing context strategies</strong>: Using reinforcement learning to dynamically tune context parameters</li> </ol> <p>By implementing MCP in your own systems, you can achieve similar performance improvements while establishing a foundation for future enhancements to your agent architecture.</p> <hr/> <p><em>Want to learn more about implementing MCP in your organization? Check out my previous articles on <a href="https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system/">autonomous multi-agent systems</a> and <a href="https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm/">context-aware data pipelines</a>.</em></p>]]></content><author><name></name></author><category term="architecture"/><category term="genai"/><category term="system-design"/><category term="genai"/><category term="architecture"/><category term="system-design"/><summary type="html"><![CDATA[Discover how to implement Model Context Protocol (MCP) in autonomous multi-agent systems with this technical deep dive. Learn advanced context optimization strategies, distributed architecture patterns, and performance benchmarks with complete Python implementations. Includes hypothetical telecom implementation scenarios showing potential optimization benefits.]]></summary></entry><entry><title type="html">Engineering Autonomous Multi-Agent Systems - A Technical Deep Dive into Telecom Customer Service</title><link href="https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system/" rel="alternate" type="text/html" title="Engineering Autonomous Multi-Agent Systems - A Technical Deep Dive into Telecom Customer Service"/><published>2025-01-05T11:23:37+00:00</published><updated>2025-01-05T11:23:37+00:00</updated><id>https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system</id><content type="html" xml:base="https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system/"><![CDATA[<blockquote> <p>Note: This blog post covers generative AI / autonomous agents. For traditional software agents system’s view refer this post for Banking/ FSI <a href="https://subhadipmitra.com/blog/2024/retail-bank-multi-agent-system/">here</a>.</p> </blockquote> <p>Remember that time you called customer service and had to explain your problem five times to five different people? Well, welcome to the world of autonomous AI agents, where we’re teaching machines to do better (and maybe remember things longer than a goldfish).</p> <p>In this technical deep dive, we’re going to explore how to build a multi-agent system that not only handles customer service but does it with style. Think of it as teaching a group of AI agents to work together like a well-oiled machine, or at least better than that one team meeting where everyone talked over each other.</p> <p>We’ll cover everything from sophisticated memory systems (because even AI needs help remembering things) to prompt engineering that actually evolves (unlike my New Year’s resolutions). Get ready for some serious code, real-world examples, and maybe a few dad jokes along the way.</p> <p><br/> <br/></p> <h2 id="system-architecture">System Architecture</h2> <p>Our autonomous agent system comprises multiple specialized agents, each powered by LLMs but trained for specific tasks. The system architecture is designed to handle complex customer queries while maintaining context and ensuring consistent, accurate responses.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/telco-genai-agents-system-architecture-gemini-480.webp 480w,/assets/img/blog/telco-genai-agents-system-architecture-gemini-800.webp 800w,/assets/img/blog/telco-genai-agents-system-architecture-gemini-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/telco-genai-agents-system-architecture-gemini.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <h3 id="key-components">Key Components</h3> <ol> <li>Foundation Model Layer <ul> <li>Handles core language understanding and generation</li> <li>Enables zero-shot and few-shot learning capabilities</li> <li>Provides base reasoning capabilities for agents</li> </ul> </li> <li>Agent Controller <ul> <li>Orchestrates agent interactions</li> <li>Manages task decomposition and planning</li> <li>Monitors agent performance and handles failures</li> </ul> </li> <li>Specialized Agents <ul> <li>Intent Analysis Agent: Understands customer needs</li> <li>Technical Diagnostic Agent: Handles network issues</li> <li>Knowledge Agents: Manage policy and product information</li> </ul> </li> </ol> <p>Let’s dive into the implementation details.</p> <p><br/> <br/></p> <h2 id="agent-implementation">Agent Implementation</h2> <p>Here’s how we implement our core autonomous agents:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">anthropic</span>
<span class="kn">import</span> <span class="n">chromadb</span>
<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>

<span class="k">class</span> <span class="nc">AgentRole</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">PLANNER</span> <span class="o">=</span> <span class="sh">"</span><span class="s">planner</span><span class="sh">"</span>
    <span class="n">INTENT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">intent</span><span class="sh">"</span>
    <span class="n">TECHNICAL</span> <span class="o">=</span> <span class="sh">"</span><span class="s">technical</span><span class="sh">"</span>
    <span class="n">KNOWLEDGE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">knowledge</span><span class="sh">"</span>
    <span class="n">DIALOGUE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">dialogue</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">AgentContext</span><span class="p">:</span>
    <span class="n">conversation_history</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]</span>
    <span class="n">customer_profile</span><span class="p">:</span> <span class="n">Dict</span>
    <span class="n">current_intent</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">relevant_policies</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]</span>
    <span class="n">system_status</span><span class="p">:</span> <span class="n">Dict</span>

<span class="k">class</span> <span class="nc">BaseAgent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                 <span class="n">llm_client</span><span class="p">:</span> <span class="n">anthropic</span><span class="p">.</span><span class="n">AsyncAnthropic</span><span class="p">,</span>
                 <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">,</span>
                 <span class="n">role</span><span class="p">:</span> <span class="n">AgentRole</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="n">llm_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        <span class="n">self</span><span class="p">.</span><span class="n">role</span> <span class="o">=</span> <span class="n">role</span>
        <span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_role_prompt</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_load_role_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Load role-specific prompt from vector store</span><span class="sh">"""</span>
        <span class="n">prompts</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">get_collection</span><span class="p">(</span><span class="sh">"</span><span class="s">agent_prompts</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">role_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">prompts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="n">where</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">role</span><span class="p">.</span><span class="n">value</span><span class="p">}</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">role_prompt</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">think</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Internal reasoning step</span><span class="sh">"""</span>
        <span class="n">reasoning</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">system_prompt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Given the context: </span><span class="si">{</span><span class="n">context</span><span class="si">}</span><span class="s">, </span><span class="sh">"</span>
                          <span class="sa">f</span><span class="sh">"</span><span class="s">what should be our next action?</span><span class="sh">"</span>
            <span class="p">}]</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">reasoning</span><span class="p">.</span><span class="n">content</span>

<span class="k">class</span> <span class="nc">PlanningAgent</span><span class="p">(</span><span class="n">BaseAgent</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                 <span class="n">llm_client</span><span class="p">:</span> <span class="n">anthropic</span><span class="p">.</span><span class="n">AsyncAnthropic</span><span class="p">,</span>
                 <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">,</span>
                 <span class="n">agents</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="n">AgentRole</span><span class="p">,</span> <span class="n">BaseAgent</span><span class="p">]):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">llm_client</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">,</span> <span class="n">AgentRole</span><span class="p">.</span><span class="n">PLANNER</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">agents</span> <span class="o">=</span> <span class="n">agents</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">plan_resolution</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                            <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                            <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="c1"># Decompose problem into steps
</span>        <span class="n">plan</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_create_plan</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        
        <span class="c1"># Execute plan steps with appropriate agents
</span>        <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">plan</span><span class="p">:</span>
            <span class="n">agent</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">agents</span><span class="p">[</span><span class="n">step</span><span class="p">.</span><span class="n">agent_role</span><span class="p">]</span>
            <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agent</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            <span class="n">context</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_context</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">result</span><span class="p">)</span>
            
        <span class="c1"># Synthesize final response
</span>        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_synthesize_response</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_create_plan</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                          <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                          <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]:</span>
        <span class="c1"># Use LLM to create resolution plan
</span>        <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">system_prompt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Create a plan to resolve: </span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="sh">"</span>
            <span class="p">}]</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_parse_plan</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TechnicalAgent</span><span class="p">(</span><span class="n">BaseAgent</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="n">llm_client</span><span class="p">:</span> <span class="n">anthropic</span><span class="p">.</span><span class="n">AsyncAnthropic</span><span class="p">,</span>
                 <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">,</span>
                 <span class="n">network_api</span><span class="p">:</span> <span class="n">NetworkAPI</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">llm_client</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">,</span> <span class="n">AgentRole</span><span class="p">.</span><span class="n">TECHNICAL</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">network_api</span> <span class="o">=</span> <span class="n">network_api</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">diagnose_issue</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                           <span class="n">symptoms</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> 
                           <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="c1"># Get relevant diagnostic procedures
</span>        <span class="n">procedures</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_get_diagnostic_procedures</span><span class="p">(</span><span class="n">symptoms</span><span class="p">)</span>
        
        <span class="c1"># Run diagnostic tests
</span>        <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">procedure</span> <span class="ow">in</span> <span class="n">procedures</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">network_api</span><span class="p">.</span><span class="nf">run_diagnostic</span><span class="p">(</span>
                <span class="n">procedure</span><span class="p">,</span> <span class="n">context</span><span class="p">.</span><span class="n">customer_profile</span>
            <span class="p">)</span>
            <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            
        <span class="c1"># Analyze results with LLM
</span>        <span class="n">analysis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_results</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">analysis</span>

<span class="k">class</span> <span class="nc">KnowledgeAgent</span><span class="p">(</span><span class="n">BaseAgent</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="n">llm_client</span><span class="p">:</span> <span class="n">anthropic</span><span class="p">.</span><span class="n">AsyncAnthropic</span><span class="p">,</span>
                 <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">llm_client</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">,</span> <span class="n">AgentRole</span><span class="p">.</span><span class="n">KNOWLEDGE</span><span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">retrieve_knowledge</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                               <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                               <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
        <span class="c1"># Perform RAG to get relevant information
</span>        <span class="n">docs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_retrieve_documents</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        
        <span class="c1"># Synthesize knowledge with LLM
</span>        <span class="n">synthesis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">system_prompt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Synthesize this information: </span><span class="si">{</span><span class="n">docs</span><span class="si">}</span><span class="sh">"</span>
            <span class="p">}]</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">synthesis</span><span class="sh">"</span><span class="p">:</span> <span class="n">synthesis</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">sources</span><span class="sh">"</span><span class="p">:</span> <span class="n">docs</span><span class="p">}</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="agent-interaction-flow">Agent Interaction Flow</h2> <p>The sequence diagram below shows how agents collaborate to resolve customer queries:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/autonomous-agents-interactions-workflow-480.webp 480w,/assets/img/blog/autonomous-agents-interactions-workflow-800.webp 800w,/assets/img/blog/autonomous-agents-interactions-workflow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/autonomous-agents-interactions-workflow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>Let’s examine a real customer service scenario:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">handle_network_issue</span><span class="p">(</span>
    <span class="n">customer_query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">planner</span><span class="p">:</span> <span class="n">PlanningAgent</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">:</span>
    <span class="c1"># Initialize context
</span>    <span class="n">context</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">build_initial_context</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
    
    <span class="c1"># Plan resolution
</span>    <span class="n">resolution</span> <span class="o">=</span> <span class="k">await</span> <span class="n">planner</span><span class="p">.</span><span class="nf">plan_resolution</span><span class="p">(</span>
        <span class="n">customer_query</span><span class="p">,</span> <span class="n">context</span>
    <span class="p">)</span>
    
    <span class="c1"># Execute with continuous monitoring
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">execute_resolution_plan</span><span class="p">(</span>
            <span class="n">resolution</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="c1"># Update agent knowledge
</span>        <span class="k">await</span> <span class="nf">update_agent_knowledge</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">result</span>
        
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="c1"># Handle failures gracefully
</span>        <span class="k">return</span> <span class="k">await</span> <span class="nf">handle_resolution_failure</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="memory-and-learning">Memory and Learning</h2> <p>Our agents maintain and learn from interactions through:</p> <ol> <li>Episodic Memory <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MemoryManager</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        
 <span class="k">async</span> <span class="k">def</span> <span class="nf">store_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                           <span class="n">interaction</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                           <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">):</span>
     <span class="c1"># Store in vector database for retrieval
</span>     <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span>
         <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">interactions</span><span class="sh">"</span><span class="p">,</span>
         <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="n">interaction</span><span class="p">],</span>
         <span class="n">metadata</span><span class="o">=</span><span class="p">{</span>
             <span class="sh">"</span><span class="s">customer_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">customer_profile</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
             <span class="sh">"</span><span class="s">intent</span><span class="sh">"</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="n">current_intent</span><span class="p">,</span>
             <span class="sh">"</span><span class="s">outcome</span><span class="sh">"</span><span class="p">:</span> <span class="n">interaction</span><span class="p">[</span><span class="sh">"</span><span class="s">outcome</span><span class="sh">"</span><span class="p">]</span>
         <span class="p">}</span>
     <span class="p">)</span>
        
 <span class="k">async</span> <span class="k">def</span> <span class="nf">retrieve_similar_cases</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                <span class="n">current_case</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                                <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]:</span>
     <span class="c1"># Find similar past interactions
</span>     <span class="n">similar</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span>
         <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">interactions</span><span class="sh">"</span><span class="p">,</span>
         <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="n">current_case</span><span class="p">[</span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">]],</span>
         <span class="n">n_results</span><span class="o">=</span><span class="n">limit</span>
     <span class="p">)</span>
     <span class="k">return</span> <span class="n">similar</span>
</code></pre></div> </div> </li> <li>Continuous Learning <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AgentLearningManager</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
              <span class="n">llm_client</span><span class="p">:</span> <span class="n">anthropic</span><span class="p">.</span><span class="n">AsyncAnthropic</span><span class="p">,</span>
              <span class="n">vector_store</span><span class="p">:</span> <span class="n">chromadb</span><span class="p">.</span><span class="n">AsyncClient</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="n">llm_client</span>
     <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        
 <span class="k">async</span> <span class="k">def</span> <span class="nf">learn_from_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                <span class="n">interaction</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                                <span class="n">outcome</span><span class="p">:</span> <span class="n">Dict</span><span class="p">):</span>
     <span class="c1"># Extract learning points
</span>     <span class="n">learnings</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_learnings</span><span class="p">(</span>
         <span class="n">interaction</span><span class="p">,</span> <span class="n">outcome</span>
     <span class="p">)</span>
        
     <span class="c1"># Update agent knowledge
</span>     <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_knowledge_base</span><span class="p">(</span><span class="n">learnings</span><span class="p">)</span>
        
     <span class="c1"># Refine agent prompts if needed
</span>     <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_refine_prompts</span><span class="p">(</span><span class="n">learnings</span><span class="p">)</span>
</code></pre></div> </div> <p><br/> <br/></p> </li> </ol> <h2 id="performance-monitoring">Performance Monitoring</h2> <p>We monitor agent performance through:</p> <ol> <li>Resolution Metrics <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PerformanceMonitor</span><span class="p">:</span>
 <span class="k">async</span> <span class="k">def</span> <span class="nf">track_resolution</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                          <span class="n">interaction</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                          <span class="n">metrics</span><span class="p">:</span> <span class="n">Dict</span><span class="p">):</span>
     <span class="c1"># Track resolution time
</span>     <span class="n">resolution_time</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">[</span><span class="sh">"</span><span class="s">resolution_time</span><span class="sh">"</span><span class="p">]</span>
        
     <span class="c1"># Track customer satisfaction
</span>     <span class="n">satisfaction</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">[</span><span class="sh">"</span><span class="s">satisfaction_score</span><span class="sh">"</span><span class="p">]</span>
        
     <span class="c1"># Track agent effectiveness
</span>     <span class="n">agent_metrics</span> <span class="o">=</span> <span class="n">metrics</span><span class="p">[</span><span class="sh">"</span><span class="s">agent_metrics</span><span class="sh">"</span><span class="p">]</span>
        
     <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_store_metrics</span><span class="p">(</span>
         <span class="n">interaction</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
         <span class="n">resolution_time</span><span class="p">,</span>
         <span class="n">satisfaction</span><span class="p">,</span>
         <span class="n">agent_metrics</span>
     <span class="p">)</span>
</code></pre></div> </div> <p><br/> <br/></p> </li> </ol> <h2 id="detailed-agent-interactions">Detailed Agent Interactions</h2> <p>Let’s examine specific scenarios showing how agents collaborate:</p> <p><br/></p> <h3 id="scenario-1-complex-network-issue-resolution">Scenario 1: Complex Network Issue Resolution</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">handle_complex_network_issue</span><span class="p">(</span>
    <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">,</span>
    <span class="n">agents</span><span class="p">:</span> <span class="n">AgentSystem</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
    <span class="c1"># Initial intent analysis
</span>    <span class="n">intent</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agents</span><span class="p">.</span><span class="n">intent_agent</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">intent</span><span class="p">.</span><span class="n">confidence</span> <span class="o">&lt;</span> <span class="mf">0.8</span><span class="p">:</span>
        <span class="c1"># Engage dialog agent for clarification
</span>        <span class="n">clarification</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agents</span><span class="p">.</span><span class="n">dialog_agent</span><span class="p">.</span><span class="nf">get_clarification</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">intent</span><span class="p">.</span><span class="n">unclear_aspects</span>
        <span class="p">)</span>
        <span class="n">intent</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agents</span><span class="p">.</span><span class="n">intent_agent</span><span class="p">.</span><span class="nf">analyze</span><span class="p">(</span><span class="n">clarification</span><span class="p">)</span>
    
    <span class="c1"># Technical diagnosis phase
</span>    <span class="n">tech_diagnosis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agents</span><span class="p">.</span><span class="n">technical_agent</span><span class="p">.</span><span class="nf">diagnose</span><span class="p">(</span><span class="n">intent</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">tech_diagnosis</span><span class="p">.</span><span class="n">requires_network_scan</span><span class="p">:</span>
        <span class="c1"># Parallel processing of network diagnostics
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">agents</span><span class="p">.</span><span class="nf">start_parallel_tasks</span><span class="p">()</span> <span class="k">as</span> <span class="n">tasks</span><span class="p">:</span>
            <span class="n">tasks</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">agents</span><span class="p">.</span><span class="n">technical_agent</span><span class="p">.</span><span class="nf">scan_network</span><span class="p">(</span>
                <span class="n">context</span><span class="p">.</span><span class="n">customer_profile</span><span class="p">.</span><span class="n">location</span>
            <span class="p">))</span>
            <span class="n">tasks</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">agents</span><span class="p">.</span><span class="n">knowledge_agent</span><span class="p">.</span><span class="nf">get_related_issues</span><span class="p">(</span>
                <span class="n">tech_diagnosis</span><span class="p">.</span><span class="n">symptoms</span>
            <span class="p">))</span>
            <span class="n">scan_results</span><span class="p">,</span> <span class="n">known_issues</span> <span class="o">=</span> <span class="k">await</span> <span class="n">tasks</span><span class="p">.</span><span class="nf">complete</span><span class="p">()</span>
    
    <span class="c1"># Synthesize solution
</span>    <span class="n">solution</span> <span class="o">=</span> <span class="k">await</span> <span class="n">agents</span><span class="p">.</span><span class="n">planner</span><span class="p">.</span><span class="nf">create_solution</span><span class="p">(</span>
        <span class="n">intent</span><span class="o">=</span><span class="n">intent</span><span class="p">,</span>
        <span class="n">diagnosis</span><span class="o">=</span><span class="n">tech_diagnosis</span><span class="p">,</span>
        <span class="n">scan_results</span><span class="o">=</span><span class="n">scan_results</span><span class="p">,</span>
        <span class="n">known_issues</span><span class="o">=</span><span class="n">known_issues</span>
    <span class="p">)</span>
    
    <span class="k">return</span> <span class="n">solution</span>

<span class="c1"># Example usage
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">real_world_example</span><span class="p">():</span>
    <span class="n">query</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">My internet keeps dropping every 30 minutes, 
               and I</span><span class="sh">'</span><span class="s">ve already restarted the router twice. 
               I</span><span class="sh">'</span><span class="s">m working from home and need this fixed urgently.</span><span class="sh">"""</span>
               
    <span class="n">context</span> <span class="o">=</span> <span class="nc">AgentContext</span><span class="p">(</span>
        <span class="n">customer_id</span><span class="o">=</span><span class="sh">"</span><span class="s">C123</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">service_type</span><span class="o">=</span><span class="sh">"</span><span class="s">Fiber</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">priority</span><span class="o">=</span><span class="sh">"</span><span class="s">High</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">history</span><span class="o">=</span><span class="k">await</span> <span class="nf">get_customer_history</span><span class="p">(</span><span class="sh">"</span><span class="s">C123</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
    
    <span class="n">solution</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">handle_complex_network_issue</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">agents</span><span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="scenario-2-multi-agent-learning-from-customer-interactions">Scenario 2: Multi-Agent Learning from Customer Interactions</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AgentLearningSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">:</span> <span class="n">VectorStore</span><span class="p">,</span> 
                 <span class="n">episodic_memory</span><span class="p">:</span> <span class="n">EpisodicMemory</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        <span class="n">self</span><span class="p">.</span><span class="n">episodic_memory</span> <span class="o">=</span> <span class="n">episodic_memory</span>
        <span class="n">self</span><span class="p">.</span><span class="n">learning_buffer</span> <span class="o">=</span> <span class="p">[]</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">learn_from_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                   <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">,</span>
                                   <span class="n">outcome</span><span class="p">:</span> <span class="n">Outcome</span><span class="p">):</span>
        <span class="c1"># Extract learning points
</span>        <span class="n">learning_points</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_interaction</span><span class="p">(</span><span class="n">interaction</span><span class="p">,</span> <span class="n">outcome</span><span class="p">)</span>
        
        <span class="c1"># Update agent skills
</span>        <span class="k">if</span> <span class="n">learning_points</span><span class="p">.</span><span class="n">new_patterns</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_agent_skills</span><span class="p">(</span><span class="n">learning_points</span><span class="p">.</span><span class="n">new_patterns</span><span class="p">)</span>
        
        <span class="c1"># Store successful approaches
</span>        <span class="k">if</span> <span class="n">outcome</span><span class="p">.</span><span class="n">was_successful</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">store_success_pattern</span><span class="p">(</span>
                <span class="n">interaction</span><span class="p">.</span><span class="n">flow</span><span class="p">,</span>
                <span class="n">outcome</span><span class="p">.</span><span class="n">resolution_path</span>
            <span class="p">)</span>
        
        <span class="c1"># Learn from failures
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">outcome</span><span class="p">.</span><span class="n">was_successful</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_failure</span><span class="p">(</span><span class="n">interaction</span><span class="p">,</span> <span class="n">outcome</span><span class="p">)</span>
            
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_analyze_failure</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                             <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">,</span>
                             <span class="n">outcome</span><span class="p">:</span> <span class="n">Outcome</span><span class="p">):</span>
        <span class="c1"># Identify failure point
</span>        <span class="n">failure_analysis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_identify_failure_point</span><span class="p">(</span>
            <span class="n">interaction</span><span class="p">.</span><span class="n">flow</span><span class="p">,</span>
            <span class="n">outcome</span>
        <span class="p">)</span>
        
        <span class="c1"># Update failure patterns
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">update_failure_patterns</span><span class="p">(</span>
            <span class="n">failure_analysis</span><span class="p">.</span><span class="n">pattern</span><span class="p">,</span>
            <span class="n">failure_analysis</span><span class="p">.</span><span class="n">context</span>
        <span class="p">)</span>
        
        <span class="c1"># Adjust agent behaviors
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_agent_strategies</span><span class="p">(</span>
            <span class="n">failure_analysis</span><span class="p">.</span><span class="n">recommendations</span>
        <span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="edge-cases-and-failure-handling">Edge Cases and Failure Handling</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EdgeCaseHandler</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_edge_case</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                             <span class="n">case</span><span class="p">:</span> <span class="n">Case</span><span class="p">,</span>
                             <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="n">match</span> <span class="n">case</span><span class="p">.</span><span class="nb">type</span><span class="p">:</span>
            <span class="n">case</span> <span class="n">EdgeCaseType</span><span class="p">.</span><span class="n">CONFLICTING_INTENTS</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_intent_conflict</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            <span class="n">case</span> <span class="n">EdgeCaseType</span><span class="p">.</span><span class="n">SYSTEM_UNAVAILABLE</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_system_outage</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            <span class="n">case</span> <span class="n">EdgeCaseType</span><span class="p">.</span><span class="n">HIGH_UNCERTAINTY</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_uncertainty</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
                
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_handle_intent_conflict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                    <span class="n">case</span><span class="p">:</span> <span class="n">Case</span><span class="p">,</span>
                                    <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="c1"># Get all possible intents
</span>        <span class="n">intents</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">intent_agent</span><span class="p">.</span><span class="nf">get_all_possible_intents</span><span class="p">(</span>
            <span class="n">case</span><span class="p">.</span><span class="n">query</span>
        <span class="p">)</span>
        
        <span class="c1"># Score each intent based on context
</span>        <span class="n">scored_intents</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">intent_agent</span><span class="p">.</span><span class="nf">score_intents</span><span class="p">(</span>
            <span class="n">intents</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="k">if</span> <span class="nf">max</span><span class="p">(</span><span class="n">scored_intents</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mf">0.4</span><span class="p">:</span>
            <span class="c1"># No clear winner - need human intervention
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_escalate_to_human</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            
        <span class="c1"># Process top intent but keep others for backup
</span>        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_with_fallback</span><span class="p">(</span>
            <span class="n">scored_intents</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_handle_system_outage</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                  <span class="n">case</span><span class="p">:</span> <span class="n">Case</span><span class="p">,</span>
                                  <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="c1"># Check system status
</span>        <span class="n">status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">system_monitor</span><span class="p">.</span><span class="nf">get_status</span><span class="p">()</span>
        
        <span class="c1"># If critical system is down
</span>        <span class="k">if</span> <span class="n">status</span><span class="p">.</span><span class="n">has_critical_outage</span><span class="p">:</span>
            <span class="c1"># Use cached data if available
</span>            <span class="k">if</span> <span class="n">cached_data</span> <span class="p">:</span><span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">case</span><span class="p">.</span><span class="n">key</span><span class="p">):</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_with_cached_data</span><span class="p">(</span>
                    <span class="n">case</span><span class="p">,</span> <span class="n">cached_data</span><span class="p">,</span> <span class="n">context</span>
                <span class="p">)</span>
            
            <span class="c1"># Otherwise, gracefully degrade service
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_degrade_gracefully</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_handle_uncertainty</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                <span class="n">case</span><span class="p">:</span> <span class="n">Case</span><span class="p">,</span>
                                <span class="n">context</span><span class="p">:</span> <span class="n">AgentContext</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="c1"># Analyze uncertainty sources
</span>        <span class="n">uncertainty</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">analyzer</span><span class="p">.</span><span class="nf">analyze_uncertainty</span><span class="p">(</span>
            <span class="n">case</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="k">if</span> <span class="n">uncertainty</span><span class="p">.</span><span class="n">is_data_related</span><span class="p">:</span>
            <span class="c1"># Try to gather more data
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_gather_additional_data</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            
        <span class="k">if</span> <span class="n">uncertainty</span><span class="p">.</span><span class="n">is_knowledge_related</span><span class="p">:</span>
            <span class="c1"># Consult knowledge base or escalate
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_consult_knowledge_base</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
            
        <span class="c1"># Default to safe action
</span>        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_take_safe_action</span><span class="p">(</span><span class="n">case</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h3 id="learning-from-edge-cases">Learning from Edge Cases</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EdgeCaseLearningSystem</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">learn_from_edge_case</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                 <span class="n">case</span><span class="p">:</span> <span class="n">EdgeCase</span><span class="p">,</span>
                                 <span class="n">resolution</span><span class="p">:</span> <span class="n">Resolution</span><span class="p">):</span>
        <span class="c1"># Record the edge case pattern
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">add_edge_case_pattern</span><span class="p">(</span>
            <span class="n">case</span><span class="p">.</span><span class="n">pattern</span><span class="p">,</span>
            <span class="n">resolution</span><span class="p">.</span><span class="n">successful_approach</span>
        <span class="p">)</span>
        
        <span class="c1"># Update agent behavior models
</span>        <span class="k">for</span> <span class="n">agent</span> <span class="ow">in</span> <span class="n">case</span><span class="p">.</span><span class="n">involved_agents</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_agent_model</span><span class="p">(</span>
                <span class="n">agent</span><span class="p">,</span>
                <span class="n">case</span><span class="p">.</span><span class="n">learnings</span>
            <span class="p">)</span>
            
        <span class="c1"># If this is a new pattern, add to monitoring
</span>        <span class="k">if</span> <span class="n">case</span><span class="p">.</span><span class="n">is_novel_pattern</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">monitor</span><span class="p">.</span><span class="nf">add_pattern_to_watch</span><span class="p">(</span>
                <span class="n">case</span><span class="p">.</span><span class="n">pattern</span><span class="p">,</span>
                <span class="n">resolution</span><span class="p">.</span><span class="n">indicators</span>
            <span class="p">)</span>
            
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_update_agent_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                                <span class="n">learnings</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="c1"># Update agent's decision model
</span>        <span class="k">await</span> <span class="n">agent</span><span class="p">.</span><span class="nf">update_decision_model</span><span class="p">(</span><span class="n">learnings</span><span class="p">)</span>
        
        <span class="c1"># Adjust confidence thresholds if needed
</span>        <span class="k">if</span> <span class="n">learnings</span><span class="p">.</span><span class="n">confidence_issues</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">agent</span><span class="p">.</span><span class="nf">adjust_confidence_thresholds</span><span class="p">(</span>
                <span class="n">learnings</span><span class="p">.</span><span class="n">confidence_data</span>
            <span class="p">)</span>
            
        <span class="c1"># Update interaction patterns
</span>        <span class="k">await</span> <span class="n">agent</span><span class="p">.</span><span class="nf">add_interaction_pattern</span><span class="p">(</span>
            <span class="n">learnings</span><span class="p">.</span><span class="n">new_pattern</span>
        <span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="agent-monitoring-and-evaluation">Agent Monitoring and Evaluation</h2> <p>Monitoring autonomous agents requires tracking both technical metrics and cognitive performance. Here’s our implementation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AgentMonitoringSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">metrics_store</span> <span class="o">=</span> <span class="nc">MetricsStore</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">alert_system</span> <span class="o">=</span> <span class="nc">AlertSystem</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">performance_evaluator</span> <span class="o">=</span> <span class="nc">PerformanceEvaluator</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">monitor_agent_performance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                      <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                                      <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">):</span>
        <span class="c1"># Track core metrics
</span>        <span class="n">metrics</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">response_time</span><span class="sh">'</span><span class="p">:</span> <span class="n">interaction</span><span class="p">.</span><span class="n">duration</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">token_usage</span><span class="sh">'</span><span class="p">:</span> <span class="n">interaction</span><span class="p">.</span><span class="n">token_count</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">confidence_scores</span><span class="sh">'</span><span class="p">:</span> <span class="n">interaction</span><span class="p">.</span><span class="n">confidence_metrics</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">resolution_success</span><span class="sh">'</span><span class="p">:</span> <span class="n">interaction</span><span class="p">.</span><span class="n">was_successful</span>
        <span class="p">}</span>
        
        <span class="c1"># Track cognitive metrics
</span>        <span class="n">cognitive_metrics</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_evaluate_cognitive_performance</span><span class="p">(</span>
            <span class="n">agent</span><span class="p">,</span> <span class="n">interaction</span>
        <span class="p">)</span>
        
        <span class="c1"># Track resource usage
</span>        <span class="n">resource_metrics</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_track_resource_usage</span><span class="p">(</span>
            <span class="n">agent</span><span class="p">,</span> <span class="n">interaction</span>
        <span class="p">)</span>
        
        <span class="c1"># Store consolidated metrics
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">metrics_store</span><span class="p">.</span><span class="nf">store</span><span class="p">(</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">agent</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">metrics</span><span class="o">=</span><span class="p">{</span><span class="o">**</span><span class="n">metrics</span><span class="p">,</span> <span class="o">**</span><span class="n">cognitive_metrics</span><span class="p">,</span> <span class="o">**</span><span class="n">resource_metrics</span><span class="p">},</span>
            <span class="n">timestamp</span><span class="o">=</span><span class="n">interaction</span><span class="p">.</span><span class="n">timestamp</span>
        <span class="p">)</span>
        
        <span class="c1"># Check for anomalies
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_anomalies</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">metrics</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_evaluate_cognitive_performance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                           <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                                           <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">reasoning_quality</span><span class="sh">'</span><span class="p">:</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_assess_reasoning</span><span class="p">(</span>
                <span class="n">interaction</span><span class="p">.</span><span class="n">reasoning_chain</span>
            <span class="p">),</span>
            <span class="sh">'</span><span class="s">context_relevance</span><span class="sh">'</span><span class="p">:</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_assess_context_usage</span><span class="p">(</span>
                <span class="n">interaction</span><span class="p">.</span><span class="n">used_context</span><span class="p">,</span>
                <span class="n">interaction</span><span class="p">.</span><span class="n">available_context</span>
            <span class="p">),</span>
            <span class="sh">'</span><span class="s">knowledge_application</span><span class="sh">'</span><span class="p">:</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_assess_knowledge_usage</span><span class="p">(</span>
                <span class="n">interaction</span><span class="p">.</span><span class="n">knowledge_references</span>
            <span class="p">)</span>
        <span class="p">}</span>

<span class="k">class</span> <span class="nc">PerformanceEvaluator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">llm_client</span><span class="p">:</span> <span class="n">AsyncAnthropic</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="n">llm_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">evaluation_prompts</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_evaluation_prompts</span><span class="p">()</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">evaluate_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                 <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">EvalResult</span><span class="p">:</span>
        <span class="c1"># Evaluate based on multiple criteria
</span>        <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_evaluate_accuracy</span><span class="p">(</span><span class="n">interaction</span><span class="p">),</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_evaluate_efficiency</span><span class="p">(</span><span class="n">interaction</span><span class="p">),</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_evaluate_appropriateness</span><span class="p">(</span><span class="n">interaction</span><span class="p">),</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_evaluate_creativity</span><span class="p">(</span><span class="n">interaction</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># Aggregate scores
</span>        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_aggregate_scores</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_evaluate_accuracy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">):</span>
        <span class="n">prompt</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">Evaluate the accuracy of this agent interaction:
        Context: </span><span class="si">{</span><span class="n">interaction</span><span class="p">.</span><span class="n">context</span><span class="si">}</span><span class="s">
        User Query: </span><span class="si">{</span><span class="n">interaction</span><span class="p">.</span><span class="n">query</span><span class="si">}</span><span class="s">
        Agent Response: </span><span class="si">{</span><span class="n">interaction</span><span class="p">.</span><span class="n">response</span><span class="si">}</span><span class="s">
        Reasoning Chain: </span><span class="si">{</span><span class="n">interaction</span><span class="p">.</span><span class="n">reasoning_chain</span><span class="si">}</span><span class="s">
        
        Score the following aspects:
        1. Factual accuracy
        2. Logical consistency
        3. Solution completeness
        4. Validation of assumptions
        
        Provide a score (1-10) for each aspect and explain your reasoning.
        </span><span class="sh">"""</span>
        
        <span class="n">evaluation</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">llm</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">system_prompt</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">evaluation_prompts</span><span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">],</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}]</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_parse_evaluation</span><span class="p">(</span><span class="n">evaluation</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="advanced-memory-systems">Advanced Memory Systems</h2> <p>Our memory system is designed to handle multiple types of memory with different retention patterns:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HierarchicalMemorySystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">working_memory</span> <span class="o">=</span> <span class="nc">WorkingMemory</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">episodic_memory</span> <span class="o">=</span> <span class="nc">EpisodicMemory</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">semantic_memory</span> <span class="o">=</span> <span class="nc">SemanticMemory</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">procedural_memory</span> <span class="o">=</span> <span class="nc">ProceduralMemory</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">store_interaction</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                              <span class="n">interaction</span><span class="p">:</span> <span class="n">Interaction</span><span class="p">,</span>
                              <span class="n">memory_type</span><span class="p">:</span> <span class="n">MemoryType</span><span class="p">):</span>
        <span class="n">match</span> <span class="n">memory_type</span><span class="p">:</span>
            <span class="n">case</span> <span class="n">MemoryType</span><span class="p">.</span><span class="n">WORKING</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="nf">store</span><span class="p">(</span>
                    <span class="n">interaction</span><span class="p">,</span>
                    <span class="n">ttl</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="n">case</span> <span class="n">MemoryType</span><span class="p">.</span><span class="n">EPISODIC</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">store</span><span class="p">(</span>
                    <span class="n">interaction</span><span class="p">,</span>
                    <span class="n">context</span><span class="o">=</span><span class="n">interaction</span><span class="p">.</span><span class="n">context</span>
                <span class="p">)</span>
            <span class="n">case</span> <span class="n">MemoryType</span><span class="p">.</span><span class="n">SEMANTIC</span><span class="p">:</span>
                <span class="n">knowledge</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_knowledge</span><span class="p">(</span><span class="n">interaction</span><span class="p">)</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">semantic_memory</span><span class="p">.</span><span class="nf">store</span><span class="p">(</span><span class="n">knowledge</span><span class="p">)</span>
            <span class="n">case</span> <span class="n">MemoryType</span><span class="p">.</span><span class="n">PROCEDURAL</span><span class="p">:</span>
                <span class="n">procedure</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_procedure</span><span class="p">(</span><span class="n">interaction</span><span class="p">)</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">procedural_memory</span><span class="p">.</span><span class="nf">store</span><span class="p">(</span><span class="n">procedure</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">SemanticMemory</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">:</span> <span class="n">ChromaDB</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        <span class="n">self</span><span class="p">.</span><span class="n">knowledge_graph</span> <span class="o">=</span> <span class="nc">NetworkX</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">store_knowledge</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">knowledge</span><span class="p">:</span> <span class="n">Knowledge</span><span class="p">):</span>
        <span class="c1"># Store in vector database
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span>
            <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">semantic_memory</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="n">knowledge</span><span class="p">.</span><span class="n">content</span><span class="p">],</span>
            <span class="n">metadata</span><span class="o">=</span><span class="n">knowledge</span><span class="p">.</span><span class="n">metadata</span>
        <span class="p">)</span>
        
        <span class="c1"># Update knowledge graph
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_knowledge_graph</span><span class="p">(</span><span class="n">knowledge</span><span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">retrieve_relevant_knowledge</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                        <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                        <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Knowledge</span><span class="p">]:</span>
        <span class="c1"># Hybrid search using both vector similarity and graph relationships
</span>        <span class="n">vector_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span>
            <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">semantic_memory</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">query_texts</span><span class="o">=</span><span class="p">[</span><span class="n">query</span><span class="p">],</span>
            <span class="n">n_results</span><span class="o">=</span><span class="mi">10</span>
        <span class="p">)</span>
        
        <span class="n">graph_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_graph_search</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
        
        <span class="c1"># Merge and rank results
</span>        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_merge_and_rank_results</span><span class="p">(</span><span class="n">vector_results</span><span class="p">,</span> <span class="n">graph_results</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">EpisodicMemory</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">vector_store</span><span class="p">:</span> <span class="n">ChromaDB</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        <span class="n">self</span><span class="p">.</span><span class="n">episode_index</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">store_episode</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                          <span class="n">episode</span><span class="p">:</span> <span class="n">Episode</span><span class="p">,</span>
                          <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">):</span>
        <span class="c1"># Create episode embedding
</span>        <span class="n">embedding</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_create_episode_embedding</span><span class="p">(</span><span class="n">episode</span><span class="p">)</span>
        
        <span class="c1"># Store in vector database
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span>
            <span class="n">collection_name</span><span class="o">=</span><span class="sh">"</span><span class="s">episodic_memory</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">documents</span><span class="o">=</span><span class="p">[</span><span class="n">episode</span><span class="p">.</span><span class="n">summary</span><span class="p">],</span>
            <span class="n">embeddings</span><span class="o">=</span><span class="p">[</span><span class="n">embedding</span><span class="p">],</span>
            <span class="n">metadata</span><span class="o">=</span><span class="p">{</span>
                <span class="sh">"</span><span class="s">timestamp</span><span class="sh">"</span><span class="p">:</span> <span class="n">episode</span><span class="p">.</span><span class="n">timestamp</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">outcome</span><span class="sh">"</span><span class="p">:</span> <span class="n">episode</span><span class="p">.</span><span class="n">outcome</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">context_hash</span><span class="sh">"</span><span class="p">:</span> <span class="n">context</span><span class="p">.</span><span class="nb">hash</span>
            <span class="p">}</span>
        <span class="p">)</span>
        
        <span class="c1"># Update episode index
</span>        <span class="n">self</span><span class="p">.</span><span class="n">episode_index</span><span class="p">[</span><span class="n">episode</span><span class="p">.</span><span class="nb">id</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">embedding</span><span class="sh">"</span><span class="p">:</span> <span class="n">embedding</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="n">context</span>
        <span class="p">}</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="prompt-engineering-for-different-agents">Prompt Engineering for Different Agents</h2> <p><br/></p> <p>Different agents require specialized prompts to perform their roles effectively:</p> <p><br/></p> <h3 id="intent-analysis-agent">Intent Analysis Agent</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INTENT_AGENT_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are an Intent Analysis Agent in a telecom customer service system. Your role is to:
1. Precisely identify customer intent from their queries
2. Detect multiple or hidden intents
3. Assess intent confidence
4. Identify required context for resolution

Given a customer query, analyze it using this structure:
1. Primary Intent: Main customer goal
2. Secondary Intents: Additional or implied needs
3. Required Information: What we need to know
4. Confidence Score: How certain are you (0-1)
5. Context Needs: What additional context would help

Example:
Query: </span><span class="sh">"</span><span class="s">My internet is slow and I want to know if I can upgrade my plan</span><span class="sh">"</span><span class="s">
Analysis:
- Primary Intent: Service Quality Issue (internet speed)
- Secondary Intent: Plan Upgrade Information
- Required Information: Current plan, Speed tests, Location
- Confidence: 0.95
- Context Needs: Current plan details, Account history

Approach each query systematically and be explicit about uncertainty.
</span><span class="sh">"""</span>

<span class="n">TECHNICAL_AGENT_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are a Technical Support Agent specializing in telecom issues. Your role is to:
1. Diagnose technical issues from symptoms
2. Design step-by-step troubleshooting plans
3. Interpret diagnostic results
4. Recommend solutions

Given a technical issue, follow this process:
1. Initial Assessment
   - Classify the issue type
   - Identify potential causes
   - List required diagnostics

2. Diagnosis Plan
   - Order tests by priority
   - Consider dependencies
   - Note expected outcomes

3. Solution Design
   - Start with least intrusive solutions
   - Include fallback options
   - Consider customer impact

Example:
Issue: </span><span class="sh">"</span><span class="s">Intermittent internet disconnections</span><span class="sh">"</span><span class="s">
Assessment:
- Type: Connectivity Issue
- Potential Causes: Signal issues, Equipment problems, Network congestion
- Required Diagnostics: Signal strength test, Equipment status, Network load check

Remember to:
- Be precise in technical language
- Explain technical concepts clearly
- Consider customer technical expertise level
- Document all diagnostic steps
</span><span class="sh">"""</span>

<span class="n">KNOWLEDGE_AGENT_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are a Knowledge Management Agent in a telecom support system. Your role is to:
1. Retrieve and synthesize relevant information
2. Apply policies and procedures correctly
3. Maintain information accuracy
4. Identify knowledge gaps

When processing queries:
1. Information Retrieval
   - Search relevant knowledge bases
   - Check policy updates
   - Verify information currency

2. Knowledge Synthesis
   - Combine multiple sources
   - Resolve conflicts
   - Ensure consistency

3. Application
   - Context-appropriate responses
   - Policy compliance
   - Clear explanations

Example:
Query: </span><span class="sh">"</span><span class="s">Customer asking about 5G upgrade policy</span><span class="sh">"</span><span class="s">
Process:
1. Check current 5G policies
2. Verify customer eligibility rules
3. Review recent policy updates
4. Synthesize into clear response

Remember:
- Cite sources and policy references
- Note information freshness
- Flag ambiguities or conflicts
- Suggest knowledge base updates
</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">PromptManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt_templates</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">AgentType</span><span class="p">.</span><span class="n">INTENT</span><span class="p">:</span> <span class="n">INTENT_AGENT_PROMPT</span><span class="p">,</span>
            <span class="n">AgentType</span><span class="p">.</span><span class="n">TECHNICAL</span><span class="p">:</span> <span class="n">TECHNICAL_AGENT_PROMPT</span><span class="p">,</span>
            <span class="n">AgentType</span><span class="p">.</span><span class="n">KNOWLEDGE</span><span class="p">:</span> <span class="n">KNOWLEDGE_AGENT_PROMPT</span>
        <span class="p">}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">generate_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                            <span class="n">agent_type</span><span class="p">:</span> <span class="n">AgentType</span><span class="p">,</span>
                            <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">base_prompt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">prompt_templates</span><span class="p">[</span><span class="n">agent_type</span><span class="p">]</span>
        
        <span class="c1"># Customize prompt based on context
</span>        <span class="n">customized_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_customize_prompt</span><span class="p">(</span>
            <span class="n">base_prompt</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="c1"># Add relevant examples
</span>        <span class="n">examples</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_get_relevant_examples</span><span class="p">(</span>
            <span class="n">agent_type</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_format_final_prompt</span><span class="p">(</span>
            <span class="n">customized_prompt</span><span class="p">,</span> <span class="n">examples</span>
        <span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="advanced-agent-prompts-and-evolution">Advanced Agent Prompts and Evolution</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EvolvingPromptSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">llm_client</span><span class="p">:</span> <span class="n">AsyncAnthropic</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">llm</span> <span class="o">=</span> <span class="n">llm_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">prompt_versions</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">performance_metrics</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">evolve_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                           <span class="n">agent_type</span><span class="p">:</span> <span class="n">AgentType</span><span class="p">,</span>
                           <span class="n">performance_data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">PerformanceMetric</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Evolve prompts based on performance data</span><span class="sh">"""</span>
        <span class="n">current_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_current_prompt</span><span class="p">(</span><span class="n">agent_type</span><span class="p">)</span>
        
        <span class="c1"># Analyze performance patterns
</span>        <span class="n">analysis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_performance_patterns</span><span class="p">(</span>
            <span class="n">agent_type</span><span class="p">,</span> <span class="n">performance_data</span>
        <span class="p">)</span>
        
        <span class="c1"># Generate prompt improvements
</span>        <span class="n">improvements</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_generate_improvements</span><span class="p">(</span>
            <span class="n">current_prompt</span><span class="p">,</span> <span class="n">analysis</span>
        <span class="p">)</span>
        
        <span class="c1"># Test new prompt variations
</span>        <span class="n">test_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_test_prompt_variations</span><span class="p">(</span><span class="n">improvements</span><span class="p">)</span>
        
        <span class="c1"># Select best performing variant
</span>        <span class="n">new_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_select_best_prompt</span><span class="p">(</span><span class="n">test_results</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">new_prompt</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_analyze_performance_patterns</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                         <span class="n">agent_type</span><span class="p">:</span> <span class="n">AgentType</span><span class="p">,</span>
                                         <span class="n">performance_data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">PerformanceMetric</span><span class="p">]):</span>
        <span class="c1"># Group by performance aspects
</span>        <span class="n">grouped_data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">clarity</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">efficiency</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span>
            <span class="sh">'</span><span class="s">adherence_to_role</span><span class="sh">'</span><span class="p">:</span> <span class="p">[]</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">metric</span> <span class="ow">in</span> <span class="n">performance_data</span><span class="p">:</span>
            <span class="n">grouped_data</span><span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">metric</span><span class="p">.</span><span class="n">accuracy_score</span><span class="p">)</span>
            <span class="n">grouped_data</span><span class="p">[</span><span class="sh">'</span><span class="s">clarity</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">metric</span><span class="p">.</span><span class="n">clarity_score</span><span class="p">)</span>
            <span class="n">grouped_data</span><span class="p">[</span><span class="sh">'</span><span class="s">efficiency</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">metric</span><span class="p">.</span><span class="n">efficiency_score</span><span class="p">)</span>
            <span class="n">grouped_data</span><span class="p">[</span><span class="sh">'</span><span class="s">adherence_to_role</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">metric</span><span class="p">.</span><span class="n">role_adherence</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">weak_areas</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_identify_weak_areas</span><span class="p">(</span><span class="n">grouped_data</span><span class="p">),</span>
            <span class="sh">'</span><span class="s">improvement_opportunities</span><span class="sh">'</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_identify_improvements</span><span class="p">(</span><span class="n">grouped_data</span><span class="p">)</span>
        <span class="p">}</span>

<span class="k">class</span> <span class="nc">PromptLibrary</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Example prompts for different agent types with evolution capabilities</span><span class="sh">"""</span>
    
    <span class="n">DIALOGUE_AGENT_BASE</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are a Dialog Management Agent in a telecom customer service system.
    Primary Objectives:
    1. Maintain natural, context-aware conversations
    2. Elicit necessary information efficiently
    3. Show appropriate empathy
    4. Guide conversations productively
    
    Conversation Guidelines:
    1. Start with open-ended questions
    2. Follow up on emotional cues
    3. Validate customer concerns
    4. Summarize understanding regularly
    
    Example Dialogue:
    Customer: </span><span class="sh">"</span><span class="s">I</span><span class="sh">'</span><span class="s">m really frustrated with my service!</span><span class="sh">"</span><span class="s">
    Response: </span><span class="sh">"</span><span class="s">I understand your frustration. Could you tell me more about what</span><span class="sh">'</span><span class="s">s happening with your service?</span><span class="sh">"</span><span class="s">
    
    Remember to:
    - Acknowledge emotions
    - Stay focused on resolution
    - Use appropriate tone
    - Maintain conversation history
    </span><span class="sh">"""</span>
    
    <span class="n">ESCALATION_AGENT_BASE</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are an Escalation Management Agent.
    Your role is to:
    1. Identify escalation triggers
    2. Manage handoffs appropriately
    3. Preserve context during escalation
    4. Track escalation patterns
    
    Escalation Criteria:
    1. Technical complexity
    2. Customer satisfaction risk
    3. Regulatory requirements
    4. Business impact
    
    Example:
    Scenario: Complex billing dispute with technical components
    Action: Escalate to Billing Specialist with Technical Consult
    
    Remember:
    - Document escalation reasons
    - Ensure smooth handoffs
    - Follow up on resolution
    - Learn from patterns
    </span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">PromptEvolution</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">evolve_dialogue_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                   <span class="n">base_prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                   <span class="n">performance_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Evolve dialogue prompt based on performance metrics</span><span class="sh">"""</span>
        
        <span class="n">enhancements</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># If empathy scores are low
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">[</span><span class="sh">'</span><span class="s">empathy_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mf">0.7</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Enhanced Empathy Guidelines:
            1. Recognize emotional undertones
            2. Use acknowledgment phrases
            3. Show understanding through rephrasing
            4. Validate customer feelings
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="c1"># If information gathering is inefficient
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">[</span><span class="sh">'</span><span class="s">information_efficiency</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mf">0.8</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Efficient Information Gathering:
            1. Use targeted follow-up questions
            2. Summarize gathered information
            3. Confirm critical details
            4. Track information gaps
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_merge_prompt_enhancements</span><span class="p">(</span><span class="n">base_prompt</span><span class="p">,</span> <span class="n">enhancements</span><span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="advanced-monitoring-metrics-and-thresholds">Advanced Monitoring Metrics and Thresholds</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MonitoringSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">metrics_store</span> <span class="o">=</span> <span class="nc">MetricsStore</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">thresholds</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_thresholds</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">monitor_agent_health</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                 <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                                 <span class="n">time_window</span><span class="p">:</span> <span class="n">timedelta</span><span class="p">):</span>
        <span class="n">metrics</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">metrics_store</span><span class="p">.</span><span class="nf">get_metrics</span><span class="p">(</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">agent</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">window</span><span class="o">=</span><span class="n">time_window</span>
        <span class="p">)</span>
        
        <span class="c1"># Performance Metrics
</span>        <span class="n">performance_health</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_performance_metrics</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        
        <span class="c1"># Resource Usage
</span>        <span class="n">resource_health</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_resource_metrics</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        
        <span class="c1"># Cognitive Metrics
</span>        <span class="n">cognitive_health</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_cognitive_metrics</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nc">AgentHealth</span><span class="p">(</span>
            <span class="n">performance</span><span class="o">=</span><span class="n">performance_health</span><span class="p">,</span>
            <span class="n">resources</span><span class="o">=</span><span class="n">resource_health</span><span class="p">,</span>
            <span class="n">cognitive</span><span class="o">=</span><span class="n">cognitive_health</span>
        <span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">_load_thresholds</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ThresholdConfig</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">response_time</span><span class="sh">'</span><span class="p">:</span> <span class="nc">ThresholdConfig</span><span class="p">(</span>
                <span class="n">warning</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>  <span class="c1"># seconds
</span>                <span class="n">critical</span><span class="o">=</span><span class="mf">3.0</span><span class="p">,</span>
                <span class="n">trend_window</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="sh">'</span><span class="s">token_usage</span><span class="sh">'</span><span class="p">:</span> <span class="nc">ThresholdConfig</span><span class="p">(</span>
                <span class="n">warning</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
                <span class="n">critical</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span>
                <span class="n">trend_window</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="sh">'</span><span class="s">error_rate</span><span class="sh">'</span><span class="p">:</span> <span class="nc">ThresholdConfig</span><span class="p">(</span>
                <span class="n">warning</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span>  <span class="c1"># 5%
</span>                <span class="n">critical</span><span class="o">=</span><span class="mf">0.10</span><span class="p">,</span>
                <span class="n">trend_window</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="sh">'</span><span class="s">cognitive_drift</span><span class="sh">'</span><span class="p">:</span> <span class="nc">ThresholdConfig</span><span class="p">(</span>
                <span class="n">warning</span><span class="o">=</span><span class="mf">0.15</span><span class="p">,</span>  <span class="c1"># drift from baseline
</span>                <span class="n">critical</span><span class="o">=</span><span class="mf">0.30</span><span class="p">,</span>
                <span class="n">trend_window</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span>
            <span class="p">)</span>
        <span class="p">}</span>
</code></pre></div></div> <p><br/></p> <h3 id="memory-retrieval-strategies">Memory Retrieval Strategies</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MemoryRetrievalSystem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                 <span class="n">vector_store</span><span class="p">:</span> <span class="n">VectorStore</span><span class="p">,</span>
                 <span class="n">graph_store</span><span class="p">:</span> <span class="n">NetworkX</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span> <span class="o">=</span> <span class="n">vector_store</span>
        <span class="n">self</span><span class="p">.</span><span class="n">graph_store</span> <span class="o">=</span> <span class="n">graph_store</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">retrieve_relevant_memories</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                      <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                      <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">MemorySet</span><span class="p">:</span>
        <span class="c1"># Multi-stage retrieval process
</span>        <span class="n">memories</span> <span class="o">=</span> <span class="nc">MemorySet</span><span class="p">()</span>
        
        <span class="c1"># 1. Quick working memory check
</span>        <span class="n">working_mem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_working_memory</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">working_mem</span><span class="p">.</span><span class="n">is_relevant</span><span class="p">:</span>
            <span class="n">memories</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">working_mem</span><span class="p">)</span>
            
        <span class="c1"># 2. Semantic search in episodic memory
</span>        <span class="n">episodic_mem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_search_episodic_memory</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        <span class="n">memories</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">episodic_mem</span><span class="p">)</span>
        
        <span class="c1"># 3. Knowledge graph traversal
</span>        <span class="n">graph_memories</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_traverse_knowledge_graph</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        <span class="n">memories</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">graph_memories</span><span class="p">)</span>
        
        <span class="c1"># 4. Synthesize and rank memories
</span>        <span class="n">ranked_memories</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_rank_memories</span><span class="p">(</span>
            <span class="n">memories</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ranked_memories</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_search_episodic_memory</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                    <span class="n">query</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                    <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Memory</span><span class="p">]:</span>
        <span class="c1"># Hybrid search strategy
</span>        <span class="n">vector_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">vector_store</span><span class="p">.</span><span class="nf">similarity_search</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span>
            <span class="nb">filter</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">_build_context_filter</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="n">temporal_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_temporal_search</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="n">causal_results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_causal_chain_search</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">context</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_merge_search_results</span><span class="p">(</span>
            <span class="n">vector_results</span><span class="p">,</span>
            <span class="n">temporal_results</span><span class="p">,</span>
            <span class="n">causal_results</span>
        <span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="memory-interaction-in-complex-scenarios">Memory Interaction in Complex Scenarios</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MemoryInteractionManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="n">memory_system</span><span class="p">:</span> <span class="n">HierarchicalMemorySystem</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">memory</span> <span class="o">=</span> <span class="n">memory_system</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_complex_query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                 <span class="n">query</span><span class="p">:</span> <span class="n">ComplexQuery</span><span class="p">,</span>
                                 <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Response</span><span class="p">:</span>
        <span class="c1"># Initialize memory workspace
</span>        <span class="n">workspace</span> <span class="o">=</span> <span class="nc">MemoryWorkspace</span><span class="p">()</span>
        
        <span class="c1"># 1. Access working memory for immediate context
</span>        <span class="n">working_context</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="nf">get_context</span><span class="p">(</span>
            <span class="n">query</span><span class="p">.</span><span class="n">session_id</span>
        <span class="p">)</span>
        <span class="n">workspace</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">working_context</span><span class="p">)</span>
        
        <span class="c1"># 2. Retrieve relevant episodic memories
</span>        <span class="n">episodes</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">find_similar</span><span class="p">(</span>
            <span class="n">query</span><span class="p">.</span><span class="n">pattern</span><span class="p">,</span>
            <span class="n">limit</span><span class="o">=</span><span class="mi">5</span>
        <span class="p">)</span>
        <span class="n">workspace</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">episodes</span><span class="p">)</span>
        
        <span class="c1"># 3. Extract semantic knowledge
</span>        <span class="n">knowledge</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">semantic_memory</span><span class="p">.</span><span class="nf">get_relevant</span><span class="p">(</span>
            <span class="n">query</span><span class="p">.</span><span class="n">topics</span>
        <span class="p">)</span>
        <span class="n">workspace</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">knowledge</span><span class="p">)</span>
        
        <span class="c1"># 4. Apply procedural memories
</span>        <span class="n">procedures</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">procedural_memory</span><span class="p">.</span><span class="nf">get_procedures</span><span class="p">(</span>
            <span class="n">query</span><span class="p">.</span><span class="n">task_type</span>
        <span class="p">)</span>
        <span class="n">workspace</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">procedures</span><span class="p">)</span>
        
        <span class="c1"># 5. Synthesize response
</span>        <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_synthesize_response</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">workspace</span>
        <span class="p">)</span>
        
        <span class="c1"># 6. Update memories
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_memories</span><span class="p">(</span>
            <span class="n">query</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">workspace</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="n">response</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_synthesize_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                 <span class="n">query</span><span class="p">:</span> <span class="n">ComplexQuery</span><span class="p">,</span>
                                 <span class="n">workspace</span><span class="p">:</span> <span class="n">MemoryWorkspace</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Response</span><span class="p">:</span>
        <span class="c1"># Create memory layers
</span>        <span class="n">layers</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">workspace</span><span class="p">.</span><span class="nf">get_layer</span><span class="p">(</span><span class="n">MemoryType</span><span class="p">.</span><span class="n">WORKING</span><span class="p">),</span>
            <span class="n">workspace</span><span class="p">.</span><span class="nf">get_layer</span><span class="p">(</span><span class="n">MemoryType</span><span class="p">.</span><span class="n">EPISODIC</span><span class="p">),</span>
            <span class="n">workspace</span><span class="p">.</span><span class="nf">get_layer</span><span class="p">(</span><span class="n">MemoryType</span><span class="p">.</span><span class="n">SEMANTIC</span><span class="p">),</span>
            <span class="n">workspace</span><span class="p">.</span><span class="nf">get_layer</span><span class="p">(</span><span class="n">MemoryType</span><span class="p">.</span><span class="n">PROCEDURAL</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="c1"># Build response using all memory types
</span>        <span class="n">synthesis</span> <span class="o">=</span> <span class="nc">ResponseSynthesizer</span><span class="p">(</span><span class="n">layers</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="n">synthesis</span><span class="p">.</span><span class="nf">create_response</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">response</span>

<span class="k">class</span> <span class="nc">MemoryWorkspace</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Manages active memories during processing</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">layers</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">MemoryType</span><span class="p">.</span><span class="n">WORKING</span><span class="p">:</span> <span class="nc">WorkingMemoryLayer</span><span class="p">(),</span>
            <span class="n">MemoryType</span><span class="p">.</span><span class="n">EPISODIC</span><span class="p">:</span> <span class="nc">EpisodicMemoryLayer</span><span class="p">(),</span>
            <span class="n">MemoryType</span><span class="p">.</span><span class="n">SEMANTIC</span><span class="p">:</span> <span class="nc">SemanticMemoryLayer</span><span class="p">(),</span>
            <span class="n">MemoryType</span><span class="p">.</span><span class="n">PROCEDURAL</span><span class="p">:</span> <span class="nc">ProceduralMemoryLayer</span><span class="p">()</span>
        <span class="p">}</span>
        
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">memory</span><span class="p">:</span> <span class="n">Memory</span><span class="p">):</span>
        <span class="n">layer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">layers</span><span class="p">[</span><span class="n">memory</span><span class="p">.</span><span class="nb">type</span><span class="p">]</span>
        <span class="n">layer</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">memory</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">get_layer</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">memory_type</span><span class="p">:</span> <span class="n">MemoryType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">MemoryLayer</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">layers</span><span class="p">[</span><span class="n">memory_type</span><span class="p">]</span>
</code></pre></div></div> <p>These implementations demonstrate:</p> <ol> <li>Prompt Evolution: <ul> <li>Performance-based prompt improvement</li> <li>Systematic analysis of weak areas</li> <li>A/B testing of prompt variations</li> <li>Role-specific prompt templates</li> </ul> </li> <li>Monitoring Metrics: <ul> <li>Comprehensive metric categories</li> <li>Configurable thresholds</li> <li>Trend analysis</li> <li>Health checks at multiple levels</li> </ul> </li> <li>Memory Retrieval: <ul> <li>Multi-strategy retrieval</li> <li>Context-aware searching</li> <li>Hybrid ranking systems</li> <li>Efficient filtering</li> </ul> </li> <li>Memory Interaction: <ul> <li>Coordinated memory access</li> <li>Memory workspace management</li> <li>Cross-memory synthesis</li> <li>Dynamic updates</li> </ul> </li> </ol> <p><br/></p> <h3 id="complex-memory-interaction-scenarios">Complex Memory Interaction Scenarios</h3> <p>Let’s examine how different memory types interact in real-world scenarios:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ComplexScenarioHandler</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Handles complex customer service scenarios requiring multiple memory types</span><span class="sh">"""</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_service_migration</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                    <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                                    <span class="n">new_service</span><span class="p">:</span> <span class="n">ServiceType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Example: Customer moving house with service transfer and upgrades</span><span class="sh">"""</span>
        
        <span class="c1"># Initialize memory workspace
</span>        <span class="n">workspace</span> <span class="o">=</span> <span class="nc">MemoryWorkspace</span><span class="p">()</span>
        
        <span class="c1"># 1. Retrieve customer history
</span>        <span class="n">history</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">get_customer_history</span><span class="p">(</span>
            <span class="n">customer_id</span><span class="p">,</span>
            <span class="n">relevance_window</span><span class="o">=</span><span class="nf">timedelta</span><span class="p">(</span><span class="n">months</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
        <span class="p">)</span>
        
        <span class="c1"># 2. Get current service configuration
</span>        <span class="n">current_config</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">working_memory</span><span class="p">.</span><span class="nf">get_service_config</span><span class="p">(</span>
            <span class="n">customer_id</span>
        <span class="p">)</span>
        
        <span class="c1"># 3. Access migration procedures
</span>        <span class="n">migration_knowledge</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">semantic_memory</span><span class="p">.</span><span class="nf">get_knowledge</span><span class="p">(</span>
            <span class="n">topics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">service_migration</span><span class="sh">'</span><span class="p">,</span> <span class="n">new_service</span><span class="p">.</span><span class="n">value</span><span class="p">]</span>
        <span class="p">)</span>
        
        <span class="c1"># 4. Get location-specific procedures
</span>        <span class="n">location_procedures</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">procedural_memory</span><span class="p">.</span><span class="nf">get_procedures</span><span class="p">(</span>
            <span class="n">category</span><span class="o">=</span><span class="sh">'</span><span class="s">location_change</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">service_type</span><span class="o">=</span><span class="n">new_service</span>
        <span class="p">)</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Synthesize migration plan
</span>            <span class="n">plan</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_create_migration_plan</span><span class="p">(</span>
                <span class="n">history</span><span class="o">=</span><span class="n">history</span><span class="p">,</span>
                <span class="n">current_config</span><span class="o">=</span><span class="n">current_config</span><span class="p">,</span>
                <span class="n">knowledge</span><span class="o">=</span><span class="n">migration_knowledge</span><span class="p">,</span>
                <span class="n">procedures</span><span class="o">=</span><span class="n">location_procedures</span>
            <span class="p">)</span>
            
            <span class="c1"># Execute migration steps
</span>            <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_execute_migration</span><span class="p">(</span><span class="n">plan</span><span class="p">)</span>
            
            <span class="c1"># Update all memory types with new information
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_update_memories</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            
            <span class="k">return</span> <span class="n">result</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="c1"># Handle failures and update memory
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_migration_failure</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_billing_dispute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                   <span class="n">dispute</span><span class="p">:</span> <span class="n">BillingDispute</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Resolution</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Example: Complex billing dispute requiring historical analysis</span><span class="sh">"""</span>
        
        <span class="c1"># Access relevant memories across systems
</span>        <span class="n">billing_history</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">get_billing_history</span><span class="p">(</span>
            <span class="n">customer_id</span><span class="o">=</span><span class="n">dispute</span><span class="p">.</span><span class="n">customer_id</span><span class="p">,</span>
            <span class="n">time_range</span><span class="o">=</span><span class="n">dispute</span><span class="p">.</span><span class="n">dispute_period</span>
        <span class="p">)</span>
        
        <span class="n">service_changes</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">episodic_memory</span><span class="p">.</span><span class="nf">get_service_changes</span><span class="p">(</span>
            <span class="n">customer_id</span><span class="o">=</span><span class="n">dispute</span><span class="p">.</span><span class="n">customer_id</span><span class="p">,</span>
            <span class="n">time_range</span><span class="o">=</span><span class="n">dispute</span><span class="p">.</span><span class="n">dispute_period</span>
        <span class="p">)</span>
        
        <span class="n">policy_knowledge</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">semantic_memory</span><span class="p">.</span><span class="nf">get_policies</span><span class="p">(</span>
            <span class="n">categories</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">billing</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">disputes</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">adjustments</span><span class="sh">'</span><span class="p">]</span>
        <span class="p">)</span>
        
        <span class="n">resolution_procedures</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">memory</span><span class="p">.</span><span class="n">procedural_memory</span><span class="p">.</span><span class="nf">get_procedures</span><span class="p">(</span>
            <span class="n">category</span><span class="o">=</span><span class="sh">'</span><span class="s">billing_dispute</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">dispute_type</span><span class="o">=</span><span class="n">dispute</span><span class="p">.</span><span class="nb">type</span>
        <span class="p">)</span>
        
        <span class="c1"># Analyze dispute using all memory types
</span>        <span class="n">analysis</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_analyze_dispute</span><span class="p">(</span>
            <span class="n">dispute</span><span class="o">=</span><span class="n">dispute</span><span class="p">,</span>
            <span class="n">billing_history</span><span class="o">=</span><span class="n">billing_history</span><span class="p">,</span>
            <span class="n">service_changes</span><span class="o">=</span><span class="n">service_changes</span><span class="p">,</span>
            <span class="n">policies</span><span class="o">=</span><span class="n">policy_knowledge</span><span class="p">,</span>
            <span class="n">procedures</span><span class="o">=</span><span class="n">resolution_procedures</span>
        <span class="p">)</span>
        
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_resolve_dispute</span><span class="p">(</span><span class="n">analysis</span><span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="anomaly-detection-and-handling">Anomaly Detection and Handling</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AnomalyDetectionSystem</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Detects and handles various types of anomalies in agent behavior</span><span class="sh">"""</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">anomaly_patterns</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_anomaly_patterns</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">alert_system</span> <span class="o">=</span> <span class="nc">AlertSystem</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">monitor_agent_behavior</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                   <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                                   <span class="n">time_window</span><span class="p">:</span> <span class="n">timedelta</span><span class="p">):</span>
        <span class="c1"># Collect metrics
</span>        <span class="n">metrics</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_metrics</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">time_window</span><span class="p">)</span>
        
        <span class="c1"># Check for different types of anomalies
</span>        <span class="n">anomalies</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># 1. Performance Anomalies
</span>        <span class="n">perf_anomalies</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_performance_anomalies</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">perf_anomalies</span><span class="p">:</span>
            <span class="n">anomalies</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">perf_anomalies</span><span class="p">)</span>
            
        <span class="c1"># 2. Behavioral Anomalies
</span>        <span class="n">behavior_anomalies</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_behavioral_anomalies</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">behavior_anomalies</span><span class="p">:</span>
            <span class="n">anomalies</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">behavior_anomalies</span><span class="p">)</span>
            
        <span class="c1"># 3. Resource Usage Anomalies
</span>        <span class="n">resource_anomalies</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_resource_anomalies</span><span class="p">(</span><span class="n">metrics</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">resource_anomalies</span><span class="p">:</span>
            <span class="n">anomalies</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">resource_anomalies</span><span class="p">)</span>
            
        <span class="c1"># Handle detected anomalies
</span>        <span class="k">for</span> <span class="n">anomaly</span> <span class="ow">in</span> <span class="n">anomalies</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_anomaly</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">anomaly</span><span class="p">)</span>
            
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_check_performance_anomalies</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                         <span class="n">metrics</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Anomaly</span><span class="p">]:</span>
        <span class="n">anomalies</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># Check response time spikes
</span>        <span class="k">if</span> <span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">avg_response_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">thresholds</span><span class="p">[</span><span class="sh">'</span><span class="s">response_time</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">anomalies</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
                <span class="nc">Anomaly</span><span class="p">(</span>
                    <span class="nb">type</span><span class="o">=</span><span class="sh">'</span><span class="s">performance</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">subtype</span><span class="o">=</span><span class="sh">'</span><span class="s">response_time_spike</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">severity</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">_calculate_severity</span><span class="p">(</span>
                        <span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">avg_response_time</span><span class="sh">'</span><span class="p">],</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">thresholds</span><span class="p">[</span><span class="sh">'</span><span class="s">response_time</span><span class="sh">'</span><span class="p">]</span>
                    <span class="p">)</span>
                <span class="p">)</span>
            <span class="p">)</span>
            
        <span class="c1"># Check accuracy drops
</span>        <span class="k">if</span> <span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">thresholds</span><span class="p">[</span><span class="sh">'</span><span class="s">min_accuracy</span><span class="sh">'</span><span class="p">]:</span>
            <span class="n">anomalies</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
                <span class="nc">Anomaly</span><span class="p">(</span>
                    <span class="nb">type</span><span class="o">=</span><span class="sh">'</span><span class="s">performance</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">subtype</span><span class="o">=</span><span class="sh">'</span><span class="s">accuracy_drop</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">severity</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">_calculate_severity</span><span class="p">(</span>
                        <span class="n">metrics</span><span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">],</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">thresholds</span><span class="p">[</span><span class="sh">'</span><span class="s">min_accuracy</span><span class="sh">'</span><span class="p">]</span>
                    <span class="p">)</span>
                <span class="p">)</span>
            <span class="p">)</span>
            
        <span class="k">return</span> <span class="n">anomalies</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_handle_anomaly</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                            <span class="n">agent</span><span class="p">:</span> <span class="n">BaseAgent</span><span class="p">,</span>
                            <span class="n">anomaly</span><span class="p">:</span> <span class="n">Anomaly</span><span class="p">):</span>
        <span class="c1"># Log anomaly
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_log_anomaly</span><span class="p">(</span><span class="n">anomaly</span><span class="p">)</span>
        
        <span class="c1"># Take corrective action based on anomaly type
</span>        <span class="n">match</span> <span class="n">anomaly</span><span class="p">.</span><span class="nb">type</span><span class="p">:</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">performance</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_performance_anomaly</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">anomaly</span><span class="p">)</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">behavioral</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_behavioral_anomaly</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">anomaly</span><span class="p">)</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">resource</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_handle_resource_anomaly</span><span class="p">(</span><span class="n">agent</span><span class="p">,</span> <span class="n">anomaly</span><span class="p">)</span>
                
        <span class="c1"># Alert appropriate teams
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">alert_system</span><span class="p">.</span><span class="nf">send_alert</span><span class="p">(</span>
            <span class="n">anomaly</span><span class="o">=</span><span class="n">anomaly</span><span class="p">,</span>
            <span class="n">agent</span><span class="o">=</span><span class="n">agent</span>
        <span class="p">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="prompt-evolution-examples">Prompt Evolution Examples</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PromptEvolutionSystem</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Evolves prompts based on specific performance patterns</span><span class="sh">"""</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">evolve_customer_service_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                           <span class="n">performance_data</span><span class="p">:</span> <span class="n">PerformanceData</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Example: Evolving customer service prompt based on metrics</span><span class="sh">"""</span>
        
        <span class="n">current_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_current_prompt</span><span class="p">(</span><span class="sh">'</span><span class="s">customer_service</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># Check for specific performance patterns
</span>        <span class="n">enhancements</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># Pattern 1: Low empathy scores
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">.</span><span class="n">empathy_score</span> <span class="o">&lt;</span> <span class="mf">0.7</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Enhanced Empathy Guidelines:
            - Always acknowledge customer emotions first
            - Use phrases like </span><span class="sh">"</span><span class="s">I understand how frustrating this is</span><span class="sh">"</span><span class="s">
            - Validate customer concerns before moving to solutions
            - Show continuous engagement with active listening signals
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="c1"># Pattern 2: Verbose responses
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">.</span><span class="n">avg_response_length</span> <span class="o">&gt;</span> <span class="mi">200</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Conciseness Guidelines:
            - Start with the most important information
            - Use bullet points for multiple steps
            - Break complex information into digestible chunks
            - Confirm understanding before elaborating
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="c1"># Pattern 3: Missing context utilization
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">.</span><span class="n">context_usage_score</span> <span class="o">&lt;</span> <span class="mf">0.8</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Context Utilization Guidelines:
            - Review full customer history before responding
            - Reference previous interactions when relevant
            - Connect current issue with past resolutions
            - Use customer preferences in solutions
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_merge_enhancements</span><span class="p">(</span><span class="n">current_prompt</span><span class="p">,</span> <span class="n">enhancements</span><span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">evolve_technical_support_prompt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                            <span class="n">performance_data</span><span class="p">:</span> <span class="n">PerformanceData</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Example: Evolving technical support prompt based on metrics</span><span class="sh">"""</span>
        
        <span class="n">current_prompt</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_current_prompt</span><span class="p">(</span><span class="sh">'</span><span class="s">technical_support</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">enhancements</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="c1"># Pattern 1: Incomplete diagnostics
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">.</span><span class="n">diagnostic_completion</span> <span class="o">&lt;</span> <span class="mf">0.9</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Diagnostic Completeness Guidelines:
            - Always complete the full diagnostic checklist
            - Document each step</span><span class="sh">'</span><span class="s">s results
            - Explain why steps were skipped if any
            - Confirm resolution with testing
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="c1"># Pattern 2: Poor solution explanation
</span>        <span class="k">if</span> <span class="n">performance_data</span><span class="p">.</span><span class="n">solution_clarity</span> <span class="o">&lt;</span> <span class="mf">0.8</span><span class="p">:</span>
            <span class="n">enhancements</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            Solution Clarity Guidelines:
            - Break down technical concepts
            - Use analogies for complex issues
            - Provide step-by-step instructions
            - Include verification steps
            </span><span class="sh">"""</span><span class="p">)</span>
            
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_merge_enhancements</span><span class="p">(</span><span class="n">current_prompt</span><span class="p">,</span> <span class="n">enhancements</span><span class="p">)</span>
</code></pre></div></div> <p><br/> <br/></p> <h2 id="conclusion">Conclusion</h2> <p><br/></p> <p>Building autonomous agent systems is both an art and a science. While we’ve covered the technical architecture, memory systems, and monitoring capabilities in depth, the real challenge lies in creating agents that can handle the unpredictable nature of customer interactions while continuously improving their capabilities.</p> <p>The future of these systems isn’t just about processing power or sophisticated algorithms - it’s about creating intelligent, adaptive agents that can work together seamlessly to solve real customer problems. Whether it’s handling complex technical troubleshooting or managing delicate customer situations, the goal is to build systems that are both powerful and practical.</p> <p>Now, for the detailed technical conclusions…</p> <p>Building autonomous multi-agent systems requires careful attention to several critical aspects:</p> <ol> <li>Memory Management <ul> <li>Hierarchical memory systems allow agents to maintain context and learn from experience</li> <li>Different memory types serve specific purposes and must work together seamlessly</li> <li>Efficient retrieval strategies are crucial for system performance</li> </ul> </li> <li>Monitoring and Adaptation <ul> <li>Comprehensive monitoring helps detect and address issues early</li> <li>Anomaly detection systems protect against degraded performance</li> <li>Adaptive systems can self-improve based on performance metrics</li> </ul> </li> <li>Prompt Engineering <ul> <li>Prompts must evolve based on performance data</li> <li>Different agent roles require specialized prompts</li> <li>Regular evaluation and refinement improve agent effectiveness</li> </ul> </li> <li>System Integration <ul> <li>Components must work together cohesively</li> <li>Error handling should be robust and graceful</li> <li>Performance optimization needs to consider the entire system</li> </ul> </li> </ol> <p>The future of autonomous agent systems lies in their ability to:</p> <ul> <li>Learn and adapt from experience</li> <li>Handle complex scenarios with multiple memory types</li> <li>Maintain performance under varying conditions</li> <li>Evolve their capabilities over time</li> </ul> <p>As these systems continue to evolve, the focus should be on:</p> <ul> <li>Improving memory retrieval efficiency</li> <li>Enhancing prompt evolution mechanisms</li> <li>Developing better monitoring and adaptation systems</li> <li>Creating more sophisticated integration patterns</li> </ul> <p>Remember that building such systems requires careful balance between complexity and maintainability. Start with core functionalities and gradually add sophistication based on real-world performance data and requirements.</p> <p>We will cover more in the upcoming blog posts. Stay tuned.</p>]]></content><author><name></name></author><category term="architecture"/><category term="genai"/><category term="casetudy"/><category term="system-design"/><category term="genai"/><category term="architecture"/><category term="casestudy"/><category term="system-design"/><summary type="html"><![CDATA[Dive into the world of autonomous AI agents with practical implementations, code examples, and real-world scenarios. Learn how to build intelligent systems with advanced memory management, dynamic prompt evolution, and sophisticated monitoring capabilities in telecom customer service.]]></summary></entry><entry><title type="html">Engineering Multi-Agent Systems - A Retail Banking Case Study</title><link href="https://subhadipmitra.com/blog/2024/retail-bank-multi-agent-system/" rel="alternate" type="text/html" title="Engineering Multi-Agent Systems - A Retail Banking Case Study"/><published>2024-12-28T12:15:13+00:00</published><updated>2024-12-28T12:15:13+00:00</updated><id>https://subhadipmitra.com/blog/2024/retail-bank-multi-agent-system</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/retail-bank-multi-agent-system/"><![CDATA[<blockquote> <p>Note: this blog post covers traditional software agents and doesn’t cover generative AI or autonomous agents. For a GenAI Agents System design case study, refer to <a href="https://subhadipmitra.com/blog/2025/telecom-autonomous-multi-agent-genai-system/">this post</a>.</p> </blockquote> <p>Modern retail banking systems face complex challenges that demand sophisticated technical solutions. In this deep dive, we’ll explore how multi-agent architectures solve real problems in credit assessment systems, using a production-grade implementation as our guide.</p> <h2 id="the-credit-assessment-challenge">The Credit Assessment Challenge</h2> <p>A bank’s credit assessment system needs to:</p> <ul> <li>Process thousands of applications simultaneously</li> <li>Integrate with multiple external systems</li> <li>Maintain strict compliance and audit trails</li> <li>Provide real-time decisions when possible</li> <li>Scale during high-demand periods (like tax season)</li> <li>Handle system failures gracefully</li> </ul> <p>Traditional monolithic architectures struggle with these requirements. Let’s explore how a multi-agent system addresses these challenges.</p> <h2 id="system-architecture">System Architecture</h2> <p>Our credit assessment system uses specialized agents that each handle specific aspects of the loan application process:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/agents-fsi-system-architecture-480.webp 480w,/assets/img/blog/agents-fsi-system-architecture-800.webp 800w,/assets/img/blog/agents-fsi-system-architecture-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/agents-fsi-system-architecture.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <h3 id="key-components">Key Components</h3> <ol> <li>Income Verification Agent <ul> <li>Processes bank statements and pay stubs</li> <li>Verifies employment information</li> <li>Calculates income stability metrics</li> </ul> </li> <li>Credit Bureau Agent <ul> <li>Manages rate-limited API access to credit bureaus</li> <li>Normalizes data from multiple bureaus</li> <li>Maintains score history and change tracking</li> </ul> </li> <li>Fraud Detection Agent <ul> <li>Runs ML models for fraud detection</li> <li>Performs velocity checks</li> <li>Manages investigation workflows</li> </ul> </li> <li>Risk Assessment Agent <ul> <li>Calculates debt-to-income ratios</li> <li>Evaluates borrower risk profiles</li> <li>Applies regulatory rules</li> </ul> </li> </ol> <h2 id="implementation-deep-dive">Implementation Deep Dive</h2> <p>Let’s examine how these components work together in practice.</p> <h3 id="application-flow">Application Flow</h3> <p>The diagram below shows how a typical application flows through the system:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/credit-assessment-process-flow-480.webp 480w,/assets/img/blog/credit-assessment-process-flow-800.webp 800w,/assets/img/blog/credit-assessment-process-flow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/credit-assessment-process-flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <h3 id="code-implementation">Code Implementation</h3> <p>Below is a sample representative implementation.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">List</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">aioredis</span>
<span class="kn">import</span> <span class="n">logging</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">CreditDecision</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">APPROVED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">approved</span><span class="sh">"</span>
    <span class="n">DECLINED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">declined</span><span class="sh">"</span>
    <span class="n">REFER</span> <span class="o">=</span> <span class="sh">"</span><span class="s">refer_to_underwriter</span><span class="sh">"</span>
    <span class="n">ERROR</span> <span class="o">=</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">LoanApplication</span><span class="p">:</span>
    <span class="n">application_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">loan_amount</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">term_months</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">purpose</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">submitted_at</span><span class="p">:</span> <span class="n">datetime</span>
    <span class="n">income_docs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">status</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">CreditAssessment</span><span class="p">:</span>
    <span class="n">credit_score</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">delinquencies</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">total_debt</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">monthly_obligations</span><span class="p">:</span> <span class="nb">float</span>

<span class="k">class</span> <span class="nc">IncomeVerificationAgent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">redis_client</span><span class="p">:</span> <span class="n">aioredis</span><span class="p">.</span><span class="n">Redis</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_ttl</span> <span class="o">=</span> <span class="mi">3600</span>  <span class="c1"># 1 hour
</span>        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">verify_income</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">cache_key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">income::</span><span class="si">{</span><span class="n">application</span><span class="p">.</span><span class="n">customer_id</span><span class="si">}</span><span class="sh">"</span>
        
        <span class="c1"># Check cache first
</span>        <span class="n">cached</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">cached</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">cached</span><span class="p">)</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Process bank statements using OCR and ML
</span>            <span class="n">income_data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_bank_statements</span><span class="p">(</span>
                <span class="n">application</span><span class="p">.</span><span class="n">income_docs</span>
            <span class="p">)</span>
            
            <span class="c1"># Verify against employer records
</span>            <span class="n">employer_data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_verify_employment</span><span class="p">(</span>
                <span class="n">application</span><span class="p">.</span><span class="n">customer_id</span>
            <span class="p">)</span>
            
            <span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">monthly_income</span><span class="sh">"</span><span class="p">:</span> <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">average_monthly_income</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">income_stability</span><span class="sh">"</span><span class="p">:</span> <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">stability_score</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">employment_verified</span><span class="sh">"</span><span class="p">:</span> <span class="n">employer_data</span><span class="p">[</span><span class="sh">"</span><span class="s">verified</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">employer</span><span class="sh">"</span><span class="p">:</span> <span class="n">employer_data</span><span class="p">[</span><span class="sh">"</span><span class="s">employer_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">length_of_employment</span><span class="sh">"</span><span class="p">:</span> <span class="n">employer_data</span><span class="p">[</span><span class="sh">"</span><span class="s">years_employed</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">}</span>
            
            <span class="c1"># Cache the result
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span>
                <span class="n">cache_key</span><span class="p">,</span> 
                <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">),</span>
                <span class="n">ex</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">cache_ttl</span>
            <span class="p">)</span>
            
            <span class="k">return</span> <span class="n">result</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Income verification failed: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">raise</span>

<span class="k">class</span> <span class="nc">FraudDetectionAgent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_endpoint</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model_endpoint</span> <span class="o">=</span> <span class="n">model_endpoint</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">check_fraud</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">,</span> 
                         <span class="n">income_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Prepare features for fraud detection
</span>            <span class="n">features</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">customer_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">application</span><span class="p">.</span><span class="n">customer_id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">loan_amount</span><span class="sh">"</span><span class="p">:</span> <span class="n">application</span><span class="p">.</span><span class="n">loan_amount</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">income</span><span class="sh">"</span><span class="p">:</span> <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">monthly_income</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">purpose</span><span class="sh">"</span><span class="p">:</span> <span class="n">application</span><span class="p">.</span><span class="n">purpose</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">application_timestamp</span><span class="sh">"</span><span class="p">:</span> <span class="n">application</span><span class="p">.</span><span class="n">submitted_at</span><span class="p">.</span><span class="nf">isoformat</span><span class="p">()</span>
            <span class="p">}</span>
            
            <span class="c1"># Call fraud detection model
</span>            <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span>
                <span class="n">self</span><span class="p">.</span><span class="n">model_endpoint</span><span class="p">,</span>
                <span class="n">json</span><span class="o">=</span><span class="n">features</span>
            <span class="p">)</span> <span class="k">as</span> <span class="n">response</span><span class="p">:</span>
                <span class="n">prediction</span> <span class="o">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
                
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">fraud_score</span><span class="sh">"</span><span class="p">:</span> <span class="n">prediction</span><span class="p">[</span><span class="sh">"</span><span class="s">fraud_probability</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">risk_flags</span><span class="sh">"</span><span class="p">:</span> <span class="n">prediction</span><span class="p">[</span><span class="sh">"</span><span class="s">risk_flags</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">velocity_check</span><span class="sh">"</span><span class="p">:</span> <span class="n">prediction</span><span class="p">[</span><span class="sh">"</span><span class="s">velocity_check_result</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">}</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Fraud check failed: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">raise</span>

<span class="k">class</span> <span class="nc">CreditAssessmentOrchestrator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                 <span class="n">income_agent</span><span class="p">:</span> <span class="n">IncomeVerificationAgent</span><span class="p">,</span>
                 <span class="n">fraud_agent</span><span class="p">:</span> <span class="n">FraudDetectionAgent</span><span class="p">,</span>
                 <span class="n">redis_client</span><span class="p">:</span> <span class="n">aioredis</span><span class="p">.</span><span class="n">Redis</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">income_agent</span> <span class="o">=</span> <span class="n">income_agent</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fraud_agent</span> <span class="o">=</span> <span class="n">fraud_agent</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_client</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">process_application</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CreditDecision</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Start timing for SLA tracking
</span>            <span class="n">start_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
            
            <span class="c1"># Step 1: Verify Income
</span>            <span class="n">income_data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">income_agent</span><span class="p">.</span><span class="nf">verify_income</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
            
            <span class="c1"># Quick fail if income is insufficient
</span>            <span class="k">if</span> <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">monthly_income</span><span class="sh">"</span><span class="p">]</span> <span class="o">*</span> <span class="mf">0.4</span> <span class="o">&lt;</span> \
               <span class="n">self</span><span class="p">.</span><span class="nf">_calculate_monthly_payment</span><span class="p">(</span><span class="n">application</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">DECLINED</span>
            
            <span class="c1"># Step 2: Fraud Check
</span>            <span class="n">fraud_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">fraud_agent</span><span class="p">.</span><span class="nf">check_fraud</span><span class="p">(</span>
                <span class="n">application</span><span class="p">,</span> <span class="n">income_data</span>
            <span class="p">)</span>
            
            <span class="k">if</span> <span class="n">fraud_result</span><span class="p">[</span><span class="sh">"</span><span class="s">fraud_score</span><span class="sh">"</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.7</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_trigger_fraud_investigation</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">DECLINED</span>
            
            <span class="c1"># Step 3: Credit Bureau Check
</span>            <span class="n">credit_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_credit_bureau</span><span class="p">(</span>
                <span class="n">application</span><span class="p">.</span><span class="n">customer_id</span>
            <span class="p">)</span>
            
            <span class="c1"># Step 4: Calculate debt-to-income ratio
</span>            <span class="n">dti</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_calculate_dti</span><span class="p">(</span>
                <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">monthly_income</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">credit_result</span><span class="p">[</span><span class="sh">"</span><span class="s">monthly_obligations</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">)</span>
            
            <span class="c1"># Final decision logic
</span>            <span class="n">decision</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_decision</span><span class="p">(</span>
                <span class="n">credit_score</span><span class="o">=</span><span class="n">credit_result</span><span class="p">[</span><span class="sh">"</span><span class="s">credit_score</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">fraud_score</span><span class="o">=</span><span class="n">fraud_result</span><span class="p">[</span><span class="sh">"</span><span class="s">fraud_score</span><span class="sh">"</span><span class="p">],</span>
                <span class="n">dti</span><span class="o">=</span><span class="n">dti</span><span class="p">,</span>
                <span class="n">income_stability</span><span class="o">=</span><span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">income_stability</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">)</span>
            
            <span class="c1"># Log decision for audit
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_log_decision</span><span class="p">(</span>
                <span class="n">application</span><span class="p">,</span> <span class="n">decision</span><span class="p">,</span> <span class="n">start_time</span><span class="p">,</span>
                <span class="n">income_data</span><span class="p">,</span> <span class="n">fraud_result</span><span class="p">,</span> <span class="n">credit_result</span>
            <span class="p">)</span>
            
            <span class="k">return</span> <span class="n">decision</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span>
                <span class="sa">f</span><span class="sh">"</span><span class="s">Application processing failed: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">ERROR</span>
    
    <span class="k">def</span> <span class="nf">_calculate_monthly_payment</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                                 <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="c1"># Implement actual payment calculation logic
</span>        <span class="n">rate</span> <span class="o">=</span> <span class="mf">0.05</span>  <span class="c1"># Example annual interest rate
</span>        <span class="n">monthly_rate</span> <span class="o">=</span> <span class="n">rate</span> <span class="o">/</span> <span class="mi">12</span>
        <span class="n">term</span> <span class="o">=</span> <span class="n">application</span><span class="p">.</span><span class="n">term_months</span>
        
        <span class="nf">return </span><span class="p">(</span><span class="n">application</span><span class="p">.</span><span class="n">loan_amount</span> <span class="o">*</span> <span class="n">monthly_rate</span> <span class="o">*</span> 
                <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">monthly_rate</span><span class="p">)</span><span class="o">**</span><span class="n">term</span><span class="p">)</span> <span class="o">/</span> \
               <span class="p">((</span><span class="mi">1</span> <span class="o">+</span> <span class="n">monthly_rate</span><span class="p">)</span><span class="o">**</span><span class="n">term</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">_calculate_dti</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">monthly_income</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> 
                      <span class="n">obligations</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">obligations</span> <span class="o">/</span> <span class="n">monthly_income</span>
    
    <span class="k">def</span> <span class="nf">_make_decision</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">credit_score</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> 
                      <span class="n">fraud_score</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span>
                      <span class="n">dti</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> 
                      <span class="n">income_stability</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CreditDecision</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">credit_score</span> <span class="o">&gt;=</span> <span class="mi">700</span> <span class="ow">and</span> <span class="n">fraud_score</span> <span class="o">&lt;</span> <span class="mf">0.3</span> <span class="ow">and</span> \
           <span class="n">dti</span> <span class="o">&lt;</span> <span class="mf">0.43</span> <span class="ow">and</span> <span class="n">income_stability</span> <span class="o">&gt;</span> <span class="mf">0.8</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">APPROVED</span>
        <span class="k">elif</span> <span class="n">credit_score</span> <span class="o">&lt;</span> <span class="mi">580</span> <span class="ow">or</span> <span class="n">fraud_score</span> <span class="o">&gt;</span> <span class="mf">0.7</span> <span class="ow">or</span> <span class="n">dti</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">DECLINED</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">REFER</span>

</code></pre></div></div> <p>The heart of our system is the <code class="language-plaintext highlighter-rouge">CreditAssessmentOrchestrator</code>. Here’s how it processes applications:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">process_application</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CreditDecision</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Start timing for SLA tracking
</span>        <span class="n">start_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
        
        <span class="c1"># Step 1: Verify Income
</span>        <span class="n">income_data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">income_agent</span><span class="p">.</span><span class="nf">verify_income</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
        
        <span class="c1"># Quick fail if income is insufficient
</span>        <span class="k">if</span> <span class="n">income_data</span><span class="p">[</span><span class="sh">"</span><span class="s">monthly_income</span><span class="sh">"</span><span class="p">]</span> <span class="o">*</span> <span class="mf">0.4</span> <span class="o">&lt;</span> \
           <span class="n">self</span><span class="p">.</span><span class="nf">_calculate_monthly_payment</span><span class="p">(</span><span class="n">application</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">CreditDecision</span><span class="p">.</span><span class="n">DECLINED</span>
</code></pre></div></div> <p>This code demonstrates several key patterns:</p> <ul> <li>Async processing for improved throughput</li> <li>Early rejection for obvious failures</li> <li>SLA monitoring</li> <li>Structured error handling</li> </ul> <h3 id="state-management">State Management</h3> <p>State management is crucial in credit assessment. Our <code class="language-plaintext highlighter-rouge">IncomeVerificationAgent</code> shows how to handle this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">verify_income</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">cache_key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">income::</span><span class="si">{</span><span class="n">application</span><span class="p">.</span><span class="n">customer_id</span><span class="si">}</span><span class="sh">"</span>
    
    <span class="c1"># Check cache first
</span>    <span class="n">cached</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">cached</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">cached</span><span class="p">)</span>
</code></pre></div></div> <p>This implementation:</p> <ul> <li>Uses Redis for distributed caching</li> <li>Implements TTL for regulatory compliance</li> <li>Maintains audit trails</li> <li>Handles race conditions</li> </ul> <h2 id="production-considerations">Production Considerations</h2> <h3 id="scaling-characteristics">Scaling Characteristics</h3> <p>Our production system handles varying load profiles:</p> <ul> <li>Normal operation: 100-200 applications/minute</li> <li>Peak periods (tax season): 500-600 applications/minute</li> <li>Batch processing: Up to 10,000 applications/hour</li> </ul> <p>Key scaling strategies:</p> <ol> <li>Horizontal scaling of stateless agents</li> <li>Redis cluster for state management</li> <li>Partitioned queues for better throughput</li> <li>Read replicas for reporting queries</li> </ol> <h3 id="performance-optimizations">Performance Optimizations</h3> <p>Real-world performance improvements implemented:</p> <ol> <li>Smart Batching <ul> <li>Group credit bureau checks by provider</li> <li>Batch document processing jobs</li> <li>Combine similar ML model inferences</li> </ul> </li> <li>Caching Strategy <ul> <li>Cache income verification results (1-hour TTL)</li> <li>Cache credit scores (24-hour TTL)</li> <li>No caching of fraud checks (real-time requirement)</li> </ul> </li> <li>Resource Management <ul> <li>Connection pooling for external APIs</li> <li>Managed thread pools for CPU-intensive tasks</li> <li>Rate limiting for external service calls</li> <li>Dynamic queue sizing based on load</li> </ul> </li> </ol> <h3 id="error-handling-in-production">Error Handling in Production</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/credit-system-failure-handling-480.webp 480w,/assets/img/blog/credit-system-failure-handling-800.webp 800w,/assets/img/blog/credit-system-failure-handling-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/credit-system-failure-handling.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>When dealing with financial transactions, error handling becomes critical. Our system implements several layers of protection:</p> <ol> <li>Circuit Breakers <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreditBureauService</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">failure_count</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="n">self</span><span class="p">.</span><span class="n">last_failure</span> <span class="o">=</span> <span class="bp">None</span>
     <span class="n">self</span><span class="p">.</span><span class="n">circuit_open</span> <span class="o">=</span> <span class="bp">False</span>
        
 <span class="k">async</span> <span class="k">def</span> <span class="nf">check_credit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
     <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">circuit_open</span><span class="p">:</span>
         <span class="nf">if </span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">last_failure</span><span class="p">).</span><span class="n">seconds</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">:</span>
             <span class="k">raise</span> <span class="nc">CircuitBreakerError</span><span class="p">(</span><span class="sh">"</span><span class="s">Credit bureau service unavailable</span><span class="sh">"</span><span class="p">)</span>
         <span class="n">self</span><span class="p">.</span><span class="n">circuit_open</span> <span class="o">=</span> <span class="bp">False</span>
            
     <span class="k">try</span><span class="p">:</span>
         <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_bureau_call</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
     <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
         <span class="n">self</span><span class="p">.</span><span class="n">failure_count</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="n">self</span><span class="p">.</span><span class="n">last_failure</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
         <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">failure_count</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">:</span>
             <span class="n">self</span><span class="p">.</span><span class="n">circuit_open</span> <span class="o">=</span> <span class="bp">True</span>
         <span class="k">raise</span>
</code></pre></div> </div> </li> <li>Retry Mechanisms <ul> <li>Exponential backoff for transient failures</li> <li>Different strategies for different error types: <ul> <li>Retry immediately for timeouts</li> <li>Delay for rate limiting</li> <li>No retry for validation errors</li> </ul> </li> </ul> </li> <li>Dead Letter Queues <ul> <li>Failed applications are moved to analysis queues</li> <li>Automated recovery for known error patterns</li> <li>Manual review triggers for unknown failures</li> </ul> </li> </ol> <h2 id="compliance-and-audit-requirements">Compliance and Audit Requirements</h2> <p>Financial systems require stringent compliance measures. Our architecture addresses these through:</p> <h3 id="1-comprehensive-logging">1. Comprehensive Logging</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">AuditLog</span><span class="p">:</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="n">datetime</span>
    <span class="n">application_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">action</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">agent_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">input_data</span><span class="p">:</span> <span class="n">Dict</span>
    <span class="n">output_data</span><span class="p">:</span> <span class="n">Dict</span>
    <span class="n">processing_time</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">error_details</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">AuditLogger</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">log_action</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> 
                        <span class="n">application</span><span class="p">:</span> <span class="n">LoanApplication</span><span class="p">,</span>
                        <span class="n">action</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                        <span class="n">input_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                        <span class="n">output_data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">,</span>
                        <span class="n">error</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">log_entry</span> <span class="o">=</span> <span class="nc">AuditLog</span><span class="p">(</span>
            <span class="n">timestamp</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">(),</span>
            <span class="n">application_id</span><span class="o">=</span><span class="n">application</span><span class="p">.</span><span class="n">application_id</span><span class="p">,</span>
            <span class="n">action</span><span class="o">=</span><span class="n">action</span><span class="p">,</span>
            <span class="n">agent_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">agent_id</span><span class="p">,</span>
            <span class="n">input_data</span><span class="o">=</span><span class="n">input_data</span><span class="p">,</span>
            <span class="n">output_data</span><span class="o">=</span><span class="n">output_data</span><span class="p">,</span>
            <span class="n">processing_time</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">start_time</span><span class="p">,</span>
            <span class="n">error_details</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="k">if</span> <span class="n">error</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="p">)</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_persist_log</span><span class="p">(</span><span class="n">log_entry</span><span class="p">)</span>
</code></pre></div></div> <h3 id="2-data-retention">2. Data Retention</h3> <ul> <li>Configurable retention periods by data type</li> <li>Automated archival processes</li> <li>Secure data disposal workflows</li> </ul> <h3 id="3-access-controls">3. Access Controls</h3> <ul> <li>Role-based access for different agent types</li> <li>Audit trails for all data access</li> <li>Encryption for sensitive data fields</li> </ul> <h2 id="monitoring-and-observability">Monitoring and Observability</h2> <p>In production, visibility into system behavior is crucial. Our monitoring setup includes:</p> <ol> <li>Business Metrics <ul> <li>Application approval rates</li> <li>Average decision time</li> <li>Agent processing rates</li> <li>Queue depths</li> </ul> </li> <li>Technical Metrics <ul> <li>External API latencies</li> <li>Cache hit rates</li> <li>Database IOPS</li> <li>Memory utilization</li> </ul> </li> <li>Alerting Rules <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MetricsCollector</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">metrics</span> <span class="o">=</span> <span class="p">{}</span>
        
 <span class="k">async</span> <span class="k">def</span> <span class="nf">track_decision_time</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start_time</span><span class="p">:</span> <span class="n">datetime</span><span class="p">):</span>
     <span class="n">processing_time</span> <span class="o">=</span> <span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">).</span><span class="nf">total_seconds</span><span class="p">()</span>
     <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">push_metric</span><span class="p">(</span><span class="sh">'</span><span class="s">decision_time</span><span class="sh">'</span><span class="p">,</span> <span class="n">processing_time</span><span class="p">)</span>
        
     <span class="k">if</span> <span class="n">processing_time</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">:</span>  <span class="c1"># SLA threshold
</span>         <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">alert_slow_processing</span><span class="p">(</span><span class="n">processing_time</span><span class="p">)</span>
</code></pre></div> </div> </li> </ol> <h2 id="performance-testing-and-benchmarking">Performance Testing and Benchmarking</h2> <p>Before deploying our multi-agent credit assessment system, we conducted extensive performance testing. Here’s what we learned:</p> <h3 id="load-testing-results">Load Testing Results</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PerformanceTester</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_load_test</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">concurrent_users</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">duration_seconds</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">test_results</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">async</span> <span class="k">def</span> <span class="nf">simulate_user</span><span class="p">():</span>
            <span class="k">while</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span> <span class="o">&lt;</span> <span class="n">duration_seconds</span><span class="p">:</span>
                <span class="n">application</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">generate_test_application</span><span class="p">()</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
                    <span class="n">decision</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">orchestrator</span><span class="p">.</span><span class="nf">process_application</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
                    <span class="n">elapsed</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
                    <span class="n">test_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">latency</span><span class="sh">'</span><span class="p">:</span> <span class="n">elapsed</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">decision</span><span class="sh">'</span><span class="p">:</span> <span class="n">decision</span>
                    <span class="p">})</span>
                <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="n">test_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
                    <span class="p">})</span>
                <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">uniform</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
        
        <span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="nf">simulate_user</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">concurrent_users</span><span class="p">)]</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="n">users</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">analyze_results</span><span class="p">(</span><span class="n">test_results</span><span class="p">)</span>
</code></pre></div></div> <p>Key findings from our load tests:</p> <ol> <li>Throughput Characteristics <ul> <li>Baseline: 100 requests/second with 95th percentile latency &lt; 500ms</li> <li>Max throughput: 350 requests/second before degradation</li> <li>Memory usage grows linearly until 250 requests/second</li> <li>Redis becomes bottleneck at 400 requests/second</li> </ul> </li> <li>Latency Breakdown <ul> <li>Credit bureau API: 35% of total latency</li> <li>Document processing: 25% of total latency</li> <li>Fraud detection: 20% of total latency</li> <li>Database operations: 15% of total latency</li> <li>Other operations: 5% of total latency</li> </ul> </li> </ol> <h3 id="bottleneck-analysis">Bottleneck Analysis</h3> <p>We identified several bottlenecks during testing:</p> <ol> <li>Document Processing Agent <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DocumentProcessingOptimization</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">thread_pool</span> <span class="o">=</span> <span class="nc">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="nf">cpu_count</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
     <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">10</span>
     <span class="n">self</span><span class="p">.</span><span class="n">processing_queue</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Queue</span><span class="p">()</span>
    
 <span class="k">async</span> <span class="k">def</span> <span class="nf">process_documents</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">documents</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]):</span>
     <span class="c1"># Batch documents for efficient processing
</span>     <span class="n">batches</span> <span class="o">=</span> <span class="p">[</span><span class="n">documents</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span><span class="p">]</span> 
               <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">documents</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span><span class="p">)]</span>
        
     <span class="k">async</span> <span class="k">def</span> <span class="nf">process_batch</span><span class="p">(</span><span class="n">batch</span><span class="p">):</span>
         <span class="k">try</span><span class="p">:</span>
             <span class="c1"># Use thread pool for CPU-intensive OCR
</span>             <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_event_loop</span><span class="p">().</span><span class="nf">run_in_executor</span><span class="p">(</span>
                 <span class="n">self</span><span class="p">.</span><span class="n">thread_pool</span><span class="p">,</span>
                 <span class="n">self</span><span class="p">.</span><span class="n">_process_batch</span><span class="p">,</span>
                 <span class="n">batch</span>
             <span class="p">)</span>
             <span class="k">return</span> <span class="n">results</span>
         <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
             <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Batch processing failed: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
             <span class="k">raise</span>
        
     <span class="c1"># Process batches concurrently
</span>     <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="nf">process_batch</span><span class="p">(</span><span class="n">batch</span><span class="p">)</span> <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">batches</span><span class="p">]</span>
     <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="n">tasks</span><span class="p">)</span>
</code></pre></div> </div> </li> <li>Credit Bureau Integration <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreditBureauOptimization</span><span class="p">:</span>
 <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
     <span class="n">self</span><span class="p">.</span><span class="n">rate_limiter</span> <span class="o">=</span> <span class="nc">AsyncRateLimiter</span><span class="p">(</span>
         <span class="n">rate</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>  <span class="c1"># requests per second
</span>         <span class="n">burst</span><span class="o">=</span><span class="mi">20</span>   <span class="c1"># burst capacity
</span>     <span class="p">)</span>
     <span class="n">self</span><span class="p">.</span><span class="n">cache</span> <span class="o">=</span> <span class="nc">TTLCache</span><span class="p">(</span>
         <span class="n">maxsize</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span>
         <span class="n">ttl</span><span class="o">=</span><span class="mi">86400</span>  <span class="c1"># 24 hours
</span>     <span class="p">)</span>
    
 <span class="k">async</span> <span class="k">def</span> <span class="nf">get_credit_report</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">customer_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
     <span class="c1"># Check cache first
</span>     <span class="n">cache_key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">credit_report:</span><span class="si">{</span><span class="n">customer_id</span><span class="si">}</span><span class="sh">"</span>
     <span class="k">if</span> <span class="n">cache_key</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">cache</span><span class="p">:</span>
         <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">cache</span><span class="p">[</span><span class="n">cache_key</span><span class="p">]</span>
        
     <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">rate_limiter</span><span class="p">:</span>
         <span class="k">try</span><span class="p">:</span>
             <span class="n">report</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_credit_report</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
             <span class="n">self</span><span class="p">.</span><span class="n">cache</span><span class="p">[</span><span class="n">cache_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">report</span>
             <span class="k">return</span> <span class="n">report</span>
         <span class="k">except</span> <span class="n">RateLimitExceeded</span><span class="p">:</span>
             <span class="c1"># Implement fallback strategy
</span>             <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_get_fallback_credit_data</span><span class="p">(</span><span class="n">customer_id</span><span class="p">)</span>
</code></pre></div> </div> </li> </ol> <h3 id="memory-profiling">Memory Profiling</h3> <p>We used memory profiling to optimize agent resource usage:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MemoryOptimizedAgent</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">object_pool</span> <span class="o">=</span> <span class="nc">ObjectPool</span><span class="p">(</span>
            <span class="n">max_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span>
            <span class="n">cleanup_interval</span><span class="o">=</span><span class="mi">300</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">process_large_document</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">document</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">object_pool</span><span class="p">.</span><span class="nf">acquire</span><span class="p">()</span> <span class="k">as</span> <span class="n">processor</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="c1"># Process document with pooled resources
</span>                <span class="k">return</span> <span class="k">await</span> <span class="n">processor</span><span class="p">.</span><span class="nf">process</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="c1"># Ensure cleanup of large objects
</span>                <span class="k">await</span> <span class="n">processor</span><span class="p">.</span><span class="nf">cleanup</span><span class="p">()</span>

<span class="nd">@memory_profile</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">profile_agent_memory</span><span class="p">():</span>
    <span class="n">agent</span> <span class="o">=</span> <span class="nc">MemoryOptimizedAgent</span><span class="p">()</span>
    <span class="n">large_docs</span> <span class="o">=</span> <span class="nf">generate_test_documents</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
    
    <span class="c1"># Monitor memory usage during processing
</span>    <span class="n">memory_samples</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">large_docs</span><span class="p">:</span>
        <span class="n">mem_before</span> <span class="o">=</span> <span class="nf">get_memory_usage</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">agent</span><span class="p">.</span><span class="nf">process_large_document</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
        <span class="n">mem_after</span> <span class="o">=</span> <span class="nf">get_memory_usage</span><span class="p">()</span>
        <span class="n">memory_samples</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">mem_after</span> <span class="o">-</span> <span class="n">mem_before</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="nf">analyze_memory_pattern</span><span class="p">(</span><span class="n">memory_samples</span><span class="p">)</span>
</code></pre></div></div> <h3 id="database-optimization">Database Optimization</h3> <p>We optimized database access patterns:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DatabaseOptimization</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pool</span> <span class="o">=</span> <span class="nc">ConnectionPool</span><span class="p">(</span>
            <span class="n">min_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
            <span class="n">max_size</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
            <span class="n">cleanup_timeout</span><span class="o">=</span><span class="mi">60</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">bulk_insert_applications</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">applications</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Application</span><span class="p">]):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">pool</span><span class="p">.</span><span class="nf">acquire</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">conn</span><span class="p">.</span><span class="nf">transaction</span><span class="p">():</span>
                <span class="c1"># Use COPY command for efficient bulk insert
</span>                <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">conn</span><span class="p">.</span><span class="nf">copy_records_to_table</span><span class="p">(</span>
                    <span class="sh">'</span><span class="s">applications</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">records</span><span class="o">=</span><span class="p">[</span><span class="n">app</span><span class="p">.</span><span class="nf">to_record</span><span class="p">()</span> <span class="k">for</span> <span class="n">app</span> <span class="ow">in</span> <span class="n">applications</span><span class="p">],</span>
                    <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">customer_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">]</span>
                <span class="p">)</span>
                <span class="k">return</span> <span class="n">result</span>
                
    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_application_batch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">pool</span><span class="p">.</span><span class="nf">acquire</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
            <span class="c1"># Use cursor-based pagination
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">conn</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="sh">"""</span><span class="s">
                SELECT * FROM applications 
                WHERE status = </span><span class="sh">'</span><span class="s">pending</span><span class="sh">'</span><span class="s">
                ORDER BY submitted_at
                LIMIT $1
            </span><span class="sh">"""</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>
</code></pre></div></div> <h2 id="agent-communication-patterns">Agent Communication Patterns</h2> <p>Understanding how agents communicate effectively is crucial for system reliability. Let’s explore the key communication patterns we’ve implemented:</p> <h3 id="1-event-based-communication">1. Event-Based Communication</h3> <p>We use a message broker for asynchronous communication between agents:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span>

<span class="k">class</span> <span class="nc">EventType</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">INCOME_VERIFIED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">income_verified</span><span class="sh">"</span>
    <span class="n">FRAUD_DETECTED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">fraud_detected</span><span class="sh">"</span>
    <span class="n">CREDIT_CHECKED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">credit_checked</span><span class="sh">"</span>
    <span class="n">DOC_PROCESSED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">doc_processed</span><span class="sh">"</span>
    <span class="n">APPLICATION_UPDATED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">application_updated</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>
    <span class="n">event_type</span><span class="p">:</span> <span class="n">EventType</span>
    <span class="n">payload</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>
    <span class="n">application_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">correlation_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">producer</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">version</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">1.0</span><span class="sh">"</span>
    <span class="n">retry_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">class</span> <span class="nc">EventPublisher</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">redis_client</span><span class="p">:</span> <span class="n">aioredis</span><span class="p">.</span><span class="n">Redis</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">event_validators</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">EventType</span><span class="p">.</span><span class="n">INCOME_VERIFIED</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_validate_income_event</span><span class="p">,</span>
            <span class="n">EventType</span><span class="p">.</span><span class="n">FRAUD_DETECTED</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_validate_fraud_event</span>
        <span class="p">}</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">Event</span><span class="p">,</span> <span class="n">channel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Version compatibility check
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_check_version_compatibility</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">VersionIncompatibleError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Event version </span><span class="si">{</span><span class="n">event</span><span class="p">.</span><span class="n">version</span><span class="si">}</span><span class="s"> not supported</span><span class="sh">"</span><span class="p">)</span>
            
            <span class="c1"># Validate event structure
</span>            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">event_type</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">event_validators</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">event_validators</span><span class="p">[</span><span class="n">event</span><span class="p">.</span><span class="n">event_type</span><span class="p">](</span><span class="n">event</span><span class="p">)</span>
            
            <span class="c1"># Publish event
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span>
                <span class="n">channel</span><span class="p">,</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">dataclasses</span><span class="p">.</span><span class="nf">asdict</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
            <span class="p">)</span>
            
            <span class="c1"># Store event for audit
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_store_event</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to publish event: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">False</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_store_event</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">Event</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Store event in time-series database for audit</span><span class="sh">"""</span>
        <span class="n">event_key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">event:</span><span class="si">{</span><span class="n">event</span><span class="p">.</span><span class="n">correlation_id</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">event</span><span class="p">.</span><span class="n">timestamp</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span>
            <span class="n">event_key</span><span class="p">,</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">dataclasses</span><span class="p">.</span><span class="nf">asdict</span><span class="p">(</span><span class="n">event</span><span class="p">)),</span>
            <span class="n">ex</span><span class="o">=</span><span class="mi">86400</span>  <span class="c1"># 24 hour retention
</span>        <span class="p">)</span>
</code></pre></div></div> <h3 id="2-request-response-pattern">2. Request-Response Pattern</h3> <p>For synchronous operations, we implement a request-response pattern with timeouts:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AgentCommunicator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="n">timeout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">target_agent</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                     <span class="n">request_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                     <span class="n">payload</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">request_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>
        
        <span class="c1"># Create future for response
</span>        <span class="n">future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">[</span><span class="n">request_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">future</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Send request
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_send_request</span><span class="p">(</span><span class="n">target_agent</span><span class="p">,</span> <span class="n">request_id</span><span class="p">,</span> <span class="n">request_type</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
            
            <span class="c1"># Wait for response with timeout
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">future</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">timeout</span><span class="p">)</span>
            
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">del</span> <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">[</span><span class="n">request_id</span><span class="p">]</span>
            <span class="k">raise</span> <span class="nc">RequestTimeoutError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Request to </span><span class="si">{</span><span class="n">target_agent</span><span class="si">}</span><span class="s"> timed out</span><span class="sh">"</span><span class="p">)</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">del</span> <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">[</span><span class="n">request_id</span><span class="p">]</span>
            <span class="k">raise</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_response</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">request_id</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">:</span>
            <span class="n">future</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">pending_requests</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">request_id</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">future</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
                <span class="n">future</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div> <h3 id="3-broadcast-patterns">3. Broadcast Patterns</h3> <p>For system-wide updates and status changes:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SystemBroadcaster</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">redis_client</span><span class="p">:</span> <span class="n">aioredis</span><span class="p">.</span><span class="n">Redis</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">broadcast_channels</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">system_status</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">system:status</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">config_updates</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">system:config</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">agent_health</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">system:health</span><span class="sh">'</span>
        <span class="p">}</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">broadcast_status</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">status</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">Broadcast system status to all agents</span><span class="sh">"""</span>
        <span class="n">message</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span>
            <span class="sh">'</span><span class="s">status</span><span class="sh">'</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">broadcast_id</span><span class="sh">'</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>
        <span class="p">}</span>
        
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span>
            <span class="n">self</span><span class="p">.</span><span class="n">broadcast_channels</span><span class="p">[</span><span class="sh">'</span><span class="s">system_status</span><span class="sh">'</span><span class="p">],</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
        <span class="p">)</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">broadcast_config_update</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">config</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">Broadcast configuration changes</span><span class="sh">"""</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span>
            <span class="n">self</span><span class="p">.</span><span class="n">broadcast_channels</span><span class="p">[</span><span class="sh">'</span><span class="s">config_updates</span><span class="sh">'</span><span class="p">],</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span>
                <span class="sh">'</span><span class="s">config</span><span class="sh">'</span><span class="p">:</span> <span class="n">config</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">version</span><span class="sh">'</span><span class="p">:</span> <span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">version</span><span class="sh">'</span><span class="p">]</span>
            <span class="p">})</span>
        <span class="p">)</span>
</code></pre></div></div> <h3 id="4-subscription-management">4. Subscription Management</h3> <p>Handling agent subscriptions and message filtering:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessageSubscriber</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">agent_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">agent_id</span> <span class="o">=</span> <span class="n">agent_id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subscriptions</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Callable</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">filters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="n">Callable</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">channel</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                       <span class="n">handler</span><span class="p">:</span> <span class="n">Callable</span><span class="p">,</span>
                       <span class="n">filters</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="n">Callable</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Subscribe to a channel with optional message filters</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">subscriptions</span><span class="p">[</span><span class="n">channel</span><span class="p">]</span> <span class="o">=</span> <span class="n">handler</span>
        <span class="k">if</span> <span class="n">filters</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">filters</span><span class="p">[</span><span class="n">channel</span><span class="p">]</span> <span class="o">=</span> <span class="n">filters</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">channel</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">channel</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">subscriptions</span><span class="p">:</span>
            <span class="k">return</span>
            
        <span class="c1"># Apply filters if any
</span>        <span class="k">if</span> <span class="n">channel</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">filters</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">filter_fn</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">filters</span><span class="p">[</span><span class="n">channel</span><span class="p">]:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">filter_fn</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
                    <span class="k">return</span>
        
        <span class="c1"># Handle message
</span>        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">subscriptions</span><span class="p">[</span><span class="n">channel</span><span class="p">](</span><span class="n">message</span><span class="p">)</span>
</code></pre></div></div> <h3 id="5-ordered-message-delivery">5. Ordered Message Delivery</h3> <p>Ensuring correct message ordering when needed:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OrderedMessageHandler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Queue</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_ordered_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">application_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> 
                                   <span class="n">sequence_number</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
                                   <span class="n">message</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">Handle messages in sequence order for a given application</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">application_id</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Queue</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            
        <span class="n">current_seq</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="n">sequence_number</span> <span class="o">==</span> <span class="n">current_seq</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
            <span class="c1"># Process message immediately
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_message</span><span class="p">(</span><span class="n">application_id</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            
            <span class="c1"># Process any queued messages
</span>            <span class="k">while</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">[</span><span class="n">application_id</span><span class="p">].</span><span class="nf">empty</span><span class="p">():</span>
                <span class="n">queued_seq</span><span class="p">,</span> <span class="n">queued_msg</span> <span class="o">=</span> \
                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">[</span><span class="n">application_id</span><span class="p">].</span><span class="nf">get</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">queued_seq</span> <span class="o">==</span> <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_process_message</span><span class="p">(</span><span class="n">application_id</span><span class="p">,</span> <span class="n">queued_msg</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">sequence_numbers</span><span class="p">[</span><span class="n">application_id</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># Put it back if it's not the next in sequence
</span>                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">[</span><span class="n">application_id</span><span class="p">].</span><span class="nf">put</span><span class="p">(</span>
                        <span class="p">(</span><span class="n">queued_seq</span><span class="p">,</span> <span class="n">queued_msg</span><span class="p">)</span>
                    <span class="p">)</span>
                    <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Queue out-of-order message
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">message_queues</span><span class="p">[</span><span class="n">application_id</span><span class="p">].</span><span class="nf">put</span><span class="p">(</span>
                <span class="p">(</span><span class="n">sequence_number</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
            <span class="p">)</span>
</code></pre></div></div> <h3 id="6-dead-letter-handling">6. Dead Letter Handling</h3> <p>Managing failed messages and retry logic:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DeadLetterQueue</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">redis_client</span><span class="p">:</span> <span class="n">aioredis</span><span class="p">.</span><span class="n">Redis</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">redis</span> <span class="o">=</span> <span class="n">redis_client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_retries</span> <span class="o">=</span> <span class="mi">3</span>
        <span class="n">self</span><span class="p">.</span><span class="n">retry_delays</span> <span class="o">=</span> <span class="p">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">900</span><span class="p">]</span>  <span class="c1"># Progressive delays in seconds
</span>    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">handle_failed_message</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> 
                                  <span class="n">error</span><span class="p">:</span> <span class="nb">Exception</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Handle failed message processing</span><span class="sh">"""</span>
        <span class="n">retry_count</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">retry_count</span><span class="sh">'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">retry_count</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">max_retries</span><span class="p">:</span>
            <span class="c1"># Move to dead letter queue for manual review
</span>            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_move_to_dlq</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
            <span class="k">return</span>
        
        <span class="c1"># Schedule retry
</span>        <span class="n">delay</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_delays</span><span class="p">[</span><span class="n">retry_count</span><span class="p">]</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_schedule_retry</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">delay</span><span class="p">)</span>
        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_schedule_retry</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">delay</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Schedule message for retry after delay</span><span class="sh">"""</span>
        <span class="n">message</span><span class="p">[</span><span class="sh">'</span><span class="s">retry_count</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">retry_count</span><span class="sh">'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">message</span><span class="p">[</span><span class="sh">'</span><span class="s">last_error_time</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="n">retry_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">+</span> <span class="n">delay</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">redis</span><span class="p">.</span><span class="nf">zadd</span><span class="p">(</span>
            <span class="sh">'</span><span class="s">message:retry_queue</span><span class="sh">'</span><span class="p">,</span>
            <span class="p">{</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">message</span><span class="p">):</span> <span class="n">retry_time</span><span class="p">}</span>
        <span class="p">)</span>
</code></pre></div></div> <p>These communication patterns form the backbone of our multi-agent system, ensuring reliable, ordered, and traceable message delivery between components. The implementation includes:</p> <ul> <li>Event validation and versioning</li> <li>Timeout handling and retries</li> <li>Message ordering guarantees</li> <li>Dead letter queuing</li> <li>Broadcast capabilities</li> <li>Subscription management</li> </ul> <p>Each pattern addresses specific needs in the credit assessment workflow while maintaining system reliability and traceability.</p> <ol> <li>Agent Design Principles <ul> <li>Start with coarse-grained agents and split as responsibilities become clearer</li> <li>Use feature flags to control agent behavior during testing</li> <li>Build comprehensive logging into each agent from the start</li> <li>Plan for version compatibility between agents</li> </ul> </li> <li>Testing Challenges <ul> <li>Simulating credit bureau responses requires extensive test data</li> <li>Fraud detection testing needs specialized synthetic data generation</li> <li>Integration testing requires careful orchestration of multiple external services</li> <li>Performance testing must account for variable API response times</li> </ul> </li> <li>Development Workflow <ul> <li>Use contract testing between agents</li> <li>Implement feature flags for gradual rollout capability</li> <li>Build comprehensive integration test suites</li> <li>Create detailed agent interaction documentation</li> </ul> </li> <li>Early Performance Findings <ul> <li>Document processing is more CPU-intensive than initially estimated</li> <li>Redis cache sizing needs careful consideration</li> <li>Credit bureau API quotas require sophisticated rate limiting</li> <li>Fraud check latency varies significantly by case complexity</li> </ul> </li> </ol> <h2 id="future-improvements">Future Improvements</h2> <p>Several enhancements are possible, some of them can be (perhaps, we will cover them in the next post):</p> <ol> <li>Machine Learning Integration <ul> <li>Real-time model retraining</li> <li>A/B testing framework</li> <li>Feature store integration</li> </ul> </li> <li>Scalability <ul> <li>Global deployment support</li> <li>Cross-region failover</li> <li>Enhanced load balancing</li> </ul> </li> <li>Developer Experience <ul> <li>Improved testing frameworks</li> <li>Better deployment automation</li> <li>Enhanced monitoring tools</li> </ul> </li> </ol> <h2 id="conclusion">Conclusion</h2> <p>Building a multi-agent system for credit assessment requires careful consideration of both technical and business requirements. The architecture presented here has proven robust in production, handling millions of credit applications while maintaining high availability and consistency.</p> <p>Remember that this implementation is specific to retail banking - your use case may require different trade-offs and design decisions. Focus on your specific requirements while borrowing the patterns that make sense for your context.</p>]]></content><author><name></name></author><category term="architecture"/><category term="casetudy"/><category term="architecture"/><category term="casestudy"/><summary type="html"><![CDATA[Explore a detailed technical implementation of a multi-agent system for retail banking credit assessment. Learn about agent architecture, distributed systems patterns, error handling, compliance requirements, and performance optimization through actual code examples and system diagrams. Ideal for software architects and engineers building scalable financial systems.]]></summary></entry><entry><title type="html">ETLC 2.0 - Building Context-Aware Data Pipelines</title><link href="https://subhadipmitra.com/blog/2024/etlc-adaptive-contexts-and-contextual-joins/" rel="alternate" type="text/html" title="ETLC 2.0 - Building Context-Aware Data Pipelines"/><published>2024-12-07T01:10:38+00:00</published><updated>2024-12-07T01:10:38+00:00</updated><id>https://subhadipmitra.com/blog/2024/etlc-adaptive-contexts-and-contextual-joins</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/etlc-adaptive-contexts-and-contextual-joins/"><![CDATA[<blockquote> <p>This blog post proposes a novel concept - ETL-C, a context-first approach for building Data / AI platforms in the Generative AI dominant era. Read prior <a href="https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm/">post here</a>.</p> </blockquote> <h3 id="introduction-reimagining-etl-with-context"><strong>Introduction: Reimagining ETL with Context</strong></h3> <p>Traditional ETL pipelines (Extract, Transform, Load) have long been the foundation of data engineering, enabling businesses to process, integrate, and analyze their data. However, as businesses grow more complex and dynamic, these pipelines face significant challenges. They often operate in rigid, static ways, failing to adapt to the nuanced, real-world context of the data they process.</p> <p>That’s where <strong>ETLC</strong> (Extract, Transform, Load, Contextualize) comes in, introducing <strong>Context</strong> as a fundamental addition to the ETL process. <strong>ETLC 2.0</strong> builds on this concept, offering three key advancements:</p> <ol> <li><strong>Adaptive Context</strong>: Pipelines that dynamically adjust their behavior based on time, external triggers, or operational metrics.</li> <li><strong>Contextual Joins</strong>: A smarter way to resolve inconsistencies and enrich relationships between datasets by leveraging semantic understanding and metadata.</li> <li><strong>Context Store</strong>: A scalable infrastructure to manage, query, and apply contextual data efficiently.</li> </ol> <p>In this post, I’ll walk through these ideas, sharing <strong>technical details</strong> and <strong>real-world examples</strong> that demonstrate how ETLC 2.0 can transform industries like retail banking, e-commerce, and customer analytics.</p> <hr/> <h2 id="1-adaptive-context-making-pipelines-dynamic"><strong>1. Adaptive Context: Making Pipelines Dynamic</strong></h2> <h3 id="the-concept"><strong>The Concept</strong></h3> <p>Adaptive Context gives pipelines the ability to respond dynamically to changes in time, environment, or operational conditions. Unlike static workflows, pipelines enhanced with Adaptive Context can:</p> <ul> <li>Prioritize high-value tasks during peak times.</li> <li>Adjust transformations based on external factors, like market conditions or seasonality.</li> <li>Optimize workloads based on system performance and capacity.</li> </ul> <p>By embedding these signals into the pipeline, Adaptive Context ensures the system operates with real-world awareness.</p> <hr/> <h3 id="technical-framework"><strong>Technical Framework</strong></h3> <p>Let:</p> <ul> <li>( D ): Input dataset.</li> <li>( M_t ): Contextual metadata at time ( t ).</li> <li>\(\mathcal{P}\): Pipeline transformations.</li> </ul> <p>The Adaptive Context-enabled pipeline is defined as: \(\mathcal{P}_{C_t}(D) = \mathcal{P}(D, C_t)\) Where:</p> <ul> <li>( C_t ): Active context at time ( t ), derived from \(f(M_t, \Theta)\), where ( f ) maps metadata ( M_t ) to actionable context, and \(\Theta\) represents pipeline control parameters.</li> </ul> <p>Dynamic transformations: \(\mathcal{P}_{C_t}(D) = \begin{cases} f_{\text{priority}}(D) &amp; \text{if priority}(C_t) &gt; \tau \\ f_{\text{defer}}(D) &amp; \text{otherwise} \end{cases}\)</p> <p>Where \(\tau\) is the priority threshold.</p> <hr/> <h3 id="example-fraud-detection-in-retail-banking"><strong>Example: Fraud Detection in Retail Banking</strong></h3> <h4 id="scenario"><strong>Scenario</strong></h4> <p>A retail bank processes millions of credit card transactions daily. Fraud detection is particularly critical during high-risk periods like weekends or holidays when fraud incidents spike. The bank wants a pipeline that:</p> <ol> <li><strong>Prioritizes</strong> high-value transactions during peak periods.</li> <li><strong>Batches</strong> routine processing for off-hours.</li> </ol> <h4 id="implementation"><strong>Implementation</strong></h4> <ol> <li><strong>Dynamic Context Generation</strong>: <ul> <li>High-priority fraud checks during peak hours.</li> <li>Batch fraud checks during off-hours.</li> </ul> </li> <li><strong>Real-Time Behavior</strong>: The pipeline adjusts its operations based on a context signal derived from time and transaction volume.</li> </ol> <p><strong>Code Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># Define context function
</span><span class="k">def</span> <span class="nf">generate_context</span><span class="p">(</span><span class="n">transaction_time</span><span class="p">):</span>
    <span class="n">hour</span> <span class="o">=</span> <span class="n">transaction_time</span><span class="p">.</span><span class="n">hour</span>
    <span class="n">day</span> <span class="o">=</span> <span class="n">transaction_time</span><span class="p">.</span><span class="nf">weekday</span><span class="p">()</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">hour</span> <span class="o">&gt;=</span> <span class="mi">9</span> <span class="ow">and</span> <span class="n">hour</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">)</span> <span class="ow">or</span> <span class="n">day</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]:</span>  <span class="c1"># Peak hours or weekends
</span>        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">priority</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">real-time</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">priority</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">low</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">batch</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># Fraud detection pipeline
</span><span class="k">def</span> <span class="nf">fraud_detection</span><span class="p">(</span><span class="n">transaction</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">context</span><span class="p">[</span><span class="sh">"</span><span class="s">priority</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">real_time_check</span><span class="p">(</span><span class="n">transaction</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">batch_check</span><span class="p">(</span><span class="n">transaction</span><span class="p">)</span>

<span class="c1"># Execute pipeline
</span><span class="n">current_context</span> <span class="o">=</span> <span class="nf">generate_context</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">())</span>
<span class="n">processed_transaction</span> <span class="o">=</span> <span class="nf">fraud_detection</span><span class="p">(</span><span class="n">transaction_data</span><span class="p">,</span> <span class="n">current_context</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="2-contextual-joins-reimagining-data-relationships"><strong>2. Contextual Joins: Reimagining Data Relationships</strong></h2> <h3 id="the-concept-1"><strong>The Concept</strong></h3> <p>Traditional joins rely on exact key matches, which often fail when:</p> <ul> <li>Data is inconsistent (e.g., “Subhadip Mitra” vs. “S. Mitra”).</li> <li>Relationships require semantic understanding (e.g., matching similar products by description).</li> </ul> <p><strong>Contextual Joins</strong> solve these issues by using:</p> <ol> <li><strong>Embeddings</strong> to capture semantic similarity between keys.</li> <li><strong>Metadata</strong> to enhance joins with additional dimensions like location or time.</li> <li><strong>Ontologies</strong> to incorporate domain-specific knowledge.</li> </ol> <hr/> <h3 id="technical-framework-1"><strong>Technical Framework</strong></h3> <p>For keys \(k_1 \in D_1\) and \(k_2 \in D_2\), the <strong>Semantic Similarity Score</strong> is defined as:</p> <p>\(S(k_1, k_2)\) = \(\alpha \cdot \text{cos}(\vec{e}_{k_1}, \vec{e}_{k_2}) + \beta \cdot M(k_1, k_2)\)</p> <p>Where:</p> <ul> <li>\(\vec{e}_{k}\): Embedding of key ( k ).</li> <li>\(M(k_1, k_2)\): Metadata-based similarity (e.g., location match, time overlap).</li> <li>\(\alpha, \beta\): Weights for embeddings and metadata.</li> </ul> <p>A match is established if:</p> \[S(k_1, k_2) &gt; \tau\] <hr/> <h3 id="example-unified-customer-view-for-retail-banking"><strong>Example: Unified Customer View for Retail Banking</strong></h3> <h4 id="scenario-1"><strong>Scenario</strong></h4> <p>A retail bank builds a <strong>Customer 360 View</strong> by integrating:</p> <ol> <li><strong>CRM Data</strong>: Customer profiles (e.g., “Subhadip Mitra”).</li> <li><strong>Transaction Data</strong>: Credit card logs (e.g., “S. Mitra”).</li> <li><strong>Call Center Logs</strong>: Unstructured sentiment data (e.g., comments like “I love your service!”).</li> </ol> <h4 id="implementation-1"><strong>Implementation</strong></h4> <ol> <li><strong>Semantic Matching</strong>: <ul> <li>Represent customer names as embeddings.</li> <li>Compute similarity between records from CRM and transaction logs.</li> </ul> </li> <li><strong>Contextual Enhancements</strong>: <ul> <li>Use metadata (e.g., location overlap) to refine matches.</li> </ul> </li> </ol> <p><strong>Code Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>
<span class="kn">from</span> <span class="n">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>

<span class="c1"># Datasets
</span><span class="n">names_crm</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Subhadip Mitra</span><span class="sh">"</span><span class="p">]</span>
<span class="n">names_transactions</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">S. Mitra</span><span class="sh">"</span><span class="p">]</span>
<span class="n">locations_crm</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">New York</span><span class="sh">"</span><span class="p">]</span>
<span class="n">locations_transactions</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">NYC</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># Generate embeddings
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">'</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">'</span><span class="p">)</span>
<span class="n">emb_crm</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">names_crm</span><span class="p">)</span>
<span class="n">emb_transactions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">names_transactions</span><span class="p">)</span>

<span class="c1"># Compute similarity
</span><span class="n">similarity_scores</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">emb_crm</span><span class="p">,</span> <span class="n">emb_transactions</span><span class="p">)</span>

<span class="c1"># Contextual match with metadata
</span><span class="n">matches</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">score</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">similarity_scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="mf">0.8</span> <span class="ow">and</span> <span class="n">locations_crm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">locations_transactions</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>  <span class="c1"># Add location match
</span>        <span class="n">matches</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">names_crm</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">names_transactions</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h2 id="3-context-store-operationalizing-context"><strong>3. Context Store: Operationalizing Context</strong></h2> <h3 id="the-concept-2"><strong>The Concept</strong></h3> <p>A <strong>Context Store</strong> is the backbone of ETLC pipelines. It stores, manages, and queries contextual metadata efficiently, enabling:</p> <ol> <li><strong>Scalable Storage</strong>: Embeddings, metadata, and ontologies.</li> <li><strong>Real-Time Updates</strong>: Ingesting and managing changing context signals (e.g., live market data).</li> <li><strong>Fast Retrieval</strong>: Providing context for dynamic pipeline operations.</li> </ol> <hr/> <h3 id="example-personalized-e-commerce-recommendations"><strong>Example: Personalized E-Commerce Recommendations</strong></h3> <h4 id="scenario-2"><strong>Scenario</strong></h4> <p>An e-commerce platform uses a Context Store to deliver dynamic, context-enriched product recommendations. It stores:</p> <ul> <li><strong>Customer Embeddings</strong>: Representing browsing behavior.</li> <li><strong>Product Metadata</strong>: Seasonal relevance, stock levels, and discounts.</li> </ul> <h4 id="pipeline-implementation"><strong>Pipeline Implementation</strong></h4> <ol> <li><strong>Store Context</strong>: <ul> <li>Store customer and product embeddings in a vector database.</li> </ul> </li> <li><strong>Query and Enrich</strong>: <ul> <li>Retrieve context in real-time during recommendation generation.</li> </ul> </li> </ol> <p><strong>Code Example</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pinecone</span> <span class="kn">import</span> <span class="n">Index</span>

<span class="c1"># Initialize vector index
</span><span class="n">index</span> <span class="o">=</span> <span class="nc">Index</span><span class="p">(</span><span class="sh">"</span><span class="s">customer-context</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Insert embeddings
</span><span class="n">customer_embeddings</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user123</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">]}]</span>
<span class="n">index</span><span class="p">.</span><span class="nf">upsert</span><span class="p">(</span><span class="n">customer_embeddings</span><span class="p">)</span>

<span class="c1"># Query for recommendations
</span><span class="n">query_embedding</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">]</span>
<span class="n">results</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">queries</span><span class="o">=</span><span class="p">[</span><span class="n">query_embedding</span><span class="p">],</span> <span class="n">top_k</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Recommended Products:</span><span class="sh">"</span><span class="p">,</span> <span class="n">results</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="conclusion-etlc-20--the-future-of-data-engineering"><strong>Conclusion: ETLC 2.0 – The Future of Data Engineering</strong></h3> <p>ETLC 2.0 represents a fundamental shift in how we design and think about data pipelines. By embedding <strong>Adaptive Context</strong>, <strong>Contextual Joins</strong>, and a scalable <strong>Context Store</strong>, it transforms traditional workflows into intelligent, responsive systems capable of understanding and reacting to the real-world meaning of data.</p> <p>This evolution is not just a technical upgrade; it is a business enabler. <strong>ETLC 2.0</strong> aligns data pipelines with the dynamic needs of modern enterprises, allowing organizations to:</p> <ol> <li><strong>React in Real-Time</strong>: Adaptive Context ensures pipelines evolve with shifting priorities, whether detecting fraud during peak hours or dynamically adjusting marketing campaigns.</li> <li><strong>Solve Complex Data Challenges</strong>: Contextual Joins eliminate the limitations of traditional rigid joins, enabling seamless integration across fragmented and unstructured datasets.</li> <li><strong>Scale Contextual Intelligence</strong>: The Context Store operationalizes metadata, embeddings, and domain knowledge, creating a foundation for scalable, real-time contextualization.</li> </ol> <p><strong>Why It Matters</strong>:<br/> ETLC 2.0 bridges the gap between raw data and actionable intelligence. In industries like retail banking, e-commerce, healthcare, and beyond, it empowers businesses to not just process data, but to understand and act on it in ways that were previously impossible. This is the essence of the next generation of data engineering: pipelines that <strong>learn, adapt, and deliver insights at the speed of business</strong>.</p> <p>As businesses face increasingly complex data environments, the need for intelligent, context-driven pipelines has never been more urgent. <strong>ETLC 2.0 is not just a framework—it’s a blueprint for how organizations can thrive in a world driven by data and insights.</strong></p> <p><strong>Next Steps: Putting ETLC 2.0 into Practice</strong>:<br/> Start small. Experiment with contextual joins or build a pilot Context Store for a single workflow. Gradually scale the principles of ETLC 2.0 across your organization. The journey to smarter, context-aware data pipelines begins now.</p> <p>Welcome to the future of data engineering. Welcome to ETLC 2.0</p> <p><br/> <br/></p>]]></content><author><name></name></author><category term="platform"/><category term="genai"/><category term="platform"/><category term="genai"/><category term="etlc"/><summary type="html"><![CDATA[Think your data pipelines could do more than just process information? ETLC 2.0 takes data engineering to the next level with Adaptive Context, Contextual Joins, and a scalable Context Store. It's not just about moving data—it's about making it intelligent. Ready to unlock the future of data pipelines? Read on.]]></summary></entry><entry><title type="html">The End of Data Warehouses? Enter the Age of Dynamic Context Engines</title><link href="https://subhadipmitra.com/blog/2024/end-of-data-warehouses/" rel="alternate" type="text/html" title="The End of Data Warehouses? Enter the Age of Dynamic Context Engines"/><published>2024-11-18T02:07:11+00:00</published><updated>2024-11-18T02:07:11+00:00</updated><id>https://subhadipmitra.com/blog/2024/end-of-data-warehouses</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/end-of-data-warehouses/"><![CDATA[<blockquote> <p>Before diving in, you might find it helpful to explore some foundational ideas around <strong>ETLC (Extract, Transform, Load, Contextualize)</strong> that I’ve previously discussed:</p> <ul> <li><a href="https://subhadipmitra.com/blog/2024/etlc-adaptive-contexts-and-contextual-joins/">Adaptive Contexts and Contextual Joins</a></li> <li><a href="https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm/">The Context-First Paradigm</a></li> <li><a href="https://subhadipmitra.com/blog/2024/etlc-adaptive-contexts-and-contextual-joins/">ETLC 2.0 - Building Context-Aware Data Pipelines</a></li> </ul> <p>These posts explore how context reshapes data pipelines and lays the groundwork for understanding the transformative potential of <strong>Dynamic Context Engines</strong> discussed here.</p> </blockquote> <h3 id="introduction-are-we-holding-on-to-a-legacy-that-no-longer-works"><strong>Introduction: Are We Holding On to a Legacy That No Longer Works?</strong></h3> <p>Data warehouses revolutionized the way we process, store, and analyze data. They were designed for a simpler time when businesses asked straightforward questions like, <strong>“What were last quarter’s sales?”</strong> Today, the questions are far more complex:</p> <ul> <li><strong>“What’s happening right now, and why?”</strong></li> <li><strong>“How did this event unfold, and what patterns led us here?”</strong></li> <li><strong>“What actions should I take next, given the context of what’s unfolding?”</strong></li> </ul> <p>Traditional data warehouses aren’t built to handle these demands. They work on static snapshots of data, processed in batches, with no awareness of the sequence of events or the evolving state of the system. In a world that requires real-time insights and contextual understanding, warehouses are losing relevance.</p> <p>The answer isn’t to patch the cracks in the data warehouse. It’s to rethink the entire foundation. Enter <strong>Dynamic Context Engines (DCEs)</strong>—next-generation platforms designed to provide real-time, path-aware, and context-rich intelligence.</p> <p><br/></p> <hr/> <p><br/></p> <h3 id="why-data-warehouses-are-failing-to-keep-up"><strong>Why Data Warehouses Are Failing to Keep Up</strong></h3> <p><br/></p> <h4 id="1-static-snapshots-in-a-dynamic-world"><strong>1. Static Snapshots in a Dynamic World</strong></h4> <p>Traditional warehouses treat data as static facts, devoid of temporal continuity or causality. But business doesn’t operate in snapshots—it’s a sequence of actions, reactions, and decisions.</p> <p><strong>Example</strong>: In fraud detection, the sequence of events—unusual login location, rapid high-value transactions, and account activity—matters more than the individual data points. Warehouses can’t connect these dots in real time.</p> <p><br/></p> <h4 id="2-blind-to-event-sequences-and-causality"><strong>2. Blind to Event Sequences and Causality</strong></h4> <p>Context isn’t just external weather data or customer behavior. It’s about understanding:</p> <ul> <li><strong>What happened before this event?</strong></li> <li><strong>How did prior states contribute to the current outcome?</strong></li> <li><strong>What’s the causal relationship between data points?</strong></li> </ul> <p><strong>Example</strong>: A warehouse might tell you that sales spiked during a promotion, but it can’t map the customer journey that led to the sale—searches, clicks, and abandoned carts that preceded the final purchase.</p> <p><br/></p> <h4 id="3-overly-centralized-and-rigid"><strong>3. Overly Centralized and Rigid</strong></h4> <p>Data warehouses centralize everything into rigid schemas, making it difficult to adapt to evolving business needs. They can’t easily accommodate new data sources, event streams, or dynamic business processes.</p> <p><br/><br/></p> <hr/> <p><br/><br/></p> <h3 id="dynamic-context-engines-the-future-of-data-platforms"><strong>Dynamic Context Engines: The Future of Data Platforms</strong></h3> <p><strong>Dynamic Context Engines (DCEs)</strong> are built to overcome these limitations. They don’t just store data—they create a <strong>living, evolving model</strong> of your business, embedding:</p> <ol> <li><strong>Event Sequences</strong>: Tracking and interpreting the sequence of events leading to an outcome.</li> <li><strong>Causality and Dependencies</strong>: Understanding how one event influences another.</li> <li><strong>Contextual Enrichment</strong>: Adding external and operational metadata in real time.</li> </ol> <p><br/><br/></p> <h3 id="core-features-of-dynamic-context-engines"><strong>Core Features of Dynamic Context Engines</strong></h3> <p><br/></p> <h4 id="1-event-driven-architecture"><strong>1. Event-Driven Architecture</strong></h4> <p>DCEs ingest and process data as events occur, rather than relying on batch jobs. Every event is logged with its dependencies, timestamps, and causality.</p> <p><strong>Example</strong>: A cybersecurity DCE tracks login events, device changes, and access patterns to detect suspicious activity in real time.</p> <p><br/></p> <h4 id="2-path-aware-data-processing"><strong>2. Path-Aware Data Processing</strong></h4> <p>DCEs don’t just capture data—they preserve the sequence of events that led to each insight. This path-awareness enables deeper understanding and better predictions.</p> <p><strong>Example</strong>: In supply chain management, a DCE can model the entire journey of a shipment—from production delays to real-time GPS updates—providing actionable insights into delays and risks.</p> <p><br/></p> <h4 id="3-real-time-contextual-enrichment"><strong>3. Real-Time Contextual Enrichment</strong></h4> <p>DCEs integrate metadata dynamically, including:</p> <ul> <li><strong>Operational Context</strong>: System states, processing loads, or downtime events.</li> <li><strong>External Signals</strong>: Weather, market conditions, or social sentiment.</li> <li><strong>Historical Context</strong>: Comparing the current sequence of events to similar past occurrences.</li> </ul> <p><strong>Example</strong>: A DCE in healthcare can integrate patient vitals, treatment history, and environmental factors to provide real-time risk assessments.</p> <p><br/><br/></p> <h3 id="how-dces-handle-context-in-etlc"><strong>How DCEs Handle Context in ETLC</strong></h3> <p>DCEs are powered by <strong>ETLC (Extract, Transform, Load, Contextualize)</strong>, a framework that treats context as a first-class citizen in data engineering.</p> <ol> <li><strong>Extract</strong>: Ingests data streams in real time, capturing both raw data and the state of the system when the event occurred.</li> <li><strong>Transform</strong>: Applies transformations based on temporal sequences and causal dependencies.</li> <li><strong>Load</strong>: Stores enriched data, preserving the sequence and context of each transformation.</li> <li><strong>Contextualize</strong>: Continuously updates insights with new events, ensuring they reflect the most current state.</li> </ol> <p><strong>Example</strong>: In retail, ETLC ensures that promotions are contextualized by inventory levels, regional demand, and customer behavior in real time.</p> <p><br/> <br/></p> <h3 id="the-advantages-of-dynamic-context-engines-dce"><strong>The Advantages of Dynamic Context Engines (DCE)</strong></h3> <p><br/></p> <h4 id="1-real-time-path-aware-decision-making"><strong>1. Real-Time, Path-Aware Decision Making</strong></h4> <p>Unlike warehouses, DCEs allow businesses to act in the moment, informed by the sequence of events leading to each insight.</p> <p><strong>Example</strong>: An airline can dynamically adjust ticket pricing based on booking trends, weather conditions, and flight delays.</p> <p><br/></p> <h4 id="2-smarter-ai-and-predictive-models"><strong>2. Smarter AI and Predictive Models</strong></h4> <p>Generative AI and machine learning models thrive on <strong>dynamic, context-rich inputs</strong>. By preserving causality and event sequences, DCEs provide the foundation for smarter, more accurate predictions.</p> <p><strong>Example</strong>: A DCE powers an AI model for supply chain optimization, predicting bottlenecks by analyzing past delays and real-time shipment updates.</p> <p><br/></p> <h4 id="3-seamless-integration-of-historical-and-real-time-data"><strong>3. Seamless Integration of Historical and Real-Time Data</strong></h4> <p>DCEs don’t replace historical analysis; they enhance it. By combining real-time event streams with historical data, they enable hybrid analytics that balances immediate action with long-term strategy.</p> <p><strong>Example</strong>: A financial institution uses a DCE to monitor live transactions for fraud while also analyzing historical trends for compliance.</p> <p><br/></p> <h3 id="what-about-data-warehouses"><strong>What About Data Warehouses?</strong></h3> <p>Data warehouses aren’t dead per se — they’re evolving into <strong>complementary systems</strong> for long-term storage and reporting. In the DCE era:</p> <ul> <li><strong>Warehouses</strong> handle compliance and deep archival analysis.</li> <li><strong>DCEs</strong> power real-time insights, context-enriched decisions, and AI-driven automation.</li> </ul> <p><br/></p> <p>Traditional data warehouses solved the problems of their time, but the demands of today’s businesses—real-time decision-making, contextual understanding, and path-aware insights—require a new approach. Dynamic Context Engines are not just an improvement; they’re a reinvention.</p> <p>The future of data is no longer about static storage. It’s about creating platforms that:</p> <ul> <li><strong>Understand sequences and causality.</strong></li> <li><strong>Act in real time with enriched context.</strong></li> <li><strong>Adapt dynamically to new data and changing conditions.</strong></li> </ul> <p><br/><br/></p> <hr/> <p><br/><br/></p> <h3 id="the-impact-on-traditional-bi-and-modeling-techniques-evolve-or-become-obsolete"><strong>The Impact on Traditional BI and Modeling Techniques: Evolve or Become Obsolete</strong></h3> <p>Traditional BI and data modeling techniques have long been the cornerstones of enterprise analytics. They helped businesses aggregate, summarize, and analyze data in structured formats, enabling insights into past performance and operational efficiency. However, the advent of <strong>Dynamic Context Engines (DCEs)</strong> is reshaping the landscape. Real-time insights, path-awareness, and context-enrichment are fundamentally changing how data is prepared, modeled, and consumed.</p> <p>Here’s how traditional BI and modeling techniques are affected—and how they must evolve to stay relevant.</p> <p><br/><br/></p> <h3 id="traditional-bi-challenges-and-evolution"><strong>Traditional BI: Challenges and Evolution</strong></h3> <p><br/></p> <h4 id="1-challenges-for-traditional-bi-in-the-dce-era"><strong>1. Challenges for Traditional BI in the DCE Era</strong></h4> <p>Traditional BI tools and workflows face several limitations in a world driven by real-time and contextual data:</p> <ul> <li><strong>Batch Dependency</strong>: BI dashboards often rely on pre-aggregated datasets, which fail to reflect the most recent state of the business.</li> <li><strong>Rigid Structures</strong>: Predefined schemas and static reporting hierarchies don’t adapt well to dynamic, context-rich data.</li> <li><strong>Siloed Context</strong>: External signals, event sequences, and causality are often excluded from traditional BI, limiting the depth of insights.</li> </ul> <p><br/><br/></p> <h4 id="2-the-evolution-of-bi"><strong>2. The Evolution of BI</strong></h4> <p>Traditional BI doesn’t need to be replaced but must adapt to leverage the capabilities of DCEs. Here’s how:</p> <p><br/></p> <h5 id="a-real-time-integration"><strong>a. Real-Time Integration</strong></h5> <p>BI tools must shift from querying static datasets to <strong>live connections with real-time event streams</strong> and enriched contextual data.</p> <ul> <li><strong>Example</strong>: A retail BI dashboard integrates live sales data and customer behavior streams, updating inventory and revenue metrics instantly.</li> <li><strong>How</strong>: Tools like Looker, Tableau, and Power BI can connect to real-time data sources (e.g., Kafka, Pub/Sub) or directly query DCE backends.</li> </ul> <p><br/></p> <h5 id="b-contextual-filters-and-insights"><strong>b. Contextual Filters and Insights</strong></h5> <p>BI reports should incorporate <strong>contextual dimensions</strong> dynamically. Instead of static metrics, users can filter reports by real-time conditions like promotions, weather, or market trends.</p> <ul> <li><strong>Example</strong>: A transportation BI report highlights delivery delays based on real-time traffic data and operational bottlenecks.</li> </ul> <p><br/></p> <h5 id="c-predictive-and-prescriptive-reporting"><strong>c. Predictive and Prescriptive Reporting</strong></h5> <p>With DCEs feeding contextual and historical data into AI models, BI dashboards can evolve to offer <strong>predictive and prescriptive insights</strong> alongside descriptive reports.</p> <ul> <li><strong>Example</strong>: A manufacturing dashboard predicts supply chain disruptions and recommends alternate suppliers based on contextual signals.</li> </ul> <p><br/></p> <h5 id="d-hybrid-historical-and-real-time-analytics"><strong>d. Hybrid Historical and Real-Time Analytics</strong></h5> <p>Traditional BI can blend real-time and batch datasets to provide both <strong>immediate actionability</strong> and <strong>long-term trend analysis</strong>.</p> <ul> <li><strong>Example</strong>: A financial institution’s BI tool shows real-time transaction volumes alongside quarterly revenue trends for a comprehensive view.</li> </ul> <p><br/></p> <hr/> <p><br/><br/></p> <h3 id="traditional-data-modeling-challenges-and-evolution"><strong>Traditional Data Modeling: Challenges and Evolution</strong></h3> <p><br/></p> <h4 id="1-challenges-for-traditional-modeling-techniques"><strong>1. Challenges for Traditional Modeling Techniques</strong></h4> <p>Traditional modeling approaches like <strong>Kimball’s dimensional modeling</strong> and <strong>Inmon’s normalized modeling</strong> struggle to adapt to the demands of DCEs:</p> <ul> <li><strong>Static Assumptions</strong>: They assume static relationships between entities, which breaks down in dynamic, event-driven systems.</li> <li><strong>Lack of Path Awareness</strong>: These models don’t account for the sequence of events or causality, which is critical for contextual insights.</li> <li><strong>Rigid Schemas</strong>: Predefined schemas are difficult to evolve as new data sources or context dimensions emerge.</li> </ul> <p><br/><br/></p> <h4 id="2-the-evolution-of-modeling-techniques"><strong>2. The Evolution of Modeling Techniques</strong></h4> <p>Data modeling must embrace <strong>flexibility, dynamism, and context-awareness</strong> to remain effective in the DCE era. Here’s how:</p> <h5 id="a-event-driven-models"><strong>a. Event-Driven Models</strong></h5> <p>Event-driven architectures treat <strong>events</strong> as the primary data unit, capturing every action, its timestamp, and its associated metadata. This model allows for:</p> <ul> <li><strong>Temporal Analytics</strong>: Understanding trends over time by replaying events.</li> <li><strong>Causal Relationships</strong>: Determining how one event influences another.</li> </ul> <p><strong>Example</strong>: In fraud detection, modeling the sequence of login attempts, transaction anomalies, and account changes reveals patterns that static schemas would miss.</p> <p><br/><br/></p> <h5 id="b-path-aware-data-modeling"><strong>b. Path-Aware Data Modeling</strong></h5> <p>Path-aware models focus on capturing the <strong>journey or sequence of events</strong> that lead to an outcome. This approach is especially useful for:</p> <ul> <li>Customer journeys (e.g., clickstreams leading to a purchase).</li> <li>Operational workflows (e.g., steps in a manufacturing process).</li> </ul> <p><strong>Example</strong>: An e-commerce company models the path from product search to checkout, integrating intermediate actions like abandoned carts or promo code usage.</p> <p><br/><br/></p> <h5 id="c-graph-models"><strong>c. Graph Models</strong></h5> <p>Graph-based models are ideal for DCEs because they represent relationships between entities dynamically. Nodes represent entities, and edges capture their relationships, enabling:</p> <ul> <li><strong>Dynamic Joins</strong>: Connecting data across entities without rigid foreign key constraints.</li> <li><strong>Context-Rich Insights</strong>: Identifying clusters, paths, and influences.</li> </ul> <p><strong>Example</strong>: A telecom provider uses a graph model to identify churn risk by analyzing customer interactions, service complaints, and peer influences.</p> <p><br/><br/></p> <h5 id="d-polyglot-persistence"><strong>d. Polyglot Persistence</strong></h5> <p>DCEs embrace <strong>polyglot persistence</strong>, meaning different types of data are stored in the most appropriate formats:</p> <ul> <li><strong>Event Stores</strong> for temporal analytics.</li> <li><strong>Graph Databases</strong> for relationships and context.</li> <li><strong>Columnar Databases</strong> for high-speed aggregations.</li> </ul> <p><strong>Example</strong>: A logistics platform stores IoT sensor data in a time-series database, shipment relationships in a graph, and financial summaries in a columnar store.</p> <p><br/><br/></p> <h5 id="e-context-aware-data-vault"><strong>e. Context-Aware Data Vault</strong></h5> <p>The Data Vault methodology, known for its modularity and auditability, can be extended with <strong>contextual satellites</strong> that capture evolving metadata alongside historical data.</p> <p><strong>Example</strong>: A bank integrates real-time economic indicators into its Data Vault, enabling enriched analytics on historical transaction trends.</p> <p><br/><br/></p> <h3 id="the-role-of-etlc-in-the-evolution-of-bi-and-modeling"><strong>The Role of ETLC in the Evolution of BI and Modeling</strong></h3> <p>The principles of <strong>ETLC (Extract, Transform, Load, Contextualize)</strong> directly influence how BI and modeling techniques evolve:</p> <ol> <li><strong>Extract</strong>: BI dashboards pull data not just from warehouses but also from real-time streams enriched with metadata.</li> <li><strong>Transform</strong>: Models dynamically adapt to incorporate new relationships, external signals, and event sequences.</li> <li><strong>Load</strong>: Aggregated datasets are loaded alongside real-time views, enabling hybrid analytics.</li> <li><strong>Contextualize</strong>: Path-awareness and causality are embedded into both reports and models, enhancing decision-making.</li> </ol> <p><br/></p> <hr/> <p><br/><br/></p> <h3 id="what-needs-to-change-in-traditional-data-warehousing"><strong>What Needs to Change in Traditional Data Warehousing?</strong></h3> <p>Data warehouses revolutionized data management in the 90s and early 2000s. They brought order to chaos by enabling structured analytics on massive datasets. But in the era of <strong>real-time decision-making, path-awareness, and AI-driven insights</strong>, traditional data warehousing philosophies are facing existential challenges. The foundational assumptions of DWHs need an overhaul—not just iterative improvements.</p> <p>Here’s a deeper dive into <strong>what must change</strong> and <strong>why it matters</strong>.</p> <p><br/><br/></p> <h3 id="1-from-static-schemas-to-evolutionary-data-models"><strong>1. From Static Schemas to Evolutionary Data Models</strong></h3> <p><br/></p> <h4 id="the-problem"><strong>The Problem</strong></h4> <p>Traditional DWHs rely on rigid schemas designed during implementation. These schemas:</p> <ul> <li>Assume stable business rules and data relationships.</li> <li>Break down when new data sources or use cases emerge.</li> <li>Require costly rework to accommodate changes.</li> </ul> <p><strong>Example</strong>: Adding a real-time stream of clickstream data to a warehouse optimized for batch CRM data often involves schema redesign, delaying insights.</p> <p><br/></p> <h4 id="what-needs-to-change"><strong>What Needs to Change</strong></h4> <ol> <li><strong>Embrace Schema-on-Read</strong>: <ul> <li>Instead of enforcing schemas during data ingestion, allow schemas to be dynamically applied during querying.</li> <li><strong>Benefit</strong>: New data can flow in without breaking existing pipelines.</li> </ul> </li> <li><strong>Path-Aware Models</strong>: <ul> <li>Incorporate the <strong>sequence of events</strong> into the data model. This means tracking not just what happened but <strong>how and why</strong> it happened.</li> <li><strong>Example</strong>: A fraud detection model tracks login anomalies, transaction patterns, and geo-mismatches in real-time, preserving their order of occurrence.</li> </ul> </li> <li><strong>Graph-Based Relationships</strong>: <ul> <li>Move beyond table-based joins to graph-based models that dynamically adapt to changing relationships.</li> <li><strong>Example</strong>: A telecom provider uses a graph model to represent evolving customer-device relationships and network usage patterns.</li> </ul> </li> </ol> <p><br/><br/></p> <h3 id="2-from-batch-pipelines-to-continuous-data-streams"><strong>2. From Batch Pipelines to Continuous Data Streams</strong></h3> <h4 id="the-problem-1"><strong>The Problem</strong></h4> <p>Batch-oriented ETL pipelines are slow and assume data arrives in predefined chunks. This approach:</p> <ul> <li>Creates delays between data ingestion and actionable insights.</li> <li>Fails to capture dynamic changes in real-time scenarios.</li> </ul> <p><strong>Example</strong>: A retailer using batch pipelines might notice a sales spike for umbrellas <strong>hours after</strong> a sudden rainstorm begins—far too late to act.</p> <p><br/><br/></p> <h4 id="what-needs-to-change-1"><strong>What Needs to Change</strong></h4> <ol> <li><strong>Event-Driven Ingestion</strong>: <ul> <li>Move from batch ETL to real-time event streams, processing data as it arrives.</li> <li>Use tools like Kafka, Pulsar, or Google Pub/Sub to build event-driven architectures.</li> </ul> </li> <li><strong>Multi-Speed Pipelines</strong>: <ul> <li>Design systems that support both real-time and batch processing for different use cases.</li> <li><strong>Example</strong>: A bank processes real-time transactions for fraud detection while aggregating daily summaries for compliance reporting.</li> </ul> </li> <li><strong>ETLC Principles</strong>: <ul> <li>Introduce <strong>context</strong> during ingestion, enriching raw data with metadata like timestamps, event sources, or external signals.</li> </ul> </li> </ol> <p><br/></p> <h3 id="3-from-historical-snapshots-to-dynamic-context"><strong>3. From Historical Snapshots to Dynamic Context</strong></h3> <h4 id="the-problem-2"><strong>The Problem</strong></h4> <p>Traditional DWHs excel at providing static snapshots of the past but lack the ability to:</p> <ul> <li>Incorporate <strong>external signals</strong> like weather, market trends, or competitor actions.</li> <li>Understand <strong>causality</strong> or the sequence of events leading to an outcome.</li> </ul> <p><strong>Example</strong>: A sales report might show that revenue spiked during a promotion but fails to explain the <strong>why</strong>—missing context like customer behavior, social sentiment, or inventory levels.</p> <p><br/></p> <h4 id="what-needs-to-change-2"><strong>What Needs to Change</strong></h4> <ol> <li><strong>Context-Enriched Warehousing</strong>: <ul> <li>Embed contextual metadata (e.g., external factors, operational metrics) into the warehouse as first-class citizens.</li> <li><strong>Example</strong>: A healthcare DWH enriches patient data with environmental factors like air quality to predict asthma-related hospital visits.</li> </ul> </li> <li><strong>Real-Time Context Updates</strong>: <ul> <li>Continuously update data with evolving context, ensuring that dashboards reflect the latest state of the system.</li> <li><strong>Example</strong>: A logistics platform updates delivery ETAs dynamically based on traffic conditions.</li> </ul> </li> <li><strong>Causal Analysis Frameworks</strong>: <ul> <li>Integrate causality-aware models that help identify the sequence of events leading to outcomes.</li> <li><strong>Example</strong>: An e-commerce DWH models abandoned carts by analyzing the customer’s navigation path, device type, and promo interactions.</li> </ul> </li> </ol> <p><br/></p> <h3 id="4-from-centralized-monoliths-to-federated-ecosystems"><strong>4. From Centralized Monoliths to Federated Ecosystems</strong></h3> <h4 id="the-problem-3"><strong>The Problem</strong></h4> <p>Traditional DWHs centralize data into a single repository. While this ensures consistency, it:</p> <ul> <li>Creates bottlenecks for ingestion and transformation.</li> <li>Reduces flexibility for teams to innovate independently.</li> </ul> <p><strong>Example</strong>: A global enterprise with multiple business units struggles to consolidate regional sales data into a centralized schema, delaying decision-making.</p> <p><br/><br/></p> <h4 id="what-needs-to-change-3"><strong>What Needs to Change</strong></h4> <ol> <li><strong>Adopt Data Mesh Principles</strong>: <ul> <li>Decentralize ownership, allowing domain teams to manage their own data while adhering to global standards.</li> <li><strong>Example</strong>: A financial institution enables its credit, savings, and loans divisions to maintain independent data pipelines while sharing a unified customer view.</li> </ul> </li> <li><strong>Federated Querying</strong>: <ul> <li>Use tools like BigQuery Omni or Presto to enable cross-domain analytics without centralizing data physically.</li> </ul> </li> <li><strong>Multi-Layered Architectures</strong>: <ul> <li>Combine decentralized data processing at the edge with centralized storage for historical analysis.</li> <li><strong>Example</strong>: A manufacturing firm processes IoT sensor data locally on the factory floor while aggregating trends in a cloud-based DWH.</li> </ul> </li> </ol> <p><br/></p> <h3 id="5-from-passive-storage-to-active-intelligence"><strong>5. From Passive Storage to Active Intelligence</strong></h3> <h4 id="the-problem-4"><strong>The Problem</strong></h4> <p>Traditional DWHs are passive systems designed to <strong>store and retrieve data</strong>. They don’t actively analyze, predict, or automate decision-making.</p> <p><strong>Example</strong>: A retailer uses a DWH to analyze past sales trends but relies on separate systems to predict future demand.</p> <p><br/></p> <h4 id="what-needs-to-change-4"><strong>What Needs to Change</strong></h4> <ol> <li><strong>Embed AI and Automation</strong>: <ul> <li>Integrate AI models directly into the warehouse, enabling predictive and prescriptive analytics.</li> <li><strong>Example</strong>: A telecom provider uses AI-powered churn prediction embedded within its DWH to proactively retain customers.</li> </ul> </li> <li><strong>Feedback Loops</strong>: <ul> <li>Create continuous learning systems where real-time outcomes refine future predictions.</li> <li><strong>Example</strong>: A delivery service adjusts its route optimization model based on real-time delivery success rates.</li> </ul> </li> <li><strong>Proactive Alerts and Actions</strong>: <ul> <li>Enable the warehouse to trigger alerts or automate responses based on data conditions.</li> <li><strong>Example</strong>: A DWH automatically flags potential inventory shortages and triggers restocking orders.</li> </ul> </li> </ol> <p><br/></p> <hr/> <p><br/><br/></p> <h3 id="conclusion-time-to-let-data-warehouses-retire-gracefully"><strong>Conclusion: Time to Let Data Warehouses Retire Gracefully</strong></h3> <p><br/></p> <p>Traditional data warehouses have been the sturdy workhorses of analytics, faithfully serving their purpose in organizing chaos. But let’s face it—in today’s world of <strong>real-time decisions</strong>, <strong>context-aware intelligence</strong>, and <strong>causal insights</strong>, they’re starting to feel more like landlines in the age of 5G. Sure, they’re reliable, but good luck trying to stream TikTok on one.</p> <p>Here’s the deal: <strong>The future of data isn’t just structured—it’s dynamic, path-aware, and actionable.</strong> Businesses need platforms that:</p> <ul> <li><strong>Adapt in real time</strong>—because static snapshots are so last quarter.</li> <li><strong>Understand causality</strong>—so you know what happened <em>and</em> why.</li> <li><strong>Empower decentralized teams</strong>—because innovation needs speed, not bottlenecks.</li> </ul> <p>And while we’re here, let’s talk about the elephant—or should we say, elephants—in the room: <strong>Data Mesh</strong>, <strong>Data Lake</strong>, and <strong>Data Lakehouse</strong>. Great names, sure. But let’s not pretend slapping “lake” or “mesh” onto your architecture magically solves everything. Data Lakes often turn into data swamps. Data Lakehouses? Well, they sound like an HGTV special for data architects. And Data Mesh? A fine idea until you realize no one wants to own the nodes.</p> <p>This isn’t about patching up these old models or trying to retrofit them for real-time needs. It’s about moving forward with platforms like <strong>Dynamic Context Engines (DCEs)</strong>—built from the ground up for the speed, agility, and contextual awareness today’s businesses demand.</p> <p>And for those thinking, <em>“But what about Lambda and Kappa architectures?”</em> Don’t worry, we’ll get to those too. Spoiler: It’s not just about architectures; it’s about rethinking the very foundation of how data flows and transforms.</p> <p>So, the question isn’t whether your business needs to evolve—it’s <em>how fast</em> you can make it happen. The era of static data warehouses and buzzword bingo is over. The age of <strong>real-time, context-driven intelligence</strong> has begun.</p> <p>Your data deserves it. Your business demands it. And honestly, isn’t it time we all moved on from the swampy lakes and tangled meshes?</p>]]></content><author><name></name></author><category term="platform"/><category term="genai"/><category term="platform"/><category term="genai"/><category term="etlc"/><summary type="html"><![CDATA[Traditional data warehouses are struggling to keep up with modern demands. Enter Dynamic Context Engines (DCEs) - real-time, path-aware platforms that enrich data with context for smarter, faster decisions. Discover why they're the future of data analytics.]]></summary></entry><entry><title type="html">(Part 3/3) - Reimagining ETL with Large Language Models—The Path to Intelligent Pipelines</title><link href="https://subhadipmitra.com/blog/2024/etl-llm-part-3/" rel="alternate" type="text/html" title="(Part 3/3) - Reimagining ETL with Large Language Models—The Path to Intelligent Pipelines"/><published>2024-10-20T23:07:15+00:00</published><updated>2024-10-20T23:07:15+00:00</updated><id>https://subhadipmitra.com/blog/2024/etl-llm-part-3</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/etl-llm-part-3/"><![CDATA[<h3 id="introduction-a-new-era-of-etl"><strong>Introduction: A New Era of ETL</strong></h3> <p>ETL (Extract, Transform, Load) pipelines form the backbone of modern data processing, powering analytics, machine learning, and operational systems. However, their traditional design limits their ability to adapt to complex, dynamic, and unstructured data sources.</p> <p>Large Language Models (LLMs) have emerged as transformative tools in AI, excelling at tasks like natural language understanding, semantic enrichment, and context generation. <strong>Part 3 of this series delves deep into the fusion of ETL and LLMs</strong>, presenting:</p> <ol> <li><strong>A novel architectural framework</strong> for LLM-augmented ETL pipelines.</li> <li><strong>Advanced capabilities</strong> such as context-driven transformations, semantic joins, and multimodal processing.</li> <li><strong>Practical, scalable implementations</strong> tailored for real-world business applications.</li> </ol> <p>This article challenges traditional ETL paradigms, introducing <strong>technical innovations</strong> and <strong>inventive thinking</strong> to redefine how organizations process and understand data.</p> <hr/> <h2 id="1-rethinking-the-etl-architecture-with-llms"><strong>1. Rethinking the ETL Architecture with LLMs</strong></h2> <p>Traditional ETL pipelines are deterministic and follow predefined rules for extraction, transformation, and loading. LLMs elevate ETL pipelines into intelligent systems by embedding:</p> <ul> <li><strong>Semantic Understanding</strong>: Interpreting unstructured, ambiguous, or incomplete data.</li> <li><strong>Contextual Adaptation</strong>: Dynamically adjusting transformations based on external signals or metadata.</li> <li><strong>Multimodal Processing</strong>: Seamlessly handling text, structured data, images, and more.</li> </ul> <hr/> <h3 id="11-architectural-framework"><strong>1.1 Architectural Framework</strong></h3> <p>An <strong>LLM-Augmented ETL Pipeline</strong> comprises four key layers:</p> <h4 id="111-data-input-layer"><strong>1.1.1 Data Input Layer</strong></h4> <p>Handles diverse data sources, including:</p> <ul> <li>Structured: Databases, CSV files.</li> <li>Semi-structured: JSON, XML.</li> <li>Unstructured: PDFs, emails, call center transcripts.</li> </ul> <h4 id="112-llm-transformation-layer"><strong>1.1.2 LLM Transformation Layer</strong></h4> <p>Augments traditional transformations by:</p> <ul> <li>Performing entity extraction, semantic normalization, and text summarization.</li> <li>Enriching data with external knowledge or domain-specific context.</li> </ul> <h4 id="113-orchestration-layer"><strong>1.1.3 Orchestration Layer</strong></h4> <p>Dynamically manages workflows based on:</p> <ul> <li>Context signals (e.g., metadata, time).</li> <li>Operational constraints (e.g., resource availability, latency).</li> </ul> <h4 id="114-data-output-layer"><strong>1.1.4 Data Output Layer</strong></h4> <p>Delivers enriched, context-aware data into:</p> <ul> <li>Analytical systems (e.g., BigQuery, Snowflake).</li> <li>Machine learning pipelines.</li> <li>Operational dashboards.</li> </ul> <hr/> <h2 id="2-advanced-capabilities-what-llms-bring-to-etl"><strong>2. Advanced Capabilities: What LLMs Bring to ETL</strong></h2> <h3 id="21-context-driven-transformations"><strong>2.1 Context-Driven Transformations</strong></h3> <p>LLMs allow transformations to be driven by contextual signals. For instance:</p> <ul> <li>A financial dataset can be automatically aggregated by region during a crisis, reflecting real-time market shifts.</li> <li>Textual data can be enriched with sentiment scores or key insights extracted dynamically.</li> </ul> <h4 id="mathematical-framework"><strong>Mathematical Framework</strong></h4> <p>Let:</p> <ul> <li>( D ): Input dataset.</li> <li>( M ): Contextual metadata.</li> <li>( f ): Transformation function.</li> </ul> <p>A <strong>context-driven transformation</strong> is defined as:</p> \[T(D, M) = f(D, M)\] <p>Where ( M ) can include:</p> <ol> <li>Temporal signals (e.g., timestamps).</li> <li>Semantic signals (e.g., external knowledge embeddings).</li> <li>Operational metadata (e.g., system load).</li> </ol> <p>Example:</p> \[T_{\text{aggregate}}(D, M) = \begin{cases} \text{Aggregate by Region} &amp; \text{if } M = \text{Crisis Event} \\ \text{Aggregate by Product} &amp; \text{otherwise} \end{cases}\] <hr/> <h3 id="22-semantic-joins"><strong>2.2 Semantic Joins</strong></h3> <p>Traditional ETL joins rely on exact key matches, which fail in scenarios where data is inconsistent or requires semantic understanding. LLMs enable <strong>semantic joins</strong>, leveraging embeddings and metadata to establish relationships between datasets.</p> <h4 id="mathematical-framework-1"><strong>Mathematical Framework</strong></h4> <p>For keys \({ k_1 \in D_1 }\) and \({ k_2 \in D_2 }\), define the semantic similarity:</p> \[S(k_1, k_2) = \alpha \cdot \text{cos}(\vec{e}_{k_1}, \vec{e}_{k_2}) + \beta \cdot M(k_1, k_2)\] <p>Where:</p> <ul> <li>\(\vec{e}_{k}\): Embedding of key ( k ).</li> <li>\(M(k_1, k_2)\): Metadata-based similarity score.</li> <li>\(\alpha, \beta\): Weights for embeddings and metadata.</li> </ul> <p>A match is established if:</p> \[S(k_1, k_2) &gt; \tau\] <p>Where \(\tau\) is the similarity threshold.</p> <p><br/> <br/></p> <h4 id="implementation-example"><strong>Implementation Example</strong></h4> <p><strong>Scenario</strong>: A retail company integrates CRM data with transaction logs and social media mentions to create a unified customer profile.</p> <p><strong>Code</strong>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sentence_transformers</span> <span class="kn">import</span> <span class="n">SentenceTransformer</span>
<span class="kn">from</span> <span class="n">sklearn.metrics.pairwise</span> <span class="kn">import</span> <span class="n">cosine_similarity</span>

<span class="c1"># Input data
</span><span class="n">crm_names</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Jane Doe</span><span class="sh">"</span><span class="p">]</span>
<span class="n">transaction_names</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">J. Doe</span><span class="sh">"</span><span class="p">]</span>
<span class="n">social_mentions</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">@janedoe123</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># Generate embeddings
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">emb_crm</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">crm_names</span><span class="p">)</span>
<span class="n">emb_transactions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">transaction_names</span><span class="p">)</span>
<span class="n">emb_social</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">social_mentions</span><span class="p">)</span>

<span class="c1"># Compute similarity
</span><span class="n">similarity_scores</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">emb_crm</span><span class="p">,</span> <span class="n">emb_transactions</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">CRM-Transaction Match:</span><span class="sh">"</span><span class="p">,</span> <span class="n">similarity_scores</span><span class="p">)</span>

<span class="n">similarity_scores_social</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">emb_crm</span><span class="p">,</span> <span class="n">emb_social</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">CRM-Social Match:</span><span class="sh">"</span><span class="p">,</span> <span class="n">similarity_scores_social</span><span class="p">)</span>
</code></pre></div></div> <hr/> <h3 id="23-multimodal-data-integration"><strong>2.3 Multimodal Data Integration</strong></h3> <p>LLMs can process and contextualize diverse data modalities—text, images, and tables—simultaneously. For instance:</p> <ul> <li>Integrating text-based reviews with product images to assess customer sentiment.</li> <li>Parsing invoices that include text and tabular data.</li> </ul> <hr/> <h2 id="3-implementation-end-to-end-use-case"><strong>3. Implementation: End-to-End Use Case</strong></h2> <h3 id="scenario-customer-analytics-in-retail-banking"><strong>Scenario: Customer Analytics in Retail Banking</strong></h3> <p>A retail bank wants to build a <strong>Customer 360 View</strong>, integrating:</p> <ol> <li><strong>Transaction Data</strong>: Credit card logs.</li> <li><strong>Customer Profiles</strong>: CRM data.</li> <li><strong>Social Media Mentions</strong>: Sentiment and activity.</li> </ol> <h4 id="pipeline-steps"><strong>Pipeline Steps</strong></h4> <ol> <li><strong>Extract</strong>: <ul> <li>Load structured data (e.g., transactions, profiles) from databases.</li> <li>Scrape unstructured social media data using APIs.</li> </ul> </li> <li><strong>Transform</strong>: <ul> <li>Normalize inconsistent customer names with semantic joins.</li> <li>Enrich transaction data with inferred customer sentiment.</li> </ul> </li> <li><strong>Load</strong>: <ul> <li>Store the unified dataset in BigQuery for analysis.</li> </ul> </li> </ol> <hr/> <h3 id="code-implementation"><strong>Code Implementation</strong></h3> <p><br/></p> <h4 id="step-1-data-extraction"><strong>Step 1: Data Extraction</strong></h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># Load structured data
</span><span class="n">transactions</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">transactions.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">profiles</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">profiles.csv</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Load unstructured data
</span><span class="n">social_mentions</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">social_mentions.txt</span><span class="sh">"</span><span class="p">).</span><span class="nf">readlines</span><span class="p">()</span>
</code></pre></div></div> <p><br/></p> <h4 id="step-2-semantic-joins"><strong>Step 2: Semantic Joins</strong></h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalize customer names
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">SentenceTransformer</span><span class="p">(</span><span class="sh">"</span><span class="s">all-MiniLM-L6-v2</span><span class="sh">"</span><span class="p">)</span>
<span class="n">emb_transactions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">transactions</span><span class="p">[</span><span class="sh">"</span><span class="s">customer_name</span><span class="sh">"</span><span class="p">])</span>
<span class="n">emb_profiles</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">profiles</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># Match names
</span><span class="n">similarities</span> <span class="o">=</span> <span class="nf">cosine_similarity</span><span class="p">(</span><span class="n">emb_transactions</span><span class="p">,</span> <span class="n">emb_profiles</span><span class="p">)</span>
<span class="n">matches</span> <span class="o">=</span> <span class="p">[(</span><span class="n">transactions</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">profiles</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">similarities</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))]</span>
</code></pre></div></div> <p><br/></p> <h4 id="step-3-sentiment-enrichment"><strong>Step 3: Sentiment Enrichment</strong></h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">transformers</span> <span class="kn">import</span> <span class="n">pipeline</span>

<span class="c1"># Load sentiment analysis model
</span><span class="n">sentiment_analyzer</span> <span class="o">=</span> <span class="nf">pipeline</span><span class="p">(</span><span class="sh">"</span><span class="s">sentiment-analysis</span><span class="sh">"</span><span class="p">)</span>
<span class="n">social_sentiments</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sentiment_analyzer</span><span class="p">(</span><span class="n">mention</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">mention</span> <span class="ow">in</span> <span class="n">social_mentions</span><span class="p">]</span>
</code></pre></div></div> <hr/> <p><br/> <br/></p> <h2 id="4-challenges-and-future-directions"><strong>4. Challenges and Future Directions</strong></h2> <p><br/> <br/></p> <h3 id="41-scalability"><strong>4.1 Scalability</strong></h3> <p>LLMs require significant compute resources. Optimizations like fine-tuning task-specific models or caching frequently used embeddings can mitigate this.</p> <p><br/> <br/></p> <h3 id="42-governance"><strong>4.2 Governance</strong></h3> <p>Ensuring consistent results from LLM-driven pipelines requires robust logging and explainability tools.</p> <p><br/> <br/></p> <h3 id="43-real-time-etl"><strong>4.3 Real-Time ETL</strong></h3> <p>Integrating LLMs for real-time processing is an emerging challenge, requiring low-latency architectures and multimodal capabilities.</p> <hr/> <p><br/> <br/></p> <h3 id="conclusion-the-future-of-etl-with-llms"><strong>Conclusion: The Future of ETL with LLMs</strong></h3> <p>The integration of LLMs into ETL pipelines marks the beginning of a new era in data engineering. By enabling semantic understanding, context-driven transformations, and multimodal integration, LLMs transform ETL workflows from static processes into adaptive, intelligent systems.</p> <p>ETL with LLMs is not just about automation; it’s about creating <strong>decision-ready data pipelines</strong> that understand and adapt to the complexities of the real world. The future of data engineering is here, and it’s smarter, faster, and profoundly context-aware.</p>]]></content><author><name></name></author><category term="algorithms"/><category term="genai"/><category term="algorithms"/><category term="genai"/><category term="llm"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[Explore how Large Language Models (LLMs) are revolutionizing ETL pipelines. Discover advanced techniques like context-driven transformations, semantic joins, and multimodal integration, redefining data engineering with smarter, adaptive, and intelligent workflows.]]></summary></entry><entry><title type="html">Data Pipelines Gone Wild - 10 WTF Moments That’ll Make You Rethink Your Architecture</title><link href="https://subhadipmitra.com/blog/2024/data-pipelines-gone-wild/" rel="alternate" type="text/html" title="Data Pipelines Gone Wild - 10 WTF Moments That’ll Make You Rethink Your Architecture"/><published>2024-08-02T02:15:48+00:00</published><updated>2024-08-02T02:15:48+00:00</updated><id>https://subhadipmitra.com/blog/2024/data-pipelines-gone-wild</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/data-pipelines-gone-wild/"><![CDATA[<p>If you’ve ever stared at a cryptic error message in the middle of the night, muttering “WTF is happening with this pipeline?”, then buckle up. You’re about to embark on a wild ride through the data engineering twilight zone, where we’ll dissect ten mind-blowing pipeline snafus that’ll make you question everything you thought you knew. From ancient code that refuses to die to algorithms with a mind of their own, this ain’t your grandma’s data plumbing.</p> <p><br/></p> <h3 id="1-the-dark-data-necromancers-handbook">1. The Dark Data Necromancer’s Handbook</h3> <p><strong>Picture this:</strong> You’re rummaging through the cobwebbed corners of your company’s digital attic when suddenly, you stumble upon a dusty old hard drive (might as well be a long-forgotten object bucket on Cloud). Lo and behold, it contains a treasure trove of customer feedback from five years ago, trapped in an arcane .dat file format on a server that supposedly went extinct during the last ice age.</p> <p>Welcome to the Dark Data Graveyard, where valuable insights go to die… or do they?</p> <p><strong>The Resurrection Ritual:</strong></p> <ol> <li> <p><strong>Summon the Crawler Spirits:</strong> Unleash the power of automated data discovery tools like Google Cloud Data Catalog, AWS Glue, Azure Data Catalog, or open-source alternatives like <strong>Apache Atlas</strong> and <strong>OpenMetadata</strong>. These digital bloodhounds will sniff out forgotten files faster than you can say “legacy system.” If you’re in the Google Cloud, <strong>Google Cloud Data Catalog</strong> is your go-to tool for data discovery and metadata management.</p> </li> <li> <p><strong>The Tagging Séance:</strong> Employ machine learning algorithms to auto-tag your excavated data. Open-source libraries like <strong>Scikit-learn</strong> or <strong>TensorFlow</strong> can help with this task, and cloud platforms offer pre-trained models for entity extraction and classification.</p> </li> <li> <p><strong>The Format Exorcism:</strong> Use data transformation tools to convert those cryptic .dat files into something your modern systems won’t run screaming from. Consider <strong>Apache Spark</strong> for large-scale transformations, or <strong>Pandas</strong> for smaller datasets. In GCP, you can use <strong>Dataflow</strong> for serverless data processing and <strong>Cloud Dataprep</strong> for visual data preparation.</p> </li> <li> <p><strong>Insight Reanimation:</strong> Connect your newly discovered data to modern analytics platforms. <strong>Looker</strong> or <strong>Tableau</strong> can bring your data to life with interactive dashboards and visualizations. Open-source options like <strong>Metabase</strong> and <strong>Redash</strong> offer powerful data exploration and visualization capabilities. On GCP, <strong>BigQuery</strong> is your data warehousing powerhouse, while <strong>Looker Studio</strong> can help you visualize your findings.</p> </li> <li> <p><strong>The Continuous Vigil:</strong> Set up automated processes to regularly scan for dark data. <strong>Cloud-based event-driven architectures</strong> like AWS EventBridge or Azure Event Grid can trigger data discovery workflows whenever new data lands in your storage systems.</p> </li> </ol> <p><strong>Pro Tip:</strong> Create a “Data Archeology” team (no, seriously). These digital Indiana Joneses will make it their mission to explore the unknown reaches of your data ecosystem, armed with the latest tech and a thirst for hidden knowledge.</p> <p>Remember, in the world of data, nothing truly dies - it just waits for the right necromancer to come along. So grab your digital shovel, and start digging. Who knows what game-changing insights you might unearth from your very own Dark Data Graveyard? I’ll talk about Dark Data Management in the upcoming post.</p> <p><br/></p> <h3 id="2-pipeline-time-warp">2. Pipeline Time Warp</h3> <p>Ever inherited a mission-critical financial pipeline built on code that’s been around since, well, forever? You’re not alone. Imagine trying to unravel a complex legacy system, perhaps even written in a language like COBOL, with layers of undocumented logic and cryptic variable names.</p> <div class="language-cobol highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
  </span><span class="kd">IDENTIFICATION</span><span class="w"> </span><span class="kd">DIVISION</span><span class="p">.</span><span class="w">
  </span><span class="k">PROGRAM-ID</span><span class="p">.</span><span class="w"> </span><span class="n">CALCULATE-CUSTOMER-BALANCE</span><span class="p">.</span><span class="w">

  </span><span class="kd">DATA</span><span class="w"> </span><span class="kd">DIVISION</span><span class="p">.</span><span class="w">
      </span><span class="kn">WORKING-STORAGE</span><span class="w"> </span><span class="kn">SECTION</span><span class="p">.</span><span class="w">
          </span><span class="m">01</span><span class="w">  </span><span class="n">WS-CUSTOMER-RECORD</span><span class="p">.</span><span class="w">
              </span><span class="m">05</span><span class="w">  </span><span class="n">WS-CUSTOMER-ID</span><span class="w">         </span><span class="k">PIC</span><span class="w"> </span><span class="n">X</span><span class="p">(</span><span class="m">10</span><span class="p">).</span><span class="w">
              </span><span class="m">05</span><span class="w">  </span><span class="n">WS-CUSTOMER-NAME</span><span class="w">       </span><span class="k">PIC</span><span class="w"> </span><span class="n">X</span><span class="p">(</span><span class="m">30</span><span class="p">).</span><span class="w">
              </span><span class="m">05</span><span class="w">  </span><span class="n">WS-ACCOUNT-BALANCE</span><span class="w">     </span><span class="k">PIC</span><span class="w"> </span><span class="m">9</span><span class="p">(</span><span class="m">9</span><span class="p">)</span><span class="n">V99</span><span class="p">.</span><span class="w">
              </span><span class="m">05</span><span class="w">  </span><span class="n">WS-TRANSACTION-AMOUNT</span><span class="w">  </span><span class="k">PIC</span><span class="w"> </span><span class="m">9</span><span class="p">(</span><span class="m">7</span><span class="p">)</span><span class="n">V99</span><span class="p">.</span><span class="w">
          </span><span class="p">...</span><span class="w">

  </span><span class="kd">PROCEDURE</span><span class="w"> </span><span class="kd">DIVISION</span><span class="p">.</span><span class="w">
      </span><span class="k">OPEN</span><span class="w"> </span><span class="k">INPUT</span><span class="w"> </span><span class="n">CUSTOMER-FILE</span><span class="w">
            </span><span class="k">OUTPUT</span><span class="w"> </span><span class="n">UPDATED-CUSTOMER-FILE</span><span class="p">.</span><span class="w">

      </span><span class="k">READ</span><span class="w"> </span><span class="n">CUSTOMER-FILE</span><span class="w">
          </span><span class="k">AT</span><span class="w"> </span><span class="k">END</span><span class="w"> </span><span class="k">MOVE</span><span class="w"> </span><span class="s1">'</span><span class="s">Y</span><span class="s1">'</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="n">WS-END-OF-FILE-FLAG</span><span class="p">.</span><span class="w">

      </span><span class="k">PERFORM</span><span class="w"> </span><span class="k">UNTIL</span><span class="w"> </span><span class="n">WS-END-OF-FILE-FLAG</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'</span><span class="s">Y</span><span class="s1">'</span><span class="w">
          </span><span class="k">PERFORM</span><span class="w"> </span><span class="n">PROCESS-TRANSACTION</span><span class="w">
          </span><span class="k">READ</span><span class="w"> </span><span class="n">CUSTOMER-FILE</span><span class="w">
              </span><span class="k">AT</span><span class="w"> </span><span class="k">END</span><span class="w"> </span><span class="k">MOVE</span><span class="w"> </span><span class="s1">'</span><span class="s">Y</span><span class="s1">'</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="n">WS-END-OF-FILE-FLAG</span><span class="w">
      </span><span class="k">END-PERFORM</span><span class="p">.</span><span class="w">

      </span><span class="k">CLOSE</span><span class="w"> </span><span class="n">CUSTOMER-FILE</span><span class="w">
            </span><span class="n">UPDATED-CUSTOMER-FILE</span><span class="p">.</span><span class="w">
      </span><span class="k">STOP</span><span class="w"> </span><span class="k">RUN</span><span class="p">.</span><span class="w">

  </span><span class="n">PROCESS-TRANSACTION</span><span class="p">.</span><span class="w">
      </span><span class="k">IF</span><span class="w"> </span><span class="n">WS-TRANSACTION-CODE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'</span><span class="s">D</span><span class="s1">'</span><span class="w">
          </span><span class="k">ADD</span><span class="w"> </span><span class="n">WS-TRANSACTION-AMOUNT</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="n">WS-ACCOUNT-BALANCE</span><span class="w">
      </span><span class="k">ELSE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="n">WS-TRANSACTION-CODE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'</span><span class="s">W</span><span class="s1">'</span><span class="w">
          </span><span class="k">SUBTRACT</span><span class="w"> </span><span class="n">WS-TRANSACTION-AMOUNT</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">WS-ACCOUNT-BALANCE</span><span class="w">
      </span><span class="k">END-IF</span><span class="p">.</span><span class="w">

      </span><span class="k">WRITE</span><span class="w"> </span><span class="n">UPDATED-CUSTOMER-RECORD</span><span class="w"> </span><span class="k">TO</span><span class="w"> </span><span class="n">UPDATED-CUSTOMER-FILE</span><span class="p">.</span><span class="w">
</span></code></pre></div></div> <p>Notice the rigid structure, verbose syntax, and those nested PERFORM statements. This can make it challenging to understand the program’s flow and modify it without unintended consequences.</p> <p>Or perhaps you’re wrestling with a Perl script that looks like it was written on a typewriter:</p> <div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="c1">#!/usr/bin/perl -w</span>

  <span class="k">use</span> <span class="nv">strict</span><span class="p">;</span>
  <span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">%customer_balances</span><span class="p">;</span>

  <span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="p">'</span><span class="s1">&lt;</span><span class="p">',</span> <span class="p">'</span><span class="s1">sales.txt</span><span class="p">')</span> <span class="ow">or</span> <span class="nb">die</span> <span class="p">"</span><span class="s2">Could not open file 'sales.txt' $!</span><span class="p">";</span>

  <span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$line</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nv">$fh</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">chomp</span> <span class="nv">$line</span><span class="p">;</span>
      <span class="k">my</span> <span class="p">(</span><span class="nv">$customer_id</span><span class="p">,</span> <span class="nv">$transaction_type</span><span class="p">,</span> <span class="nv">$amount</span><span class="p">)</span> <span class="o">=</span> <span class="nb">split</span> <span class="sr">/\|/</span><span class="p">,</span> <span class="nv">$line</span><span class="p">;</span>

      <span class="nv">$customer_balances</span><span class="p">{</span><span class="nv">$customer_id</span><span class="p">}</span> <span class="o">||=</span> <span class="mi">0</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="nv">$transaction_type</span> <span class="ow">eq</span> <span class="p">'</span><span class="s1">D</span><span class="p">')</span> <span class="p">{</span>
          <span class="nv">$customer_balances</span><span class="p">{</span><span class="nv">$customer_id</span><span class="p">}</span> <span class="o">+=</span> <span class="nv">$amount</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nv">$transaction_type</span> <span class="ow">eq</span> <span class="p">'</span><span class="s1">W</span><span class="p">')</span> <span class="p">{</span>
          <span class="nv">$customer_balances</span><span class="p">{</span><span class="nv">$customer_id</span><span class="p">}</span> <span class="o">-=</span> <span class="nv">$amount</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="nb">close</span> <span class="nv">$fh</span><span class="p">;</span>

  <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$customer_id</span> <span class="p">(</span><span class="nb">keys</span> <span class="nv">%customer_balances</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">print</span> <span class="p">"</span><span class="si">$customer_id</span><span class="s2">: </span><span class="si">$customer_balances</span><span class="s2">{</span><span class="si">$customer_id</span><span class="s2">}</span><span class="se">\n</span><span class="p">";</span>
  <span class="p">}</span>
</code></pre></div></div> <p><strong>Perl Perplexities</strong>: Perl’s love for brevity and its liberal use of symbols can create dense, hard-to-read code. Watch out for implicit variables, context-dependent syntax, and the potential for subtle bugs due to the lack of strictness in older scripts.</p> <p><strong>The Time Machine:</strong> Roll up your sleeves and reverse-engineer that code like a digital Indiana Jones. Create a data lineage map, meticulously document every transformation, and gradually refactor components into modern languages like Python or Go, ensuring data integrity through rigorous testing with tools like Great Expectations. Replace those COBOL <code class="language-plaintext highlighter-rouge">PERFORM</code> statements with Python functions or Go routines, and swap out that Perl regex parsing with cleaner, more maintainable code. You’ll not only bring your pipeline into the 21st century but also save your sanity in the process.</p> <p><br/></p> <h3 id="3-when-big-data-becomes-a-black-hole">3. When Big Data Becomes a Black Hole</h3> <p>Remember that time your social media sentiment analysis project imploded under the weight of a billion tweets, crashing your Hadoop cluster?</p> <p><strong>The Escape Plan:</strong> Embrace the power of cloud-based big data processing platforms like AWS EMR (Elastic MapReduce), Azure HDInsight, or Google Dataproc for scalable, managed Hadoop and Spark clusters. You could also explore serverless options like AWS Lambda or Google Cloud Functions for specific data processing tasks, scaling up or down on demand without managing infrastructure.</p> <p><br/></p> <h3 id="4-time-traveling-transactions">4. Time Traveling Transactions</h3> <p>You thought international sales were going great, until you realized your reports were wonky due to a time zone tango. Orders from Tokyo were showing up in yesterday’s report!</p> <p><strong>The Time Zone Tamer:</strong> Standardize all data processing on Coordinated Universal Time (UTC) to ensure consistency and accuracy. However, to cater to users in different time zones, you can leverage the power of Apache Spark to easily convert timestamps during data presentation.</p> <p>With Spark, you can:</p> <ol> <li> <p><strong>Ingest and Process:</strong> Convert all incoming timestamps to UTC during data ingestion and processing to eliminate ambiguities caused by varying time zones.</p> </li> <li> <p><strong>Transform and Present:</strong> Utilize Spark’s built-in time zone functions like <code class="language-plaintext highlighter-rouge">to_utc_timestamp</code> and <code class="language-plaintext highlighter-rouge">from_utc_timestamp</code> to seamlessly convert timestamps to the end user’s local time zone when generating reports or visualizations.</p> </li> <li> <p><strong>Flexible User Preferences:</strong> Allow users to select their preferred time zone within your application, and dynamically adjust the displayed timestamps accordingly using Spark’s transformations.</p> </li> </ol> <p>By establishing UTC as the bedrock of your temporal data and using Spark for dynamic time zone conversions, you achieve both data integrity and user-friendly presentation. Your reports and dashboards become universally accessible, allowing users in different time zones to interpret data accurately within their own context.</p> <p><br/></p> <h3 id="5-pipeline-turf-wars">5. Pipeline Turf Wars</h3> <p>When your real-time streaming pipeline (Kafka, anyone?) decided it hated your batch-processing analytics pipeline (Hive, maybe?), and they duked it out in a messy data brawl, leaving you with duplicate records and inconsistent metrics.</p> <p><strong>The Peace Treaty:</strong> Build a robust change data capture (CDC) mechanism to keep the peace. Tools like Debezium can tap into the transaction logs of your source databases (MySQL, PostgreSQL, etc.), extracting change events and reliably streaming them into your Kafka pipeline. From there, you can fan out this stream of updates to various targets, including your trusty Hive data warehouse.</p> <p>If you’re knee-deep in the Google Cloud ecosystem, <a href="https://cloud.google.com/blog/products/data-analytics/bigquery-gains-change-data-capture-functionality">BigQuery’s new Change Data Capture (CDC)</a> functionality is a game-changer. It lets you easily capture changes from your transactional data sources and stream them directly into BigQuery, where your batch processing jobs can happily crunch away on fresh, consistent data.</p> <p>By implementing a reliable CDC mechanism, you ensure that both your real-time streaming pipeline and your batch-processing analytics pipeline are fed with the same, up-to-date information. This eliminates the risk of data inconsistencies, duplicate records, and those dreaded “WTF” moments when your metrics don’t add up. It’s like having a diplomatic corps for your data, ensuring peaceful coexistence between your pipelines and delivering reliable insights to your business.</p> <p><br/></p> <h3 id="6-the-algorithm-that-went-rogue">6. The Algorithm That Went Rogue</h3> <p>That moment your facial recognition system, trained on a biased dataset, decided it had a “type” and started flagging certain ethnicities more than others. Yikes.</p> <p><strong>The Ethics Intervention:</strong> Conduct regular bias audits with tools like Google’s What-If Tool or open source frameworks like Fairlearn. These tools provide valuable insights into how your model performs across different groups and help identify potential biases.</p> <ul> <li> <p><strong>For classical ML models:</strong> Look at metrics like:</p> <ul> <li><strong>Demographic Parity:</strong> Are the model’s predictions equally distributed across different demographic groups?</li> <li><strong>Equalized Odds:</strong> Does the model have similar true positive and false positive rates across different groups?</li> <li><strong>Disparate Impact:</strong> Is the model disproportionately affecting one group over another? <br/> <br/></li> </ul> </li> <li> <p><strong>For LLMs:</strong> Consider:</p> <ul> <li><strong>Token-level Bias:</strong> Are certain tokens or phrases associated with specific demographic groups being treated differently?</li> <li><strong>Prompt Sensitivity:</strong> Does the model’s behavior change significantly when the prompt is slightly altered to include or exclude sensitive attributes?</li> <li><strong>Representation Bias:</strong> Does the model’s output perpetuate stereotypes or underrepresent certain groups?</li> </ul> </li> </ul> <p>By diversifying your training data to include a broader range of demographics and real-world scenarios, you can mitigate the risk of unintended discrimination. Additionally, consider implementing fairness constraints directly into your algorithms, such as setting thresholds for demographic parity or equalized odds, to ensure equitable outcomes for all users.</p> <p><br/></p> <h3 id="7-datas-déjà-vu">7. Data’s Déjà Vu</h3> <p>Ever wished you could rewind your e-commerce data to see how a product’s price changed over time? Perhaps for a promotion analysis or to detect anomalies.</p> <p><strong>The Data Time Machine:</strong> Implement a solution that tracks the history of your data, allowing you to revisit any point in time.</p> <ul> <li> <p><strong>PostgreSQL with Temporal Tables:</strong> For relational data, use PostgreSQL’s built-in temporal tables to automatically track changes over time. For example, a query like <code class="language-plaintext highlighter-rouge">SELECT * FROM products FOR SYSTEM_TIME AS OF '2023-01-01'</code> would retrieve the product catalog as it existed on January 1st, 2023.</p> </li> <li> <p><strong>BigQuery Time Travel:</strong> Leverage BigQuery’s Time Travel feature to query data as it appeared up to 7 days in the past. For example, <code class="language-plaintext highlighter-rouge">SELECT * FROM mydataset.mytable FOR SYSTEM_TIME AS OF TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY)</code> will show you the data from yesterday.</p> </li> <li> <p><strong>Apache Iceberg:</strong> This open table format for massive datasets provides powerful time travel capabilities on top of data lakes like S3 or HDFS. With Iceberg, you can query historical snapshots of your data using SQL syntax, like <code class="language-plaintext highlighter-rouge">SELECT * FROM mytable.history AS OF TIMESTAMP '2023-06-15 10:00:00'</code>.</p> </li> <li> <p><strong>InfluxDB:</strong> For time-series data, InfluxDB’s retention policies allow you to automatically manage the lifecycle of your data. By setting up retention policies, you can control how long historical data is stored and made available for analysis. To query specific time ranges in InfluxDB, you can use the <code class="language-plaintext highlighter-rouge">time</code> filter in your Flux queries. For example, <code class="language-plaintext highlighter-rouge">from(bucket: "mybucket") |&gt; range(start: -1h)</code> will return all data from the past hour.</p> </li> </ul> <p>Each of these approaches offers a unique way to rewind, analyze, and gain insights from your data’s past, whether it’s stored in a relational database, a data warehouse, or a data lake.</p> <p><br/></p> <h3 id="8-the-pipelines-hidden-agenda">8. The Pipeline’s Hidden Agenda</h3> <p>That recommendation engine, built by a team that looked suspiciously like a Silicon Valley frat party, started pushing products only guys would want, alienating half your customer base.</p> <p><strong>The Bias Buster:</strong> Conduct blind A/B testing with diverse user groups, incorporating tools like Fairlearn for assessing fairness in your models. Actively seek feedback from diverse users and regularly review the design assumptions of your pipeline to uncover and address any unintended biases.</p> <p><br/></p> <h3 id="9-vr-surgery-but-make-it-touchy-feely">9. VR Surgery, But Make It Touchy-Feely</h3> <p>Want to build a VR surgical training sim that feels as real as the OR? You’ll need more than just visuals and sound.</p> <p><strong>The Sensory Overload Solution:</strong> Develop specialized data pipelines using frameworks like Unity or Unreal Engine to synchronize and process haptic, visual, and auditory data streams in real time. This means mastering latency challenges and optimizing for high-fidelity sensory experiences.</p> <p>For instance, in a VR surgical simulation, the slightest delay between the user’s actions (e.g., moving a scalpel) and the corresponding visual and haptic feedback can shatter the illusion of immersion. To overcome this, developers employ techniques like:</p> <ul> <li><strong>Predictive Tracking:</strong> Anticipating the user’s next move based on current trajectory and velocity, pre-rendering frames to reduce lag.</li> <li><strong>Asynchronous Rendering:</strong> Distributing rendering tasks across multiple threads or GPUs to prevent a single bottleneck.</li> <li><strong>Object Pooling:</strong> Pre-instantiating objects in memory to avoid the overhead of creating them on the fly during interaction.</li> <li><strong>Data Compression:</strong> Reducing the size of data packets transmitted between devices to minimize network latency.</li> </ul> <p>By meticulously addressing these latency issues, developers can create seamless and convincing VR experiences where the virtual world feels as responsive and real as the physical one.</p> <p>Cloud-based rendering services like AWS Nimble Studio or Google Cloud Rendering can offload the heavy lifting of real-time rendering and streaming, freeing up your local hardware to focus on haptic feedback and other sensory inputs. Explore cloud-based gaming platforms like Amazon Luna or NVIDIA GeForce NOW for their low-latency streaming capabilities, providing a smooth and responsive experience for users.</p> <p><br/></p> <h3 id="10-pipeline-feng-shui-for-the-win">10. Pipeline Feng Shui for the Win</h3> <p>When your microservices architecture looked like a bowl of spaghetti code, with tangled dependencies and cryptic error messages, and your team was ready to throw their keyboards out the window.</p> <p><strong>The Zen Master’s Guide:</strong> Redesign that mess for clarity, use clear names and visual aids, and establish error handling protocols. A calm pipeline is a happy pipeline (and a happy team). Here’s how to cultivate that zen:</p> <ul> <li><strong>Domain-Driven Design (DDD):</strong> Break down your monolith into microservices based on distinct business domains. For example, separate services for user management, product catalog, and order processing.</li> <li><strong>Clear Naming Conventions:</strong> Use descriptive names for services, endpoints, and variables. Consider establishing a company-wide naming convention to ensure consistency across teams and projects. For instance, use verbs for service names (e.g., <code class="language-plaintext highlighter-rouge">user-service</code>, <code class="language-plaintext highlighter-rouge">order-service</code>) and nouns for endpoints (e.g., <code class="language-plaintext highlighter-rouge">/users</code>, <code class="language-plaintext highlighter-rouge">/orders</code>).</li> <li><strong>Distributed Tracing:</strong> Integrate tools like Jaeger or Zipkin to track requests as they flow through your microservices. This will help you pinpoint bottlenecks, latency issues, and error sources. For example, Zipkin’s web interface allows you to visualize the entire request trace and identify which service is causing delays.</li> <li><strong>Circuit Breakers:</strong> Implement circuit breakers using libraries like Hystrix or Resilience4j to prevent cascading failures when a service is overloaded. If a service fails repeatedly, the circuit breaker will trip, preventing further requests from reaching it and giving it time to recover.</li> <li><strong>Retry Mechanisms:</strong> Introduce retry logic with exponential backoff to handle transient errors gracefully. For instance, if a service fails due to a temporary network issue, retrying the request after a short delay might resolve the problem without interrupting the overall flow.</li> <li><strong>Observability:</strong> Set up comprehensive logging and monitoring using tools like Prometheus and Grafana to gain deep insights into your pipeline’s performance and health. Create custom dashboards to visualize key metrics and set up alerts to proactively detect and address anomalies before they escalate.</li> </ul> <p>These recommendations would allow you to transform your chaotic microservices architecture into a well-organized, efficient, and reliable system. Your developers will thank you for it, and your data will flow smoothly, like a tranquil stream in a Zen garden.</p> <p><br/></p> <h3 id="concluding-thoughts">Concluding thoughts</h3> <p>Data engineering is a field ripe with unexpected challenges and frustrating setbacks. Time warps, rogue algorithms, and hidden data are just a few of the curveballs you might encounter. But these moments, as hair-pulling as they can be, also fuel innovation. They force us to think creatively, question our assumptions, and ultimately build better, smarter, more ethical pipelines.</p> <p>So, next time your pipeline misbehaves, don’t despair. Embrace the challenge as an opportunity to hone your skills and push the boundaries of what’s possible. After all, in the ever-changing world of data, the only constant is change. With a bit of ingenuity and a healthy dose of perseverance, you can turn even the most frustrating data problems into elegant solutions.</p>]]></content><author><name></name></author><category term="platform"/><category term="data"/><category term="platform"/><category term="data-pipelines"/><summary type="html"><![CDATA[Buckle up for a wild ride through 10 mind-blowing data pipeline disasters and their solutions. From ancient code to biased algorithms, this post reveals the chaos and how to conquer it!]]></summary></entry><entry><title type="html">Introducing ETL-C (Extract, Transform, Load, Contextualize) - a new data processing paradigm</title><link href="https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm/" rel="alternate" type="text/html" title="Introducing ETL-C (Extract, Transform, Load, Contextualize) - a new data processing paradigm"/><published>2024-05-04T22:20:18+00:00</published><updated>2024-05-04T22:20:18+00:00</updated><id>https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/etlc-context-new-paradigm/"><![CDATA[<blockquote> <p>This blog post proposes a novel concept - ETL-C, a context-first approach for building Data / AI platforms in the Generative AI dominant era. More discussions to follow.</p> </blockquote> <p>Think of your data as a sprawling city.</p> <p>Raw data is just buildings and streets, lacking the vibrant life that gives it purpose. ELT-C injects that vibrancy - the demographics, traffic patterns, and even the local buzz. With the added dimensions of Context Stores, your data city becomes a place of strategic insights and informed action.</p> <p>As we develop an increasing number of generative AI applications powered by large language models (LLMs), contextual information about the organization’s in-house datasets becomes crucial. This contextual data equips our platforms to effectively and successfully deploy GenAI applications in real-world scenarios, ensuring they are relevant to specific business needs and tailored to the appropriate contexts.</p> <p>Let’s explore how this integrated approach empowers data-driven decision-making.</p> <p><br/></p> <h1 id="introducing-elt-c">Introducing ELT-C</h1> <p>Let’s recap the key ETL stages followed by the Contextualize:</p> <ol> <li> <p><strong>Extract</strong> The “Extract” stage involves pulling data from its original sources. These could be databases, applications, flat files, cloud systems, or even IoT devices! The goal is to gather raw data in its various forms.</p> </li> <li> <p><strong>Load</strong> Once extracted, data is moved (“Loaded”) into a target system designed to handle large volumes. This is often a data warehouse, data lake, or a cloud-based storage solution. Here, the focus is on efficient transfer and storage, minimizing changes to the raw data.</p> </li> <li> <p><strong>Transform</strong> This stage is all about making data usable for analysis. Transformations could include:</p> <ul> <li>Cleaning and standardizing data (e.g., fixing inconsistencies, handling missing values)</li> <li>Merging datasets from different sources</li> <li>Calculations or aggregations (like calculating totals or averages)</li> </ul> </li> <li> <p><strong>Contextualize</strong> Contextualization is the heart of ELT-C, going beyond basic data processing and turning your information into a powerful analysis tool. It involves adding layers of information, including:</p> <ul> <li> <p><strong>Metadata</strong>: Descriptive details about the data itself, such as where it originated, when it was collected, what data types are included, and any relevant quality indicators. This makes data easier to understand, catalog, and use.</p> </li> <li> <p><strong>External Data</strong>: Enriching your data by linking it to external sources. This might include:</p> <ul> <li>Customer demographics: Supplementing sales transactions with customer age, location, or income data for better segmentation.</li> <li>Market trends: Adding industry reports or competitor data to contextualize your company’s performance.</li> <li>Weather data: Correlating weather patterns with sales trends or energy consumption patterns to understand external drivers.</li> </ul> </li> <li> <p><strong>User Data</strong>: Augmenting data with insights about how users interact with your products, services, or website. This could include:</p> <ul> <li>Website behavior: Tracking user navigation paths to reveal buying intent or improve site design.</li> <li>App engagement: Analyzing in-app behavior to identify churn indicators or opportunities to boost retention.</li> <li>LLM engagement: Flowback LLM analytics data as in-house technical / business users and end-customers of your platform interact with other LLM applications. This could include insights on the types of queries, responses, and feedback generated within the LLM ecosystem.</li> </ul> </li> </ul> </li> </ol> <p><br/></p> <h2 id="example-elt-c-for-next-best-offers---turning-data-into-personalized-credit-card-solutions">Example: ELT-C for Next Best Offers - Turning Data into Personalized Credit Card Solutions</h2> <p>Let’s see how the combination of metadata, external data, and user data could all be leveraged by a retail bank to optimize next-best credit card offers, with a focus on how contextualization enhances traditional approaches:</p> <ul> <li> <p><strong>Metadata</strong></p> <ul> <li><strong>Example:</strong> Detailed metadata on customer transactions, product descriptions, and marketing campaign data. This includes timestamps, source systems, data types, and quality scores, etc.</li> <li><strong>How it helps:</strong> Ensures the bank uses up-to-date, reliable information and can trace any issues back to the origin.</li> <li><strong>Contextualize for Better Analysis</strong>: Knowing the recency of data is key for some offers (e.g., targeting recent high spenders). Metadata on the origin of data could reveal if certain marketing campaigns outperform others based on the data source, leading to refined targeting strategies.</li> </ul> </li> <li> <p><strong>External Data</strong></p> <ul> <li><strong>Example:</strong> <ul> <li>Customer demographics (age, income, location)</li> <li>Market trends in interest rates, competitor offers, economic indicators</li> </ul> </li> <li><strong>How it helps</strong>: Broad segmentation (e.g., higher income bracket might qualify for a premium card) and understanding general market conditions.</li> <li><strong>Contextualize for Better Analysis:</strong> <ul> <li>Localized economic data alongside customer demographics could reveal underserved areas where the bank can expand its card offerings.</li> <li>Sudden changes in economic forecasts or competitor actions might trigger proactive offers to solidify relationships with existing customers.</li> </ul> </li> </ul> </li> <li> <p><strong>User Data</strong></p> <ul> <li> <p><strong>Website behavior</strong>: Tracking user navigation paths to reveal buying intent or improve site design. Going beyond basic page views, contextualization could incorporate external economic data or user demographics to understand if browsing behavior is driven by necessity or changing financial priorities.</p> </li> <li> <p><strong>App engagement</strong>: Analyzing in-app behavior to identify churn indicators or opportunities to boost retention. Contextualize for Better Analysis: Adding LLM-derived sentiment analysis of user support queries within the app adds a new dimension to understanding pain points. This can reveal issues beyond technical bugs, potentially highlighting misaligned features or confusing user experience elements.</p> </li> <li> <p><strong>LLM engagement</strong>: Flowback LLM analytics data as <strong>in-house technical / business users and end-customers of your platform interact with other LLM applications. This could include insights on the types of queries, responses, and feedback generated within the LLM ecosystem</strong>. This is where ELT-C shines! LLM queries can be correlated with other user actions across systems. For instance, are users researching competitor offerings in the LLM, then browsing specific product pages on the bank’s site? This context highlights a customer considering alternatives and the need for urgent proactive engagement.</p> </li> </ul> </li> </ul> <p><br/></p> <hr/> <h1 id="context-bridge--stores">Context Bridge &amp; Stores</h1> <p><br/></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/blog/contexts-480.webp 480w,/assets/img/blog/contexts-800.webp 800w,/assets/img/blog/contexts-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/blog/contexts.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In image above, a Context Bridge that provides real time contexts across multiple publishers and subsribers. Context Stores can become even more powerful, when integrated with an Enterprise Knowledge Graph or Data Catalog (structured entity relationships meet flexible context stores for richer data analysis)</p> <p><br/></p> <h3 id="what-is-a-context-store">What is a Context Store?</h3> <p>A Context Store is a centralized repository designed specifically for storing, managing, and retrieving contextual data. It extends the concept of feature stores to encompass a broader range of contextual information that can power rich insights and highly adaptive systems.</p> <p><strong>How Context Stores Elevate Context Management:</strong></p> <ul> <li><strong>Centralization:</strong> Breaks down silos between isolated contextual data sources, creating a single source of truth for analytics and machine learning models.</li> <li><strong>Accessibility:</strong> Democratizes access to contextual information, making it readily available to any relevant system or application.</li> <li><strong>Governance:</strong> Implements consistent quality checks, security, and compliance management of context data.</li> <li><strong>Real-time Insights:</strong> Enables systems to react rapidly to shifts in context, providing up-to-the-minute analysis and adaptive experiences.</li> </ul> <p><br/></p> <h3 id="architecturally-significant-requirements-asrs">Architecturally Significant Requirements (ASRs)</h3> <table class="table table-bordered"> <thead> <tr> <th>No.</th> <th>Requirement</th> <th>Aspects</th> </tr> </thead> <tbody> <tr> <td>ASR1</td> <td>Data Storage and Management</td> <td>- Accommodates diverse context types: metadata, user data, external data, embeddings.<br/>- Supports structured, semi-structured, and unstructured data formats.<br/>- Efficient storage and retrieval optimized for context search and analysis.</td> </tr> <tr> <td>ASR2</td> <td>Real-time updates</td> <td>- Integrates with streaming data sources for capturing dynamic changes in context<br/>- Updates contextual data with low latency for real-time use cases</td> </tr> <tr> <td>ASR3</td> <td>Version Control</td> <td>- Tracks historical changes to contextual data<br/>- Supports debugging and analysis of time-dependent insights and model behavior</td> </tr> <tr> <td>ASR4</td> <td>Data Access and Retrieval</td> <td>- Intuitive interface or query language for context discovery and exploration.<br/>- Supports queries for specific contextual information (by source, entities, timeframe)</td> </tr> <tr> <td>ASR5</td> <td>Scalability and Performance</td> <td>- Handles large volumes of contextual data without degradation. <br/>- Provides fast responses to search queries and data access requests. <br/>- Scales well to accommodate increasing data loads or user traffic.</td> </tr> <tr> <td>ASR6</td> <td>Availability and Reliability</td> <td>- Highly available to ensure continuous operation for context-dependent systems. <br/>- Incorporates fault tolerance and data replication to prevent data loss.</td> </tr> <tr> <td>ASR7</td> <td>Security and Compliance</td> <td>- Implements robust access controls and data encryption. <br/>- Adheres to relevant data privacy regulations (e.g., GDPR, CCPA). <br/>- Maintains audit trails for tracking data access and modifications.</td> </tr> <tr> <td>ASR8</td> <td>Maintainability and Extensibility</td> <td>- Offers straightforward administration features for data updates or schema changes. <br/>- Can be easily extended to support new context types or integrate with evolving systems.</td> </tr> </tbody> </table> <p><br/></p> <h3 id="context-stores-vs-vector-stores">Context Stores vs <a href="https://en.wikipedia.org/wiki/Vector_database">Vector Stores</a></h3> <p>Data isn’t just about numbers and values. Context adds the crucial “why” and “how” behind data points. Context stores have the potential to handle this richness, while vector stores specialize in representing relationships within data.</p> <p>Let’s delve into these specialized tools.</p> <p><br/></p> <p><strong>Similarities</strong></p> <ul> <li><strong>Purpose</strong>: Both context stores and vector stores aim to enhance how information is stored, retrieved, and utilized for analytics and machine learning models.</li> <li><strong>Centralization</strong>: Both act as centralized repositories for their specific data types, improving accessibility and organization.</li> <li><strong>Specialization</strong>: Both are specialized databases, unlike traditional relational databases, optimized for their unique data types (contextual features vs. embeddings).</li> </ul> <p><br/></p> <p><strong>Key Differences</strong> <br/></p> <table class="table table-bordered"> <thead> <tr> <th>Feature</th> <th>Context Store</th> <th>Vector Store</th> </tr> </thead> <tbody> <tr> <td>Focus</td> <td>Broad range of contxtual data</td> <td>Numerical representations of data (embeddings)</td> </tr> <tr> <td>Data Types</td> <td>Metadata, structured data, text, external data, embeddings</td> <td>Primarily numerical vectors (embeddings)</td> </tr> <tr> <td>Search Methods</td> <td>Metadata-based, text-based, feature searches</td> <td>Similarity-based search using vector distances</td> </tr> <tr> <td>Primary Use Case</td> <td>Powering analytics, ML models with rick context</td> <td>Recommendations, semantic search, similarity analysis</td> </tr> </tbody> </table> <p><br/></p> <p><strong>How They Can Work Together</strong></p> <p>Context stores and vector stores are often complementary in modern data architectures:</p> <ol> <li> <p><strong>Embedding Storage</strong>: Context stores can house embeddings alongside other contextual data, enabling a holistic view for machine learning models.</p> </li> <li> <p><strong>Semantic Search</strong>: Vector stores enhance how context stores access information, allowing searches for contextually similar items based on their embeddings.</p> </li> <li> <p><strong>Enriching ML Features</strong>: Context stores provide a variety of data sources to inform the creation of powerful features for ML models. These features might then be transformed into embeddings and stored in the vector store.</p> </li> </ol> <p><br/></p> <h3 id="context-stores-and-knowledge-graphs-kgs">Context Stores and <a href="https://en.wikipedia.org/wiki/Knowledge_graph">Knowledge Graphs (KGs)</a></h3> <p>Knowledge Graphs (KGs) and Context Stores can complement each other to significantly enhance how data is managed and utilized:</p> <p><br/></p> <h4 id="synergy-between-knowledge-graphs-and-context-stores">Synergy Between Knowledge Graphs and Context Stores</h4> <ul> <li>Shared Goal: Both aim to enrich data with meaning and context, empowering more insightful analytics and fostering a deeper understanding of information.</li> <li>Complementary Strengths: KGs excel at capturing relationships between entities in a structured way, while context stores manage diverse contextual data beyond pre-defined relationships.</li> </ul> <p><br/></p> <h4 id="how-they-can-work-together">How They Can Work Together</h4> <ul> <li> <p><strong>Contextualizing Knowledge Graphs</strong>: Context stores can provide KG entities with richer context. Imagine a KG entity for a “product”.</p> <blockquote> <p>A context store might house information about a specific product launch event, user reviews mentioning the product, or real-time pricing data. This contextual data adds depth to the product entity within the KG.</p> </blockquote> </li> <li> <p><strong>Reasoning with Context</strong>: KGs enable reasoning over connected entities, considering the relationships within the graph. Context stores can provide real-time updates or specific details that influence this reasoning process. Think of a recommendation system that leverages a KG to understand user preferences and product relationships.</p> <blockquote> <p>Real-time stock data from a context store could influence the recommendation engine to suggest alternative products if a preferred item is out of stock.</p> </blockquote> </li> <li> <p><strong>Enriching Context with Knowledge</strong>: KGs can act as a source of structured context for the data within a context store.</p> <blockquote> <p>For instance, a context store might hold user search queries related to a particular topic. A KG could link these queries to relevant entities and their relationships, providing a more comprehensive understanding of user intent behind the searches. These queries can be in the form of the on-site / in-app LLM powered chat interactions too.</p> </blockquote> </li> </ul> <p><br/></p> <h4 id="example-customer-support-knowledge-graphs-and-context-stores">Example: Customer Support (Knowledge Graphs and Context Stores)</h4> <p>Imagine a customer support scenario where a user has a question about a product.</p> <ul> <li><strong>KG</strong>: Represents products, their features, warranties, and troubleshooting steps as interconnected entities.</li> <li><strong>Context Store</strong>: Stores user purchase history, recent interactions with the support system, and real-time product availability data.</li> </ul> <p>By working together:</p> <ul> <li>The KG can guide the support agent towards relevant troubleshooting steps based on the specific product and its features.</li> <li>The context store can inform the agent of the user’s past interactions and product ownership, allowing for a more personalized support experience.</li> <li>Real-time data from the context store could reveal if the product is experiencing a known issue, enabling the agent to address the user’s concern more efficiently.</li> </ul> <p><br/></p> <h2 id="building-a-context-store-on-gcp-with-bigtable-and-ekg">Building a Context Store on GCP with BigTable and EKG</h2> <p>GCP provides powerful tools to build a robust and sophisticated Context Store. By leveraging BigTable for scalable storage and versioning, and EKG for structured context, you create a system that supports rich analytics and adaptive machine learning models.</p> <p><br/></p> <h3 id="key-components">Key Components:</h3> <ul> <li> <p><a href="https://cloud.google.com/bigtable/docs/overview">BigTable</a>: Serves as the foundation for storing diverse contextual data types. Its high-performance, scalability, and native versioning are ideal for capturing both real-time updates and historical context.</p> </li> <li> <p><a href="https://cloud.google.com/enterprise-knowledge-graph/docs">Cloud Enterprise Knowledge Graph (EKG)</a>: EKG introduces a structured context layer. It manages entities, their relationships, and rich metadata. This allows you to connect and represent complex relationships within your data.</p> </li> <li> <p><a href="https://cloud.google.com/pubsub">Pub/Sub</a>: A reliable messaging service for ingesting real-time updates from various context sources like user behavior tracking, IoT sensors, or external data streams.</p> </li> <li> <p><a href="https://cloud.google.com/dataflow">Cloud Dataflow</a>: This fully-managed service cleans, transforms, and enriches streamed context data from Pub/Sub. Dataflow can link context data to EKG entities or derive features for BigTable storage.</p> </li> <li> <p><a href="https://cloud.google.com/security/products/iam">Cloud IAM</a>: Enforce fine-grained access controls on all GCP resources (BigTable, EKG, Pub/Sub) for security and compliance.</p> </li> </ul> <p><br/></p> <h3 id="architecture">Architecture</h3> <ul> <li><strong>Data Ingestion:</strong> Capture context updates from various sources using Pub/Sub.</li> <li><strong>Real-time Processing:</strong> Employ Cloud Dataflow to process, enrich, and link context data with relevant EKG entities</li> <li><strong>Storage:</strong> <ul> <li>Utilize BigTable to store the primary context data, taking advantage of its versioning capabilities.</li> <li>Define and maintain entities and their relationships within Enterprise Knowledge Graph (EKG).</li> </ul> </li> <li><strong>Serving:</strong> <ul> <li>Query BigTable directly for specific entities and historical versions of context data.</li> <li>Leverage EKG’s search capabilities to discover context based on related entities or complex relationships.</li> </ul> </li> </ul> <p><br/></p> <h3 id="example-personalized-customer-support">Example: Personalized Customer Support</h3> <p>Imagine you’re a customer facing an issue with a product. Wouldn’t it be ideal if the support system understood your purchase history, knew the product’s intricacies, and could access the latest troubleshooting information? Let’s dive into an example of how a BigTable and EKG-powered Context Store makes this possible:</p> <ul> <li><strong>BigTable:</strong> Stores customer interaction histories (including timestamps), product purchase data, and real-time support ticket updates.</li> <li><strong>EKG:</strong> Represents products, their features, known issues, and troubleshooting guides. EKG entities link to relevant support tickets, customer information, or product documentation.</li> <li><strong>Support System:</strong> Leverages both BigTable’s historical context and EKG’s structured knowledge to provide: <ul> <li>Personalized troubleshooting guidance based on the customer’s specific product configuration and support history.</li> <li>Access to related troubleshooting guides or known issues through EKG links.</li> </ul> </li> </ul> <p><br/></p> <h3 id="key-considerations">Key Considerations:</h3> <ul> <li><strong>Schema Design:</strong> Optimize your BigTable schema and EKG entity modeling to match your data sources and the types of contextual queries you anticipate.</li> <li><strong>Linking Context and Entities:</strong> Define processes (within Cloud Dataflow or Cloud Functions) for linking and updating the connections between your raw context data and its corresponding EKG entities.</li> <li><strong>Access Patterns:</strong> Choose between BigTable’s API and EKG’s API based on whether your queries focus on retrieving full context histories or exploring relationships between context and entities.</li> </ul> <p><br/></p> <hr/> <p><br/></p> <h2 id="tailoring-data-pipelines-understanding-elt-c-permutations">Tailoring Data Pipelines: Understanding ELT-C Permutations</h2> <p>The classic Extract, Transform, Load (ETL) process has evolved to address the demands of modern data-driven organizations. By strategically incorporating the Contextualize (C) step at different points in the pipeline, we create several permutations. While in this post, We explored Contextualize(C) following an ETL step, the Context can be injected at any stage of the ETL process, and even multiple times.</p> <p>Understanding these variations - <code class="language-plaintext highlighter-rouge">ELT-C</code>, <code class="language-plaintext highlighter-rouge">ELT-C</code>, <code class="language-plaintext highlighter-rouge">EC-T</code>, and even <code class="language-plaintext highlighter-rouge">EL-C-T-C</code> is key to designing a data pipeline that best aligns with your specific needs and data architecture. Let’s explore these permutations and their implications.</p> <ol> <li> <p><strong>ETL-C</strong> (discussed in majority of this post above)</p> <ul> <li><strong>ETL (Extract, Transform, Load)</strong>: This is the traditional approach where data is: <ul> <li>Extracted from source systems</li> <li>Transformed into a desired format and structure</li> <li>Loaded into a target data warehouse or lake</li> </ul> </li> <li><strong>C (Contextualize)</strong>: After the data is cleaned and structured within the target system, an additional step enriches it by adding relevant context (metadata, external data, user interactions)</li> </ul> </li> <li> <p><strong>ELT-C</strong></p> <ul> <li><strong>EL (Extract, Load):</strong> Emphasizes loading raw data into the target system as quickly as possible. Transformations and cleaning are deferred.</li> <li><strong>T (Transform):</strong> Once in the target system (typically suitable for big data), transformations are applied, often leveraging the target system’s processing power.</li> <li><strong>C (Contextualize):</strong> Similar to ETL-C, context is added as a final enrichment step.</li> </ul> </li> <li> <p><strong>EL-C-T</strong></p> <ul> <li><strong>EL (Extract, Load):</strong> Same as in ELT-C, raw data is prioritized for quick ingestion.</li> <li><strong>C (Contextualize):</strong> Contextualization occurs immediately after loading, adding context while the data is still raw. This might involve linking external data or incorporating real-time insights.</li> <li><strong>T (Transform):</strong> Finally, the now contextually enriched data undergoes transformations for cleaning, formatting, and structuring.</li> </ul> </li> <li> <p><strong>EL-C-T-C</strong></p> <ul> <li><strong>EL (Extract, Load)</strong>: Identical initial step to the previous variations.</li> <li><strong>C (Contextualize)</strong>: Context is added after loading, as explained before.</li> <li><strong>T (Transform)</strong>: Transformations are applied.</li> <li><strong>C (Contextualize)</strong>: An additional contextualization layer is added after transformations. This might involve re-evaluating context based on the transformed data or deriving new contextual features.</li> </ul> </li> </ol> <p><br/></p> <h3 id="when-to-choose-which">When to Choose Which</h3> <p>The optimal permutation depends on factors like:</p> <ul> <li>Data Size and Velocity: If dealing with massive, rapidly changing data, ELT-C might prioritize rapid loading for analysis or model training.</li> <li>Need for Clean Data: Traditional <code class="language-plaintext highlighter-rouge">ETL-C</code> is still valuable when clean, structured data is a hard requirement for downstream systems.</li> <li>Dynamic Context: <code class="language-plaintext highlighter-rouge">EL-C-T</code> or <code class="language-plaintext highlighter-rouge">EL-C-T-C</code> are valuable when context is derived from the raw data itself or needs to be updated alongside transformations.</li> </ul> <p>Do note that, these are not always strictly distinct. Modern data pipelines are often hybrid, employing elements of different patterns based on the specific data source or use case.</p> <p><br/></p> <h3 id="a-el-c-t-c-scenario">A EL-C-T-C Scenario</h3> <p><strong>Scenario</strong>: Real-time Sentiment Analysis for Social Media</p> <p><strong>Challenge</strong>: Social media is a goldmine of raw customer sentiment, but extracting actionable insights quickly from its unstructured, ever-changing nature is complex.</p> <p><strong>How EL-C-T-C Helps</strong>:</p> <ol> <li> <p>Extract (E): A system continuously pulls raw social media data (posts, tweets, comments) from various platforms.</p> </li> <li> <p>Load (L): The raw data is loaded directly into a scalable data lake for immediate accessibility.</p> </li> <li> <p>Contextualize (C1): Initial contextualization is applied:</p> <ul> <li>Metadata: Timestamp, social platform, geo-location (if available)</li> <li>Basic Sentiment: Text analysis tools assign preliminary sentiment scores (positive, negative, neutral)</li> </ul> </li> <li> <p>Transform (T):</p> <ul> <li>NLP: Natural Language Processing models extract key topics, product mentions, and finer-grained sentiment.</li> <li>Cleanup: Filters remove spam and irrelevant content.</li> </ul> </li> <li> <p>Contextualize (C2): The transformed data is further enriched:</p> <ul> <li>Entity Linking: Identified brand and product mentions link to internal product Knowledge Graphs or external product databases.</li> <li>Trend Analysis: Data is cross-referenced with historical data for trend analysis. Are complaints about a particular feature increasing? Is positive sentiment surrounding a new competitor emerging?</li> </ul> </li> </ol> <p><br/></p> <h4 id="why-el-c-t-c-works-here">Why EL-C-T-C Works Here:</h4> <ul> <li>Speed: Raw data is ingested immediately, crucial for real-time analysis.</li> <li>Contextual Insights on Raw Data: Basic sentiment and metadata are added quickly, allowing for preliminary alerting on urgent issues.</li> <li>Evolving Context: The second contextualization layer refines sentiment, unlocks deeper insights (e.g., issues tied to specific features), and adds valuable trend context after transformations enhance the data.</li> </ul> <p><strong>Outcome</strong><br/> The business has a dashboard that not only tracks the real-time sentiment surrounding their brand and products, but can drill down on the drivers of those sentiments. This data empowers them to proactively address customer concerns, protect brand reputation, and make data-informed product and marketing decisions.</p> <hr/> <p>Is ELT-C the right choice for your data workflows? If you’re looking to fully unlock the potential of your data, I recommend giving this framework a closer look. Begin by identifying areas where integrating more context could substantially improve your analytics or machine learning models.</p> <p>I’m eager to hear your perspective! Are you implementing ELT-C or similar methods in your organization? Please share your experiences and insights in the comments below.</p>]]></content><author><name></name></author><category term="platform"/><category term="genai"/><category term="platform"/><category term="genai"/><category term="knowledge-graphs"/><summary type="html"><![CDATA[Think your AI apps could use a deeper understanding of your data? ETL-C (extract, load, transform, and contextualize) could be the answer. It's about adding context for better decisions. Intrigued? Read on.]]></summary></entry><entry><title type="html">(Part 2/3) Rethinking ETLs - How Large Language Models (LLM) can enhance Data Transformation and Integration</title><link href="https://subhadipmitra.com/blog/2024/etl-llm-part-2/" rel="alternate" type="text/html" title="(Part 2/3) Rethinking ETLs - How Large Language Models (LLM) can enhance Data Transformation and Integration"/><published>2024-04-20T21:07:38+00:00</published><updated>2024-04-20T21:07:38+00:00</updated><id>https://subhadipmitra.com/blog/2024/etl-llm-part-2</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/etl-llm-part-2/"><![CDATA[<p><strong>Part 2: Exploring examples and optimization goals</strong></p> <p>In the second installment of our three-part series on rethinking ETL processes through the lens of Large Language Models (LLMs), we shift our focus from the search for an optimal algorithm, <a href="/blog/2024/etl-llm-part-1/">covered in Part 1</a>, to exploring practical examples and defining clear optimization goals.</p> <p>Large Language Models have proven their potential in streamlining complex computational tasks, and their integration into ETL workflows promises to revolutionize how data is transformed and integrated.</p> <p>Today, we will delve into specific examples that will form the building blocks of LLMs’ role in various stages of the ETL pipeline — from extracting data from diverse sources, transforming it for enhanced analysis, to efficiently loading it into final destinations. We will also outline key optimization goals designed to enhance efficiency, accuracy, and scalability within ETL processes. These goals will form target goals for out LLM Agents in the ETL Workflow design and optimization in Part 3.</p> <p>Let’s start with some examples. <br/></p> <p><br/></p> <h2 id="example-1-simplified-etl">Example 1: Simplified ETL</h2> <p>Consider a simplified ETL scenario where you have:</p> <ul> <li><strong>Input Dataset</strong>: A large sales transactions table.</li> <li><strong>Output Dataset</strong>: A summarized report with sales aggregated by region and month.</li> <li><strong>Available Operations</strong>: <ul> <li>Filter (remove unwanted transactions)</li> <li>Group By (region, month)</li> <li>Aggregate (calculate sum of sales)</li> <li>Sort (order the output by region and month)</li> </ul> </li> </ul> <p><strong>Cost Modeling</strong> We’ll assume the primary cost factor is the size of the dataset at each stage:</p> <ul> <li>Operations that reduce dataset size have lower costs.</li> <li>Operations that maintain or increase size have higher costs.</li> </ul> <p><strong>Heuristic Function</strong></p> <ul> <li><code class="language-plaintext highlighter-rouge">h(n)</code>: Estimates the cost to reach the goal (output dataset) from node n</li> <li>Our heuristic could be the estimated difference in the number of rows between the dataset at node ‘n’ and the expected number of rows in the final output.</li> </ul> <p><strong>A* Search in Action</strong></p> <ol> <li><em>Start:</em> Begin at the input dataset node.</li> <li><em>Expansion:</em> Consider possible operations (filter, group by, etc.). <ul> <li>Calculate the actual cost <code class="language-plaintext highlighter-rouge">g(n)</code> of reaching the new node.</li> <li>Estimate the heuristic cost <code class="language-plaintext highlighter-rouge">h(n)</code> for the new node.</li> <li>Add nodes to a priority queue ordered by <code class="language-plaintext highlighter-rouge">f(n) = g(n) + h(n)</code>.</li> </ul> </li> <li> <p><em>Prioritization:</em> The A* algorithm will favor exploring nodes with the lowest estimated total cost (<code class="language-plaintext highlighter-rouge">f(n)</code>).</p> </li> <li><em>Path Discovery:</em> Continue expanding nodes until the output dataset node is reached.</li> </ol> <p><br/> <br/> <strong>Example Decision</strong></p> <ul> <li>Assume ‘filtering’ reduces dataset size significantly with a low cost.</li> <li>‘Group by’ and ‘aggregate’ reduce size but have moderate costs.</li> <li>‘Sort’ has a cost but doesn’t change the dataset size.</li> </ul> <p>A* might prioritize an ETL path with early filtering, as the heuristic will indicate this gets us closer (in terms of data size) to the final output structure more quickly.</p> <p><br/> <br/></p> <h2 id="a-more-complex-scenario">A More Complex Scenario</h2> <h4 id="setup">Setup</h4> <ol> <li> <p><strong>Input Datasets</strong></p> <ul> <li>Large customer data file (CSV) with potential quality issues.</li> <li>Product reference table (database table).</li> <li>Web clickstream logs (semi-structured JSON).</li> </ul> </li> <li> <p><strong>Output Dataset</strong></p> <ul> <li>A well-structured, normalized table in a data warehouse, suitable for sales trend analysis by product category, customer demographics, and time period.</li> </ul> </li> <li> <p><strong>Available Operations</strong></p> <ul> <li><em>Data cleaning:</em> Fixing malformed data, handling missing values (various imputation techniques).</li> <li><em>Filtering:</em> Removing irrelevant records.</li> <li><em>Parsing:</em> Extracting information from JSON logs.</li> <li><em>Joining:</em> Combining customer data, product data, and clickstream events.</li> <li><em>Normalization:</em> Restructuring data into appropriate tables.</li> <li><em>Aggregation:</em> Calculating sales amounts, event counts, etc., at various granularities (daily, weekly, by product category).</li> </ul> </li> <li> <p><strong>Cost Factors</strong></p> <ul> <li><em>Computational Complexity</em>: Certain joins, complex aggregations, and advanced data cleaning are costly.</li> <li><em>Data Volume</em>: Impacts processing and storage at each step.</li> <li><em>Development Time</em>: Custom parsing or intricate cleaning logic might have high development costs.</li> <li><em>Error Potential</em>: Operations prone to error (e.g., complex parsing) carry the risk of rework.</li> </ul> </li> <li> <p><strong>Heuristic Function Possibilities</strong></p> <ul> <li><em>Schema Similarity:</em> Estimate how close a dataset’s structure is to the final schema (number of matching fields, normalization needs).</li> <li><em>Data Reduction:</em> Favor operations that significantly reduce dataset size early in the process.</li> <li><em>Dependency Alignment:</em> If certain output fields depend on others, prioritize operations that generate those dependencies first.</li> </ul> </li> </ol> <p><br/> <br/></p> <h4 id="a-in-action">A* in Action</h4> <p>The A* search would traverse a complex graph. Decisions could include:</p> <ul> <li><strong>Cleaning vs. Filtering:</strong> If data quality is very poor, A* might favor cleaning operations upfront, even if they don’t reduce size considerably, because bad data could cause costlier problems downstream.</li> <li><strong>Parse First vs. Join First:</strong> The heuristic might guide whether to parse clickstream data or join with reference tables, depending on estimated output size and downstream dependencies.</li> <li><strong>Aggregation Granularity:</strong> Determine when to do preliminary aggregations guided by the heuristic, balancing early data reduction with the need to retain data for the final output granularity.</li> </ul> <h5 id="benefits-of-a-in-this-complex-etl-scenario">Benefits of A* in this Complex ETL Scenario</h5> <ul> <li><strong>Adaptability:</strong> A* can handle diverse cost factors and optimization goals by adjusting cost models and heuristics.</li> <li><strong>Pruning:</strong> A good heuristic can help avoid exploring unpromising ETL paths, saving computational resources.</li> <li><strong>Evolution:</strong> You can start with basic heuristics and refine them as you learn more about the actual performance of our ETL process.</li> </ul> <h5 id="caveats">Caveats</h5> <ul> <li><strong>Heuristic Design:</strong> Designing effective heuristics in intricate ETL scenarios is challenging and requires domain knowledge about the data and operations.</li> <li><strong>Overhead:</strong> A* itself has some computational overhead compared to a simpler algorithm like Dijkstra’s.</li> </ul> <p><br/> <br/> <br/></p> <h2 id="heuristics-design-strategy">Heuristics Design Strategy</h2> <p>We can consider different heuristic approaches when designing our A* search for ETL optimization, along with the types of domain knowledge they leverage:</p> <h3 id="heuristic-types">Heuristic Types</h3> <ol> <li> <p><strong>Schema-Based Similarity</strong></p> <ul> <li>Logic: Measures how close the dataset at a given node is to the structure of the final output schema.</li> <li>Domain Knowledge: Requires understanding the desired target schema fields, relationships, and normalization requirements.</li> <li>Example: Count matching fields, penalize the need for normalization or complex restructuring.</li> </ul> </li> <li> <p><strong>Data Volume Reduction</strong></p> <ul> <li>Logic: Favors operations that significantly reduce dataset size (in terms of rows or overall data).</li> <li>Domain Knowledge: Understanding which operations tend to reduce data size (e.g., filtering, aggregations with appropriate grouping).</li> <li>Example: Estimate the percentage of data likely to be removed by a filtering operation.</li> </ul> </li> <li> <p><strong>Dependency Resolution</strong></p> <ul> <li>Logic: Prioritizes operations that generate fields or datasets needed for downstream transformations.</li> <li>Domain Knowledge: Understanding the dependencies between different output fields and how operations create them.</li> <li>Example: If a field in the output depends on joining two datasets, favor the join operation early if it leads to lower overall costs.</li> </ul> </li> <li> <p><strong>Error Risk Mitigation</strong></p> <ul> <li>Logic: Penalizes paths that include operations with a high potential for errors or that propagate errors from earlier stages.</li> <li>Domain Knowledge: Understanding data quality issues, common failure points of operations (e.g., parsing complex data), and the impact of errors on costs (rework, etc.).</li> <li>Example: Increase the estimated cost of joins on fields that are known to have potential mismatches.</li> </ul> </li> <li> <p><strong>Computational Complexity Awareness</strong></p> <ul> <li>Logic: Factor in the known computational intensity of different operations.</li> <li>Domain Knowledge: Understanding which operations are generally CPU-bound, memory-bound, or have I/O bottlenecks.</li> <li>Example: Slightly penalize computationally expensive joins or complex aggregations.</li> </ul> </li> </ol> <blockquote> <h5 id="hybrid-heuristics"><strong>Hybrid Heuristics</strong></h5> <p>In complex ETL scenarios, you’ll likely get the best results by combining aspects of these heuristics. For instance: Prioritize early filtering to reduce data size, BUT check if it depends on fields that need cleaning first. Favor a computationally expensive join if it’s essential for generating multiple output fields and avoids several smaller joins later.</p> </blockquote> <hr/> <p><br/></p> <h3 id="building-a-heuristic-strategy">Building a Heuristic Strategy</h3> <p>Consider the ETL operation in Banking, where we are building the Customer 360 degree view. The Data sources are the customer transactions from POS with Credit Card numbers need to be hashed before joining with the customer profile. Third Party datasets are also used to augment the customer profile, which are only available end of day. Datasets also include recent call center interaction view and past Campaigns /and offers prepared for the customer.</p> <p><br/> <br/></p> <h4 id="optimization-goal-1">Optimization Goal #1</h4> <p>Dependency Resolution</p> <h5 id="concept-developement">Concept Developement</h5> <p>Let’s design a heuristic specifically tailored for dependency resolution as our optimization goal.</p> <p><strong>Understanding the Scenario</strong></p> <ul> <li><em>Core Dependency</em>: It seems like the hashed credit card number is a crucial linking field to join the transaction data with the customer profile.</li> <li><em>Temporal Dependency</em>: Third-party data augmentation can only happen once it’s available at the end of the day.</li> <li><em>Potential for Parallelism</em>: The call center interaction view and the campaign/offer history likely don’t directly depend on the core customer profile join.</li> </ul> <p><strong>Dependency Resolution Heuristic</strong></p> <p>Our heuristic <code class="language-plaintext highlighter-rouge">h(n)</code> should estimate the cost to reach the final output dataset from <code class="language-plaintext highlighter-rouge">node n</code>. Here’s a possible approach:</p> <ol> <li><em>Critical Path</em>: Identify the operations required to join the transaction data with the customer profile (e.g., hashing, potentially cleaning, the join itself). Assign a high priority to nodes along this path.</li> <li><em>Blocking Dependencies</em>: If a node represents a state where certain datasets remain unjoined, increase the heuristic cost proportionally to the number of output fields still dependent on those joins.</li> <li><em>End-of-Day Bottleneck</em>: Introduce a time dependency factor. While the third-party augmentation is delayed, artificially increase the cost of nodes requiring that data, effectively postponing those operations in the search.</li> <li><em>Parallelism Bonus</em>: Slightly decrease the heuristic cost for nodes representing datasets involved in the call center view or campaign history since those could potentially be processed in parallel with the core dependency chain.</li> </ol> <h5 id="execution-planning">Execution Planning</h5> <ul> <li><em>Node A</em>: Transaction data hashed, Customer Profile ready, but not yet joined. This node would likely have a high heuristic cost due to the blocking dependency.</li> <li><em>Node B</em>: Represents the call center interaction view partially prepared. This node might have a slightly lower heuristic cost due to the parallelism bonus.</li> </ul> <p><strong>Domain Knowledge Required</strong></p> <p>Linking Fields: Precisely which fields form the basis for joins. Typical Data Volumes: Understanding which joins might be computationally more expensive due to dataset sizes.</p> <p><strong>Refinement</strong></p> <p>Although this heuristic is a good starting point, it can be further refined.</p> <ul> <li><em>Learning from Execution</em>: If certain joins consistently take longer, increase their cost contribution within the heuristic.</li> <li><em>Factoring in Error Potential</em>: If specific datasets are prone to quality issues delaying downstream processes, include this risk in the heuristic estimation.</li> </ul> <hr/> <h4 id="optimization-goal-2">Optimization Goal #2</h4> <p>Resource Usage Minimization</p> <h5 id="concept-developement-1">Concept Developement</h5> <p>Here’s a breakdown of factors we could incorporate into a heuristic <code class="language-plaintext highlighter-rouge">h(n)</code> that estimates the resource usage impact from a given node n onwards:</p> <ol> <li> <p><strong>Dataset Size Anticipation</strong>:</p> <ul> <li><em>Expansive Operations</em>: Penalize operations likely to increase dataset size significantly (e.g., certain joins, unnest operations on complex data).</li> <li><em>Reductive Operations</em>: Favor operations known to reduce dataset size (filtering, aggregation with ‘lossy’ calculations like averages).</li> <li><em>Estimation</em>: You might need some profiling of our datasets to understand the average impact of different operations.</li> </ul> </li> <li> <p><strong>Memory-Intensive Operations</strong>: Identify operations likely to require large in-memory processing (complex sorts, joins with certain algorithms). Increase the cost contribution of nodes leading to those operations.</p> </li> <li> <p><strong>Network Bottlenecks</strong>: If data movement is a concern, factor in operations that involve transferring large datasets between systems. Increase the cost contribution for nodes where this movement is necessary.</p> </li> <li> <p><strong>Temporary Storage</strong>:</p> </li> </ol> <p>If some operations necessitate intermediate storage, include an estimate of the storage cost in the heuristic calculation.</p> <p><br/></p> <h5 id="execution-planning-1">Execution Planning</h5> <p>Effective execution planning is key to optimizing performance and managing resources. Our approach involves dissecting the workflow into distinct nodes, each with unique characteristics and challenges. Let’s delve into the specifics of two critical nodes in our current pipeline, examining their roles and the anticipated heuristic costs associated with their operations.</p> <ul> <li> <p><em>Node A</em>: Represents a state after filtering transactions down to a specific time period (reducing size) followed by a memory-intensive sort. The heuristic cost might be moderate (reduction bonus, but sort penalty).</p> </li> <li> <p><em>Node B</em>: Represents a state where a large external dataset needs to be joined, likely increasing dataset size and potentially involving data transfer. This node would likely have a higher heuristic cost.</p> </li> </ul> <p><br/></p> <h5 id="mathematical-representions">Mathematical Representions</h5> <p><strong>Node A</strong></p> <p>To represent Node A mathematically, we can describe it using notation that captures the operations and their effects on data size and processing cost. Here’s a conceptual mathematical representation:</p> <p>Let’s define:</p> <ul> <li>\(D\): Initial dataset.</li> <li>\(t*{1}, t*{2}\): Time boundaries for filtering.</li> <li>\(f(D, t*{1}, t*{2})\): Function that filters \(D\) to include only transactions within the time period \([t_{1}, t_{2}]\).</li> <li>\(s(X)\): Function that sorts dataset \(X\) in memory.</li> </ul> <p>Then, Node A can be represented as: \(A = s(f(D, t_1, t_2))\)</p> <p>Here, \(f(D, t_1, t_2)\) reduces the size of \(D\) by filtering out transactions outside the specified time window, and \(s(X)\) represents a memory-intensive sorting operation on the filtered dataset. The overall cost \(C_A\) for Node A could be estimated by considering both the reduction in size (which decreases cost) and the sorting penalty (which increases cost). Mathematically, the cost might be represented as:</p> <blockquote> \[C_A = cost(f(D, t_1, t_2)) - reduction_bonus + cost(s(X)) + sort_penalty\] </blockquote> <p>This formula provides a way to quantify the heuristic cost of operations performed in Node A, taking into account both the benefits and penalties of the operations involved.</p> <p><br/></p> <p><strong>Node B</strong></p> <p>For Node B, which involves joining a large external dataset and possibly increases the dataset size and incurs data transfer costs, we can also set up a mathematical representation using appropriate functions and operations.</p> <p>Let’s define:</p> <ul> <li>\(D\): initial dataset</li> <li>\(E\): large external dataset</li> <li>\(j(D, E)\): Function that joins \(D\) with \(E\)</li> </ul> <p>Node B can then be represented as: \(B = j(D, E)\)</p> <p>Here, \(j(D, E)\) represents the join operation that combines dataset \(D\) with external dataset \(E\), likely increasing the size and complexity of the data.</p> <p>Considering the resource costs, particularly for data transfer and increased dataset size, we can mathematically represent the cost \(C_B\) for Node B as follows:</p> <blockquote> \[C_B = base_cost(D) + base_cost(E) + join_cost(D, E) + data_transfer_cost + size_penalty\] </blockquote> <ul> <li>\(base_cost(D)\) and \(base_cost(E)\) represent the inherent costs of handling datasets \(D\) and \(E\), respectively.</li> <li>\(join_cost(D, E)\) accounts for the computational overhead of performing the join operation.</li> <li>\(data_transfer_cost\) covers the expenses related to transferring \(E\) if it is not locally available.</li> <li>\(size_penalty\) is added due to the increased dataset size resulting from the join, which may affect subsequent processing steps.</li> </ul> <p>This formulation provides a baseline framework to analyze the costs associated with Node B in your data processing pipeline.</p> <p><br/></p> <h5 id="domain-knowledge-required">Domain Knowledge Required</h5> <ul> <li><em>Operational Costs</em>: Understand which specific operations in our ETL environment tend to be CPU-bound, memory-bound, or network-bound.</li> <li><em>Data Sizes</em>: Have a general sense of the relative sizes of our datasets and how those sizes might change after typical transformations.</li> </ul> <p><br/></p> <h4 id="hybrid-approach">Hybrid Approach</h4> <blockquote> <p>Crucially, we may want to combine this resource-focused heuristic with our earlier dependency resolution heuristic. Here’s how we could do this:</p> <ul> <li>Weighted Sum: <code class="language-plaintext highlighter-rouge">h(n) = weight_dependency * h_dependency(n) + weight_resource * h_resource(n)</code>. Experiment with weights to find a balance between our optimization goals.</li> <li>Conditional Prioritization: Perhaps use <code class="language-plaintext highlighter-rouge">h_dependency(n)</code> as the primary guide, but if two paths have similar dependency costs, then use <code class="language-plaintext highlighter-rouge">h_resource(n)</code> as a tie-breaker.</li> </ul> </blockquote> <h4 id="further-refinements">Further refinements</h4> <p>As we continue to optimize our ETL processes, it’s crucial to consider how we can further enhance the efficiency and cost-effectiveness of our operations (beyond the hyrbid approaches discussed). There are several key areas where further refinements could prove beneficial. Let’s explore how targeted adjustments might help us manage resources better and smooth out any recurring bottlenecks in our processes.</p> <ul> <li>Are there particular resources (CPU, memory, network, cloud storage) that are our primary cost concern? We could fine-tune the heuristic to be more sensitive to those.</li> <li>Do we have any insights from past ETL executions about which operations consistently become resource bottlenecks?</li> </ul> <p><br/> <br/> In the final iteration, we will explore how to integrate Large Language Models (LLMs) as agents to enhance various aspects of the ETL optimization process we’ve been discussing.</p>]]></content><author><name></name></author><category term="algorithms"/><category term="genai"/><category term="algorithms"/><category term="genai"/><category term="llm"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[Rethinking ETLs - The Power of Large Language Models. Part 2 Exploring examples and optimization goals]]></summary></entry><entry><title type="html">(Part 1/3) Rethinking ETLs - How Large Language Models (LLM) can enhance Data Transformation and Integration</title><link href="https://subhadipmitra.com/blog/2024/etl-llm-part-1/" rel="alternate" type="text/html" title="(Part 1/3) Rethinking ETLs - How Large Language Models (LLM) can enhance Data Transformation and Integration"/><published>2024-04-15T20:20:18+00:00</published><updated>2024-04-15T20:20:18+00:00</updated><id>https://subhadipmitra.com/blog/2024/etl-llm-part-1</id><content type="html" xml:base="https://subhadipmitra.com/blog/2024/etl-llm-part-1/"><![CDATA[<p><strong>Part 1: Searching for an Optimal Algorithm for ETL planning</strong></p> <p>Welcome to the first installment of our three-part series exploring the transformative impact of Large Language Models (LLMs) on ETL (Extract, Transform, Load) processes. In this opening segment, we focus on the search for an optimal algorithm for ETL planning.</p> <p>As businesses increasingly rely on vast amounts of data to make critical decisions, the efficiency and effectiveness of ETL processes become paramount. Traditional methods often fall short in handling the complexity and scale of modern data environments, necessitating a shift towards more sophisticated tools.</p> <p>In this part, we delve into how traditional algorithms can be used to design the planning stage of ETL workflows — we identify algorithms that are not only more efficient but also capable of handling complex, dynamic data scenarios. We will explore the foundational concepts behind these algorithms and discuss how they can be tailored to improve the entire data transformation and integration cycle.</p> <p>Join us as we begin our journey into rethinking ETLs with the power of advanced language models, setting the stage for a deeper dive into practical applications and optimization strategies in the subsequent parts of the series.</p> <p><br/></p> <h2 id="understanding-the-problem">Understanding the Problem</h2> <p>Before diving into algorithms, let’s clarify the core elements:</p> <ul> <li><strong>Input Dataset</strong>: The structure (schema), data types, size, and potential quality issues of your initial data source.</li> <li><strong>Output Dataset</strong>: The desired structure, data types, and any specific formatting requirements for your target data.</li> <li><strong>ETL Operations</strong>: The available transformations at your disposal (e.g., cleaning, filtering, joining, aggregation, calculations).</li> </ul> <p><br/></p> <h2 id="core-algorithm-considerations">Core Algorithm Considerations</h2> <p>Here’s a foundational outline of the algorithm, which we’ll refine for optimality:</p> <ol> <li> <p><strong>Graph Construction:</strong></p> <ul> <li>Represent datasets as nodes.</li> <li>Possible ETL operations define the potential edges between nodes.</li> </ul> </li> <li> <p><strong>Cost Assignment:</strong></p> <ul> <li>Associate a cost with each ETL operation. Costs can incorporate:</li> <li>Computational Complexity: Time and resource usage of the operation.</li> <li>Data Volume impact: How the operation changes dataset size.</li> <li>Dependencies: Operations that must precede others.</li> </ul> </li> <li> <p><strong>Search/Optimization:</strong></p> <ul> <li>Employ a search algorithm to find the path with the lowest cumulative cost from Start to End Node. Consider:</li> <li>Dijkstra’s Algorithm: Suited for finding the shortest overall path.</li> <li>A Search:* Incorporates heuristics (estimates of cost-to-goal) for potential speedups.</li> <li>Genetic Algorithms: Explore a broader search space, potentially finding unconventional but less costly solutions.</li> </ul> </li> </ol> <p><br/></p> <h2 id="optimization-refinements">Optimization Refinements</h2> <ul> <li><strong>Dynamic Cost Adjustment</strong>: Costs aren’t static. Refine cost estimates during execution based on the actual characteristics of intermediate datasets.</li> <li><strong>Caching and Materialization</strong>: If certain intermediary datasets are reused frequently, strategically store them to avoid recalculation.</li> <li><strong>Parallelism</strong>: Leverage parallel processing in your ETL tool where possible to execute multiple operations simultaneously.</li> <li><strong>Constraints</strong>: Factor in constraints like deadlines, resource limits, or error-tolerance thresholds.</li> </ul> <p><br/> <br/></p> <p><strong>Algorithm Pseudocode (Illustrative)</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="n">function</span> <span class="nf">plan_ETL_steps</span><span class="p">(</span><span class="n">input_dataset</span><span class="p">,</span> <span class="n">output_dataset</span><span class="p">,</span> <span class="n">available_operations</span><span class="p">):</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="nf">create_graph</span><span class="p">(</span><span class="n">input_dataset</span><span class="p">,</span> <span class="n">output_dataset</span><span class="p">,</span> <span class="n">available_operations</span><span class="p">)</span>
    <span class="nf">assign_costs</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>

    <span class="n">optimal_path</span> <span class="o">=</span> <span class="nf">dijkstra_search</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">start_node</span><span class="p">,</span> <span class="n">end_node</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">optimal_path</span>

</code></pre></div></div> <p><br/></p> <h4 id="step-1-define-the-graphnode-class">Step 1: Define the GraphNode Class</h4> <p>We’ll start by defining a simple class for a graph node that includes basic attributes like node name and any additional data that describes the dataset state at that node.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">GraphNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>  <span class="c1"># Data can include schema, size, or other relevant details.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">neighbors</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># List of tuples (neighbor_node, cost)
</span>
    <span class="k">def</span> <span class="nf">add_neighbor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">neighbors</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">neighbor</span><span class="p">,</span> <span class="n">cost</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">GraphNode(</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
</code></pre></div></div> <p><br/></p> <h4 id="step-2-edge-representation">Step 2: Edge Representation</h4> <p>The Edges must include multiple costs and a probability for each cost. This would typically involve storing each cost along with its probability in a tuple or a custom object.</p> <p>Multiple costs can represent the computation cost ($) which can have probability in terms of spot-instances of compute available vs committed instances. These computation costs determination can be defined by the priority of the ETL pipeline, e.g. a pipeline / step that generates an end of day compliance report may need a more deterministic behavior and consequently a higher cost for committed computed instances.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">Edge</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">costs</span><span class="p">,</span> <span class="n">probabilities</span><span class="p">):</span>
          <span class="n">self</span><span class="p">.</span><span class="n">target</span> <span class="o">=</span> <span class="n">target</span>
          <span class="n">self</span><span class="p">.</span><span class="n">costs</span> <span class="o">=</span> <span class="n">costs</span>  <span class="c1"># List of costs
</span>          <span class="n">self</span><span class="p">.</span><span class="n">probabilities</span> <span class="o">=</span> <span class="n">probabilities</span>  <span class="c1"># List of probabilities for each cost
</span></code></pre></div></div> <p><br/></p> <h4 id="step-3-function-to-create-graph-with-intermediate-nodes">Step 3: Function to Create Graph with Intermediate Nodes</h4> <p>This function simulates the creation of intermediate nodes based on hypothetical operations. Each operation affects the dataset, potentially creating a new node:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_graph</span><span class="p">(</span><span class="n">input_dataset</span><span class="p">,</span> <span class="n">output_dataset</span><span class="p">,</span> <span class="n">available_operations</span><span class="p">):</span>
    <span class="n">start_node</span> <span class="o">=</span> <span class="nc">GraphNode</span><span class="p">(</span><span class="sh">"</span><span class="s">start</span><span class="sh">"</span><span class="p">,</span> <span class="n">input_dataset</span><span class="p">)</span>
    <span class="n">end_node</span> <span class="o">=</span> <span class="nc">GraphNode</span><span class="p">(</span><span class="sh">"</span><span class="s">end</span><span class="sh">"</span><span class="p">,</span> <span class="n">output_dataset</span><span class="p">)</span>
    <span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">start_node</span><span class="p">]</span>

    <span class="c1"># Placeholder for a more sophisticated operations processing
</span>    <span class="n">current_nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">start_node</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">operation</span> <span class="ow">in</span> <span class="n">available_operations</span><span class="p">:</span>
        <span class="n">new_nodes</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">current_nodes</span><span class="p">:</span>
            <span class="c1"># Generate a new node for each operation from each current node
</span>            <span class="n">intermediate_data</span> <span class="o">=</span> <span class="n">operation</span><span class="p">[</span><span class="sh">'</span><span class="s">apply</span><span class="sh">'</span><span class="p">](</span><span class="n">node</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>  <span class="c1"># Hypothetical function to apply operation
</span>            <span class="n">new_node</span> <span class="o">=</span> <span class="nc">GraphNode</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">-&gt;</span><span class="si">{</span><span class="n">operation</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">intermediate_data</span><span class="p">)</span>
            <span class="n">node</span><span class="p">.</span><span class="nf">add_neighbor</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">operation</span><span class="p">[</span><span class="sh">'</span><span class="s">cost</span><span class="sh">'</span><span class="p">])</span>
            <span class="n">new_nodes</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>

        <span class="c1"># Update current nodes to the newly created nodes
</span>        <span class="n">current_nodes</span> <span class="o">=</span> <span class="n">new_nodes</span>
        <span class="n">nodes</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">new_nodes</span><span class="p">)</span>

    <span class="c1"># Connect the last set of nodes to the end node
</span>    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">current_nodes</span><span class="p">:</span>
        <span class="n">node</span><span class="p">.</span><span class="nf">add_neighbor</span><span class="p">(</span><span class="n">end_node</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># Assuming a nominal cost to reach the end state
</span>
    <span class="k">return</span> <span class="n">start_node</span><span class="p">,</span> <span class="n">end_node</span><span class="p">,</span> <span class="n">nodes</span>

</code></pre></div></div> <p><br/></p> <h4 id="step-4-hypothetical-operation-definitions">Step 4: Hypothetical Operation Definitions</h4> <p>To simulate realistic ETL operations, we define each operation with a function that modifies the dataset (simplified for this example):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">apply_cleaning</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">cleaned(</span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">apply_transformation</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">transformed(</span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">available_operations</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">clean</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">apply</span><span class="sh">'</span><span class="p">:</span> <span class="n">apply_cleaning</span><span class="p">,</span> <span class="sh">'</span><span class="s">cost</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">transform</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">apply</span><span class="sh">'</span><span class="p">:</span> <span class="n">apply_transformation</span><span class="p">,</span> <span class="sh">'</span><span class="s">cost</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div> <p><br/></p> <h4 id="step-5-implementing-a-modified-dijkstras-algorithm">Step 5: Implementing a modified Dijkstra’s Algorithm</h4> <p>Since each edge includes multiple costs with associated probabilities, the comparison of paths becomes probabilistic. We must determine a method to calculate the “expected” cost of a path based on the costs and their probabilities. The expected cost can be computed by summing the products of costs and their corresponding probabilities.</p> <p>We need to redefine the comparison of paths in the priority queue to use these expected values, which involves calculating a composite cost that considers all probabilities.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">heapq</span>

<span class="k">def</span> <span class="nf">calculate_expected_cost</span><span class="p">(</span><span class="n">costs</span><span class="p">,</span> <span class="n">probabilities</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">sum</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span> <span class="n">p</span> <span class="k">for</span> <span class="n">c</span><span class="p">,</span> <span class="n">p</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">costs</span><span class="p">,</span> <span class="n">probabilities</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">start_node</span><span class="p">):</span>
    <span class="c1"># Initialize distances with infinity
</span>    <span class="n">inf</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">infinity</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">distances</span> <span class="o">=</span> <span class="p">{</span><span class="n">node</span><span class="p">:</span> <span class="n">inf</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">all_nodes</span><span class="p">}</span>
    <span class="n">distances</span><span class="p">[</span><span class="n">start_node</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1"># Priority queue holds tuples of (expected_cost, node)
</span>    <span class="n">priority_queue</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="n">start_node</span><span class="p">)]</span>
    <span class="n">visited</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">while</span> <span class="n">priority_queue</span><span class="p">:</span>
        <span class="n">current_expected_cost</span><span class="p">,</span> <span class="n">current_node</span> <span class="o">=</span> <span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">priority_queue</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">current_node</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">visited</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">current_node</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">current_node</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
            <span class="n">new_expected_cost</span> <span class="o">=</span> <span class="n">current_expected_cost</span> <span class="o">+</span> <span class="nf">calculate_expected_cost</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">costs</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">probabilities</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">new_expected_cost</span> <span class="o">&lt;</span> <span class="n">distances</span><span class="p">[</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">]:</span>
                <span class="n">distances</span><span class="p">[</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_expected_cost</span>
                <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">priority_queue</span><span class="p">,</span> <span class="p">(</span><span class="n">new_expected_cost</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">distances</span>

</code></pre></div></div> <p><br/> <br/></p> <p><strong>Example Execution</strong></p> <p>Here’s we might set up an example run of the above setup:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input_dataset</span> <span class="o">=</span> <span class="sh">"</span><span class="s">raw_data</span><span class="sh">"</span>
<span class="n">output_dataset</span> <span class="o">=</span> <span class="sh">"</span><span class="s">final_data</span><span class="sh">"</span>

<span class="n">start_node</span><span class="p">,</span> <span class="n">end_node</span><span class="p">,</span> <span class="n">all_nodes</span> <span class="o">=</span> <span class="nf">create_graph</span><span class="p">(</span><span class="n">input_dataset</span><span class="p">,</span> <span class="n">output_dataset</span><span class="p">,</span> <span class="n">available_operations</span><span class="p">)</span>
<span class="n">path</span><span class="p">,</span> <span class="n">cost</span> <span class="o">=</span> <span class="nf">dijkstra_search</span><span class="p">(</span><span class="n">start_node</span><span class="p">,</span> <span class="n">end_node</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Optimal path:</span><span class="sh">"</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total cost:</span><span class="sh">"</span><span class="p">,</span> <span class="n">cost</span>
</code></pre></div></div> <p>This example demonstrates generating intermediate nodes dynamically as a result of applying operations in an ETL workflow. In a real application, the operations and their impacts would be more complex, involving actual data transformations, schema changes, and potentially conditional logic to decide which operations to apply based on the data’s characteristics or previous processing steps.</p> <p><br/></p> <hr/> <p><br/></p> <h1 id="defining-a-dsl">Defining a DSL</h1> <p>Creating a Domain-Specific Language (DSL) for modeling and specifying ETL (Extract, Transform, Load) processes can greatly simplify designing and implementing complex data workflows, particularly when integrating with a system that dynamically generates an ETL graph as previously discussed. Here’s an outline for a DSL that can describe datasets, operations, and their sequences in an ETL process:</p> <h2 id="dsl-structure-overview">DSL Structure Overview</h2> <p>The DSL will consist of definitions for datasets, operations (transforms and actions), and workflow sequences. Here’s an example of what each component might look like in our DSL:</p> <p><br/></p> <h4 id="1-dataset-definitions">1. Dataset Definitions</h4> <p>Datasets are defined by their names and potentially any metadata that describes their schema or other characteristics important for transformations.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataset</span> <span class="n">raw_data</span> <span class="p">{</span>
    <span class="n">source</span><span class="p">:</span> <span class="sh">"</span><span class="s">path/to/source/file.csv</span><span class="sh">"</span>
    <span class="n">schema</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">float</span><span class="p">}</span>
<span class="p">}</span>

<span class="n">dataset</span> <span class="n">intermediate_data</span> <span class="p">{</span>
    <span class="n">derived_from</span><span class="p">:</span> <span class="n">raw_data</span>
    <span class="n">schema</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">cleaned_value</span><span class="p">:</span> <span class="nb">float</span><span class="p">}</span>
<span class="p">}</span>

<span class="n">dataset</span> <span class="n">final_data</span> <span class="p">{</span>
    <span class="n">derived_from</span><span class="p">:</span> <span class="n">intermediate_data</span>
    <span class="n">schema</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">final_value</span><span class="p">:</span> <span class="nb">float</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><br/></p> <h4 id="2-operation-definitions">2. Operation Definitions</h4> <p>Operations can be transformations or any kind of data processing function. Each operation specifies input and output datasets and may include a cost or complexity rating.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">operation</span> <span class="n">clean_data</span> <span class="p">{</span>
    <span class="nb">input</span><span class="p">:</span> <span class="n">raw_data</span>
    <span class="n">output</span><span class="p">:</span> <span class="n">intermediate_data</span>
    <span class="n">cost</span><span class="p">:</span> <span class="mi">2</span>
    <span class="n">function</span><span class="p">:</span> <span class="n">apply_cleaning</span>
<span class="p">}</span>

<span class="n">operation</span> <span class="n">transform_data</span> <span class="p">{</span>
    <span class="nb">input</span><span class="p">:</span> <span class="n">intermediate_data</span>
    <span class="n">output</span><span class="p">:</span> <span class="n">final_data</span>
    <span class="n">cost</span><span class="p">:</span> <span class="mi">3</span>
    <span class="n">function</span><span class="p">:</span> <span class="n">apply_transformation</span>
<span class="p">}</span>

</code></pre></div></div> <p><br/></p> <h4 id="3-workflow-definition">3. Workflow Definition</h4> <p>A workflow defines the sequence of operations applied to turn raw data into its final form.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">workflow</span> <span class="n">main_etl</span> <span class="p">{</span>
    <span class="n">start</span><span class="p">:</span> <span class="n">raw_data</span>
    <span class="n">end</span><span class="p">:</span> <span class="n">final_data</span>
    <span class="n">steps</span><span class="p">:</span> <span class="p">[</span><span class="n">clean_data</span><span class="p">,</span> <span class="n">transform_data</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p><br/></p> <hr/> <p><br/></p> <h1 id="search-algorithm-selection">Search Algorithm Selection</h1> <p>Let’s dive deeper into how to choose the best search algorithm for planning our ETL process. Recall that our core task involves finding the optimal (likely the lowest cost) path through the graph of datasets and ETL operations. While we defined a modified, Djiktra’s algorithm for variable and probabilistic costs, for discussion below we will use single aggregated weights.</p> <p>Absolutely, let’s dive deeper into how to choose the best search algorithm for planning your ETL process. Recall that our core task involves finding the optimal (likely the lowest cost) path through the graph of datasets and ETL operations.</p> <p><br/></p> <iframe width="100%" height="400" src="https://www.youtube.com/embed/A60q6dcoCjw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""> </iframe> <p><br/></p> <h2 id="key-search-algorithm-candidates">Key Search Algorithm Candidates</h2> <ol> <li> <p><strong>Dijkstra’s Algorithm</strong>:</p> <ul> <li>Classic shortest path algorithm.</li> <li>Guarantees finding the optimal solution if all edge costs are non-negative.</li> <li>Well-suited when your primary objective is minimizing the overall cumulative cost.</li> <li>Complexity: <code class="language-plaintext highlighter-rouge">O(|V|²)</code> in a simple implementation, but can be improved to <code class="language-plaintext highlighter-rouge">O(|E| + |V|log|V|)</code> using priority queues. <code class="language-plaintext highlighter-rouge">|V| = number of nodes (datasets)</code>, <code class="language-plaintext highlighter-rouge">|E| = number of edges (ETL operations)</code>.</li> </ul> </li> <li> <p><strong>A* Search</strong></p> <ul> <li>Extension of Dijkstra’s that uses a heuristic function to guide the search.</li> <li>Heuristic: An estimate of the cost from a given node to the goal node.</li> <li>Can potentially find solutions faster than Dijkstra’s, especially when good heuristics are available.</li> <li>Complexity: Depends on the quality of the heuristic, but potentially still faster than a purely uninformed search like Dijkstra’s.</li> </ul> </li> <li> <p><strong>Genetic Algorithms</strong></p> <ul> <li>Inspired by evolutionary processes.</li> <li>Maintain a population of potential ETL plans (paths).</li> <li>“Crossover” and “mutation” operations combine and modify plans iteratively, favoring those with lower costs.</li> <li>Excellent for exploring a wider range of solutions and potentially discovering non-intuitive, less costly paths.</li> <li>Complexity: Can be computationally intensive but may find better solutions in complex scenarios.</li> </ul> </li> </ol> <p><br/></p> <h2 id="factors-influencing-algorithm-selection">Factors Influencing Algorithm Selection</h2> <ul> <li> <p><strong>Size and Complexity of the ETL Graph</strong>: For smaller graphs, Dijkstra’s might be sufficient. Large, complex graphs might benefit from A* or genetic algorithms.</p> </li> <li> <p><strong>Importance of Optimality</strong>: If guaranteeing the absolute least cost path is critical, Dijkstra’s is the safest bet. If near-optimal solutions are acceptable, A* or genetic algorithms could provide faster results.</p> </li> <li> <p><strong>Availability of Heuristics</strong>: A* search heavily depends on having a good heuristic function. In ETL, a heuristic could estimate the remaining cost based on the types of operations needed to reach the final dataset structure.</p> </li> <li> <p><strong>Resource Constraints</strong>: Genetic algorithms can be computationally expensive. If runtime or available resources are limited, Dijkstra’s or A* might be more practical.</p> </li> </ul> <p><br/></p> <h3 id="caveats">Caveats</h3> <ul> <li><strong>No Perfect Algorithm</strong>: The best algorithm is often problem-specific. Experimentation might be necessary.</li> <li><strong>Tool Integration</strong>: Our chosen ETL tool might have built-in optimization features or favor certain search algorithms.</li> </ul> <p><br/></p> <h2 id="example-heuristic-for-etl">Example: Heuristic for ETL</h2> <p>Imagine your goal is to minimize data volume throughout the process. A heuristic for A* search could be:</p> <ul> <li>Estimate the reduction (or increase) in dataset size caused by the remaining operations needed to reach the final output dataset.</li> </ul> <p><br/> <br/></p> <p>In the <a href="/blog/2024/etl-llm-part-2/">next iteration of this series</a>, we will walkthrough examples of ETL scenarios, leveraging A* Star algorithm above and explore various optimization goals.</p>]]></content><author><name></name></author><category term="algorithms"/><category term="genai"/><category term="algorithms"/><category term="genai"/><category term="llm"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[Rethinking ETLs - The Power of Large Language Models. Part 1 - Explore traditional algorithms for efficient ETL planning in complex data.]]></summary></entry></feed>